"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__header"),function(){new o($(this))}),$.each($(".site__menu-nav_anchors"),function(){new s($(this))}),$.each($(".slides"),function(){new i($(this))})});var e=function(e){var o=this,s=$(window),i=e,n=$("body"),t=function(){s.on({load:function(){d()}})},a=function(){n[0].preloader=o,t()},d=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},o=function(e){var o=this,s=e,i=$(window),n=$("html"),t=s.find(".site__menu"),a=($(".site__content"),!1),d=!1,l=!0,r=0,c=s.find(".site__menu-btn"),f=0,h=function(){i.on({load:function(){f=i.width()},resize:function(){f!=i.width()&&(f=i.width()+1,i.width()>=1024&&(t.scrollTop(0),_(c)))},scroll:function(){a=i.scrollTop()>=2*s.innerHeight(),i.scrollTop()>=s.innerHeight()?l&&(l=!1,s.addClass("site__header_hide")):(l=!0,s.removeClass("site__header_hide")),a?s.hasClass("site__header_hide")&&setTimeout(function(){s.addClass("site__header_fixed"),s.removeClass("site__header_hide")},100):i.scrollTop()<=3*s.innerHeight()&&s.removeClass("site__header_fixed")},DOMMouseScroll:function(e){var o=e.originalEvent.detail;if(o){var s=o>0?1:-1;u(s)}s<0?d=!0:setTimeout(function(){d=!1},300)},mousewheel:function(e){var o=e.originalEvent.wheelDelta;if(o){var s=o>0?-1:1;u(s)}s<0?d=!0:setTimeout(function(){d=!1},300)}}),$(window).scroll(function(e){var o=$(this).scrollTop();if(o>r){u(1);var s=1}else{u(-1);var s=-1}r=o,s<0?d=!0:setTimeout(function(){d=!1},300)}),c.on({click:function(){$(this).hasClass("opened")?_($(this)):p($(this))}})},u=function(e){e>0&&!s.hasClass("site__header_hidden")&&!c.hasClass("opened")&&a&&!d&&s.addClass("site__header_hidden"),e<0&&s.hasClass("site__header_hidden")&&!c.hasClass("opened")&&a&&d&&s.removeClass("site__header_hidden")},_=function(e){n.css({overflowY:"auto"}),e.removeClass("opened"),s.removeClass("opened-menu")},v=function(){s[0].obj=o,h()},p=function(e){e.addClass("opened"),s.addClass("opened-menu"),n.css({overflowY:"hidden"})};v()},s=function(e){var o=this,s=e,i=s.find(".site__menu-link"),n=$("html"),t=$(window),a=$("html, body"),d=$(".site__header"),l=($(".popup__cookies-info"),function(){t.on({resize:function(){r()},scroll:function(){r()}}),i.on({click:function(){var e=$(this),o=e.attr("data-href"),s=$("."+o).offset().top-d.innerHeight();return i.removeClass("active"),e.addClass("active"),s=t.width()>=1024?$("."+o).offset().top-91:$("."+o).offset().top-64,a.stop(!0,!1),a.animate({scrollTop:s},300),n.css({overflowY:"auto"}),d.find(".site__menu-btn").removeClass("opened"),d.removeClass("opened-menu"),!1}})}),r=function(){for(var e=$(window).scrollTop(),o=$("body").find('[data-scroll="scroll"]'),s=(o.offset().top,0);s<o.length;s++){var n=$(o[s]),t=$(o[s]).offset().top-d.outerHeight(!0),a=$(o[s]).outerHeight(!0);if(e>t){var l=n.attr("class").split(" "),r=i.filter("[data-href="+l[0]+"]");i.removeClass("active"),r.addClass("active")}e>t+a&&i.removeClass("active")}},c=function(){s[0].obj=o,l(),r()};c()},i=function(e){var o=this,s=e,i=$(window),n=function(){i.on({scroll:function(){t()}})},t=function(){var e=i.scrollTop(),o=i.height(),n=s.offset().top,t=n-e,a=1-t/o;a>.5&&(s.hasClass("slides_active")||s.addClass("slides_active"))},a=function(){s[0].slides=o,n(),t()};a()}}();
"use strict";!function(){$(function(){$.each($(".products-cookies__items"),function(){new n($(this))}),$.each($(".shop"),function(){new t($(this))})});var n=function(n){var t,i=this,e=n,o=$(window),s=!1,c=function(){o.on({resize:function(){o.width()<768?s||(u(),s=!0):s&&(r(),s=!1)}})},u=function(){t=new Swiper(e.find(".swiper-container"),{slidesPerView:1,loop:!0,autoplay:3e3,speed:500,nextButton:e.find(".swiper-button-next"),prevButton:e.find(".swiper-button-prev")})},r=function(){t.destroy(!0,!0)},d=function(){e[0].obj=i,c(),o.width()<768&&(s||(u(),s=!0))};d()},t=function(n){var t=this,i=n,e=$(window),o=$(".site__header"),s=0,c=function(){e.on({load:function(){s=e.width(),r()},resize:function(){s!=e.width()&&(s=e.width()+1,r())}})},u=function(){i[0].obj=t,c()},r=function(){var n=e.height();i.css({"min-height":n-o.innerHeight()-parseInt(i.css("padding-bottom"))-parseInt(i.css("padding-top"))-$(".site__main-title").outerHeight(!0)})};u()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
