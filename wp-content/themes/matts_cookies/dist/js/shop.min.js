"use strict";!function(){var e=!0;$(function(){new n($(".preloader")),$.each($(".site__header"),function(){new i($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new o($(this))}),$.each($(".site__content-full"),function(){new s($(this))}),$.each($(".site_index"),function(){new a($(this))})});var n=function(e){var n=this,i=$(window),t=e,o=$("body"),s=function(){i.on({load:function(){d()}})},a=function(){o[0].preloader=n,s()},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$(".site").addClass("site__loaded")},500)};a()},i=function(n){var i=this,t=n,o=$(window),s=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),c=!1,l=!0,r=0,h=t.find(".site__menu-btn"),f=0,u=function(){o.on({load:function(){f=o.width()},resize:function(){f!=o.width()&&(f=o.width()+1,o.width()>=1024&&(a.scrollTop(0),v(h)))},scroll:function(){d=o.scrollTop()>=2*t.innerHeight(),o.scrollTop()>=t.innerHeight()+20?l&&(l=!1,t.addClass("site__header_hide")):(l=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):o.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),o.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;_(i)}i<0?c=!0:setTimeout(function(){c=!1},300)},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;_(i)}i<0?c=!0:setTimeout(function(){c=!1},300)}}),$(window).scroll(function(e){var n=$(this).scrollTop();if(n>r){_(1);var i=1}else{_(-1);var i=-1}r=n,i<0?c=!0:setTimeout(function(){c=!1},300)}),h.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(n){n>0&&!t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&!c&&t.addClass("site__header_hidden"),n<0&&t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&c&&e&&t.removeClass("site__header_hidden")},v=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=i,u()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),s.css({overflowY:"hidden"})};m()},t=function(n){var i=this,t=n,o=t,s=$("html"),a=$(window),d=$("html, body"),c=$(".site__header"),l=($(".popup__cookies-info"),function(){a.on({resize:function(){},scroll:function(){}}),o.on({click:function(){var n=$(this),i=n.attr("data-href"),t=$("."+i).offset().top-c.innerHeight();return o.removeClass("active"),n.addClass("active"),t=$("."+i).offset().top,d.stop(!0,!1),d.animate({scrollTop:t},{duration:500,progress:function(){e=!1,c.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),s.css({overflowY:"auto"}),c.find(".site__menu-btn").removeClass("opened"),c.removeClass("opened-menu"),!1}})}),r=function(){t[0].obj=i,l()};r()},o=function(e){var n=this,i=e,t=$(window),o=function(){t.on({load:function(){s()},scroll:function(){s()}})},s=function(){var e=t.scrollTop(),n=t.height(),o=i.offset().top,s=o-e,a=1-s/n;a>.5&&(i.hasClass("slides_active")||i.addClass("slides_active"))},a=function(){i[0].slides=n,o()};a()},s=function(e){var n=this,i=e,t=$(window),o=$(".site__header"),s=0,a=function(){t.on({load:function(){s=t.width(),c()},resize:function(){s!=t.width()&&(s=t.width()+1,c())}})},d=function(){i[0].obj=n,a()},c=function(){var e=t.height();i.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)}),i.find(".contact-us").length&&t.width()>=1024?i.css({"min-height":""}):i.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()},a=function(e){var n=this,i=e,t=$(window),o=($("html, body"),function(){t.on({load:function(){setTimeout(function(){s()},100)}})}),s=function(){var e=window.location.hash.replace("#","");if(e){var n=$("."+window.location.hash.replace("#",""));n.length&&window.scrollTo(0,parseInt(n.offset().top))}},a=function(){i[0].obj=n,o()};a()}}();
"use strict";!function(){$(function(){$.each($(".products-cookies__items"),function(){new i($(this))}),$.each($(".shop"),function(){new n($(this))})});var i=function(i){var n,t=this,o=i,c=$(window),s=!1,e=function(){c.on({resize:function(){c.width()<768?s||(u(),s=!0):s&&(h(),s=!1)}})},u=function(){n=o.find(".slick-container").slick({dots:!1})},h=function(){n.slick("unslick")},f=function(){o[0].obj=t,e(),c.width()<768&&(s||(u(),s=!0))};f()},n=function(i){var n=this,t=i,o=$(window),c=$(".site__header"),s=0,e=function(){o.on({load:function(){s=o.width(),h()},resize:function(){s!=o.width()&&(s=o.width()+1,h())}})},u=function(){t[0].obj=n,e()},h=function(){var i=o.height();t.css({"min-height":i-c.innerHeight()-parseInt(t.css("padding-bottom"))-parseInt(t.css("padding-top"))-$(".site__main-title").outerHeight(!0)})};u()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
