"use strict";!function(){var e=!0;$(function(){new i($(".preloader")),$.each($(".site__header"),function(){new n($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new o($(this))}),$.each($(".site__content-full"),function(){new s($(this))}),$.each($(".site_index"),function(){new a($(this))})});var i=function(e){var i=this,n=$(window),t=e,o=$("body"),s=function(){n.on({load:function(){d()}})},a=function(){o[0].preloader=i,s(),$("html").css({"overflow-y":"hidden"})},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$("html").css({"overflow-y":"scroll"}),$(".site").addClass("site__loaded")},500)};a()},n=function(i){var n=this,t=i,o=$(window),s=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),l=!1,r=!0,c=0,h=t.find(".site__menu-btn"),f=0,u=function(){o.on({load:function(){f=o.width()},resize:function(){f!=o.width()&&(f=o.width()+1,o.width()>=1024&&(a.scrollTop(0),v(h)))},scroll:function(){d=o.scrollTop()>=2*t.innerHeight(),o.scrollTop()>=t.innerHeight()+20?r&&(r=!1,t.addClass("site__header_hide")):(r=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):o.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),o.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;_(n)}n<0?l=!0:setTimeout(function(){l=!1},300)},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;_(n)}n<0?l=!0:setTimeout(function(){l=!1},300)}}),$(window).scroll(function(e){var i=$(this).scrollTop();if(i>c){_(1);var n=1}else{_(-1);var n=-1}c=i,n<0?l=!0:setTimeout(function(){l=!1},300)}),h.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(i){i>0&&!t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&!l&&t.addClass("site__header_hidden"),i<0&&t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&l&&e&&t.removeClass("site__header_hidden")},v=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=n,u()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),s.css({overflowY:"hidden"})};m()},t=function(i){var n=this,t=i,o=t,s=$("html"),a=$(window),d=$("html, body"),l=$(".site__header"),r=($(".popup__cookies-info"),function(){a.on({resize:function(){c()},scroll:function(){c()}}),o.on({click:function(){var i=$(this),n=i.attr("data-href"),t=$("."+n).offset().top;return $(".site__menu-nav_anchors a").removeClass("active"),i.addClass("active"),d.stop(!0,!1),d.animate({scrollTop:t},{duration:500,progress:function(){e=!1,l.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),s.css({overflowY:"auto"}),l.find(".site__menu-btn").removeClass("opened"),l.removeClass("opened-menu"),!1}})}),c=function(){for(var e=a.scrollTop(),i=$("body").find('[data-scroll="scroll"]'),n=(i.offset().top,0);n<i.length;n++){var t=$(i[n]),s=$(i[n]).offset().top-l.outerHeight(!0),d=$(i[n]).outerHeight(!0);if(e>s){var r=t.attr("class").split(" "),c=o.filter("[data-href="+r[0]+"]");o.removeClass("active"),c.addClass("active")}e>s+d&&o.removeClass("active")}},h=function(){t[0].obj=n,r()};h()},o=function(e){var i=this,n=e,t=$(window),o=function(){t.on({load:function(){s()},scroll:function(){s()}})},s=function(){var e=t.scrollTop(),i=t.height(),o=n.offset().top,s=o-e,a=1-s/i;a>.5&&(n.hasClass("slides_active")||n.addClass("slides_active"))},a=function(){n[0].slides=i,o()};a()},s=function(e){var i=this,n=e,t=$(window),o=$(".site__header"),s=0,a=function(){t.on({load:function(){s=t.width(),l()},resize:function(){s!=t.width()&&(s=t.width()+1,l())}})},d=function(){n[0].obj=i,a()},l=function(){var e=t.height();n.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)}),n.find(".contact-us").length&&t.width()>=1024?n.css({"min-height":""}):n.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()},a=function(e){var i=this,n=e,t=$(window),o=($("html, body"),function(){t.on({load:function(){setTimeout(function(){s()},100)}})}),s=function(){var e=window.location.hash.replace("#","");if(e){var i=$("."+window.location.hash.replace("#",""));i.length&&window.scrollTo(0,parseInt(i.offset().top))}},a=function(){n[0].obj=i,o()};a()}}();
"use strict";!function(){$(function(){$.each($(".products-cookies__items"),function(){new i($(this))}),$.each($(".shop"),function(){new n($(this))})});var i=function(i){var n,t=this,o=i,c=$(window),s=!1,e=function(){c.on({resize:function(){c.width()<768?s||(u(),s=!0):s&&(h(),s=!1)}})},u=function(){n=o.find(".slick-container").slick({dots:!1})},h=function(){n.slick("unslick")},f=function(){o[0].obj=t,e(),c.width()<768&&(s||(u(),s=!0))};f()},n=function(i){var n=this,t=i,o=$(window),c=$(".site__header"),s=0,e=function(){o.on({load:function(){s=o.width(),h()},resize:function(){s!=o.width()&&(s=o.width()+1,h())}})},u=function(){t[0].obj=n,e()},h=function(){var i=o.height();t.css({"min-height":i-c.innerHeight()-parseInt(t.css("padding-bottom"))-parseInt(t.css("padding-top"))-$(".site__main-title").outerHeight(!0)})};u()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LnByb2R1Y3RzLWNvb2tpZXMtc2xpZGVyLmpzIl0sIm5hbWVzIjpbImdsb2JhbFNjcm9sbEZsYWciLCIkIiwiUHJlbG9hZGVyIiwiZWFjaCIsIk1lbnUiLCJ0aGlzIiwiU2Nyb2xsUGFuZWwiLCJTbGlkZXMiLCJGdWxsSGVpZ2h0IiwiU2Nyb2xsVG9IYXNoIiwib2JqIiwiX3NlbGYiLCJfd2luZG93Iiwid2luZG93IiwiX3ByZWxvYWRlciIsIl9ib2R5IiwiX2FkZEV2ZW50cyIsIm9uIiwibG9hZCIsIl9zaG93U2l0ZSIsIl9pbml0IiwicHJlbG9hZGVyIiwiY3NzIiwib3ZlcmZsb3cteSIsImFkZENsYXNzIiwic2V0VGltZW91dCIsInJlbW92ZSIsIl9vYmoiLCJfaHRtbCIsIl9tZW51IiwiZmluZCIsIl9hY3Rpb24iLCJfYWN0aW9uMiIsIl9mbGFnSGlkZSIsImxhc3RTY3JvbGxUb3AiLCJfc2hvd01lbnVCdG4iLCJfZ2xvYmFsV2lkdGgiLCJ3aWR0aCIsInJlc2l6ZSIsInNjcm9sbFRvcCIsIl9jbG9zZU1lbnUiLCJzY3JvbGwiLCJpbm5lckhlaWdodCIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJET01Nb3VzZVNjcm9sbCIsImUiLCJkZWx0YSIsIm9yaWdpbmFsRXZlbnQiLCJkZXRhaWwiLCJkaXJlY3Rpb24iLCJfY2hlY2tTY3JvbGwiLCJtb3VzZXdoZWVsIiwid2hlZWxEZWx0YSIsImV2ZW50Iiwic3QiLCJjbGljayIsIl9vcGVuTWVudSIsImVsZW0iLCJvdmVyZmxvd1kiLCJfbGlua3MiLCJfZG9tIiwiX2hlYWRlciIsIl9jaGFuZ2VBY3RpdmUiLCJjdXJJdGVtIiwibmV3Q2xhc3MiLCJhdHRyIiwibmV4dEl0ZW1Ub3AiLCJvZmZzZXQiLCJ0b3AiLCJzdG9wIiwiYW5pbWF0ZSIsImR1cmF0aW9uIiwicHJvZ3Jlc3MiLCJjb21wbGV0ZSIsIml0ZW0iLCJpIiwibGVuZ3RoIiwiY3VyIiwiaXRlbUN1ciIsIm91dGVySGVpZ2h0IiwiaXRlbUhlaWdodCIsImN1ckNsYXNzIiwic3BsaXQiLCJjdXJMaW5rIiwiZmlsdGVyIiwiY3VyU2Nyb2xsIiwid2luZG93SCIsImhlaWdodCIsInRvcFBvcyIsInRvcEluV2luZG93IiwidmlzaWJsZVBlcmNlbnQiLCJzbGlkZXMiLCJfc2V0SGVpZ2h0IiwibWluLWhlaWdodCIsIl9zY3JvbGxUbyIsImhhc2giLCJsb2NhdGlvbiIsInJlcGxhY2UiLCJzY3JvbGxUbyIsInBhcnNlSW50IiwiUHJvZHVjdHNDb29raWVzU2xpZGVyIiwiU2hvcEhlaWdodCIsIl9zbGlja1NsaWRlciIsIl9zbGlja0luaXQiLCJfaW5pdFNsaWNrIiwiX2Rlc3Ryb3lTbGljayIsInNsaWNrIiwiZG90cyJdLCJtYXBwaW5ncyI6IkFBQUEsY0FDQSxXQUVJLEdBQUlBLElBQW1CLENBRXZCQyxHQUFHLFdBRUMsR0FBSUMsR0FBV0QsRUFBRSxlQUVqQkEsRUFBRUUsS0FBTUYsRUFBRyxpQkFBbUIsV0FFMUIsR0FBSUcsR0FBT0gsRUFBR0ksU0FJbEJKLEVBQUVFLEtBQU1GLEVBQUUsZUFBZ0IsV0FFdEIsR0FBSUssR0FBYUwsRUFBRUksU0FJdkJKLEVBQUVFLEtBQU1GLEVBQUUsV0FBWSxXQUVsQixHQUFJTSxHQUFRTixFQUFFSSxTQUlsQkosRUFBRUUsS0FBTUYsRUFBRSx1QkFBd0IsV0FFOUIsR0FBSU8sR0FBWVAsRUFBRUksU0FJdEJKLEVBQUVFLEtBQU1GLEVBQUUsZUFBZ0IsV0FFdEIsR0FBSVEsR0FBY1IsRUFBRUksVUFNNUIsSUFBSUgsR0FBWSxTQUFVUSxHQUd0QixHQUFJQyxHQUFRTixLQUNSTyxFQUFVWCxFQUFHWSxRQUNiQyxFQUFhSixFQUNiSyxFQUFRZCxFQUFFLFFBR1ZlLEVBQWEsV0FFVEosRUFBUUssSUFDSkMsS0FBTSxXQUVGQyxRQU1aQyxFQUFRLFdBRUpMLEVBQU0sR0FBR00sVUFBWVYsRUFDckJLLElBSUFmLEVBQUUsUUFBUXFCLEtBQ05DLGFBQWMsWUFJdEJKLEVBQVksV0FF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YSxXQUVUSixFQUFRSyxJQUNKcUIsT0FBUSxXQUVBMUIsRUFBUXlCLFFBQVUsSUFFYm1FLElBRURDLElBQ0FELEdBQWEsR0FPYkEsSUFFQUUsSUFDQUYsR0FBYSxPQVVqQ0MsRUFBYSxXQUVURixFQUFlNUUsRUFBS0csS0FBSyxvQkFBb0I2RSxPQUN6Q0MsTUFBTSxLQUlkRixFQUFnQixXQUVaSCxFQUFhSSxNQUFNLFlBR3ZCdkYsRUFBUSxXQUNKTyxFQUFLLEdBQUdqQixJQUFNQyxFQUNkSyxJQUVJSixFQUFReUIsUUFBVSxNQUVibUUsSUFFREMsSUFDQUQsR0FBYSxJQU83QnBGLE1BR0FrRixFQUFhLFNBQVU1RixHQUd2QixHQUFJQyxHQUFRTixLQUNSc0IsRUFBT2pCLEVBQ1BFLEVBQVVYLEVBQUVZLFFBQ1ppRCxFQUFVN0QsRUFBRSxpQkFDWm1DLEVBQWUsRUFHZnBCLEVBQWEsV0FFVEosRUFBUUssSUFDSkMsS0FBTSxXQUVGa0IsRUFBZXhCLEVBQVF5QixRQUN2QndELEtBR0p2RCxPQUFRLFdBRUFGLEdBQWdCeEIsRUFBUXlCLFVBRXhCRCxFQUFleEIsRUFBUXlCLFFBQVUsRUFFakN3RCxTQVFoQnpFLEVBQVEsV0FDSk8sRUFBTSxHQUFJakIsSUFBTUMsRUFDaEJLLEtBRUo2RSxFQUFhLFdBRVQsR0FBSUwsR0FBUzVFLEVBQVE0RSxRQUVyQjdELEdBQUtMLEtBQ0R3RSxhQUFjTixFQUFTMUIsRUFBUXBCLGNBQWdCMEQsU0FBVXpFLEVBQUtMLElBQUksbUJBQXNCOEUsU0FBVXpFLEVBQUtMLElBQUksZ0JBQW1CckIsRUFBRSxxQkFBcUIrRSxhQUFZLEtBSzdLNUQiLCJmaWxlIjoic2hvcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbiggZnVuY3Rpb24oKXtcblxuICAgIHZhciBnbG9iYWxTY3JvbGxGbGFnID0gdHJ1ZTtcblxuICAgICQoIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBuZXcgUHJlbG9hZGVyKCAkKCcucHJlbG9hZGVyJykgKTtcblxuICAgICAgICAkLmVhY2goICQoICcuc2l0ZV9faGVhZGVyJyApLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgbmV3IE1lbnUgKCAkKCB0aGlzICkgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCdbZGF0YS1ocmVmXScpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBTY3JvbGxQYW5lbCggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5zbGlkZXMnKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgU2xpZGVzKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLnNpdGVfX2NvbnRlbnQtZnVsbCcpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBGdWxsSGVpZ2h0KCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLnNpdGVfaW5kZXgnKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgU2Nyb2xsVG9IYXNoKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgfSApO1xuXG4gICAgdmFyIFByZWxvYWRlciA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApLFxuICAgICAgICAgICAgX3ByZWxvYWRlciA9IG9iaixcbiAgICAgICAgICAgIF9ib2R5ID0gJCgnYm9keScpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2hvd1NpdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfYm9keVswXS5wcmVsb2FkZXIgPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG5cblxuXG4gICAgICAgICAgICAgICAgJCgnaHRtbCcpLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3Nob3dTaXRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfcHJlbG9hZGVyLmFkZENsYXNzKCAncHJlbG9hZGVyX2xvYWRlZCcgKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgX3ByZWxvYWRlci5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAkKCdodG1sJykuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICdzY3JvbGwnXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLnNpdGUnKS5hZGRDbGFzcyggJ3NpdGVfX2xvYWRlZCcgKTtcblxuICAgICAgICAgICAgICAgIH0sNTAwKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xuXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcblxuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBNZW51ID0gZnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfaHRtbCA9ICQoJ2h0bWwnKSxcbiAgICAgICAgICAgIF9tZW51ID0gX29iai5maW5kKCcuc2l0ZV9fbWVudScpLFxuICAgICAgICAgICAgX2NvbnRlbnQgPSAkKCcuc2l0ZV9fY29udGVudCcpLFxuICAgICAgICAgICAgX2FjdGlvbiA9IGZhbHNlLFxuICAgICAgICAgICAgX2FjdGlvbjIgPSBmYWxzZSxcbiAgICAgICAgICAgIF9mbGFnSGlkZSA9IHRydWUsXG4gICAgICAgICAgICBsYXN0U2Nyb2xsVG9wID0gMCxcbiAgICAgICAgICAgIF9zaG93TWVudUJ0biA9IF9vYmouZmluZCgnLnNpdGVfX21lbnUtYnRuJyksXG4gICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSAwO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX2dsb2JhbFdpZHRoICE9IF93aW5kb3cud2lkdGgoKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKSArIDE7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbWVudS5zY3JvbGxUb3AoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZU1lbnUoIF9zaG93TWVudUJ0biApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbCc6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbiA9IF93aW5kb3cuc2Nyb2xsVG9wKCkgPj0gX29iai5pbm5lckhlaWdodCgpICogMjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cuc2Nyb2xsVG9wKCkgPj0gX29iai5pbm5lckhlaWdodCgpKyAyMCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfZmxhZ0hpZGUgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZsYWdIaWRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZScgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZsYWdIaWRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX2FjdGlvbiApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb2JqLmhhc0NsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGUnICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdzaXRlX19oZWFkZXJfZml4ZWQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggX3dpbmRvdy5zY3JvbGxUb3AoKSA8PSBfb2JqLmlubmVySGVpZ2h0KCkgKiAzICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3NpdGVfX2hlYWRlcl9maXhlZCcgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGRlbicgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy5zY3JvbGxUb3AoKSA8PSAxMCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdzaXRlX19oZWFkZXJfZml4ZWQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3NpdGVfX2hlYWRlcl9oaWRkZW4nICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnRE9NTW91c2VTY3JvbGwnOiBmdW5jdGlvbiAoIGUgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGUub3JpZ2luYWxFdmVudC5kZXRhaWw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZGVsdGEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gKCBkZWx0YSA+IDAgKSA/IDEgOiAtMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggZGlyZWN0aW9uICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkaXJlY3Rpb24gPCAwICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hY3Rpb24yID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hY3Rpb24yID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDAgKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnbW91c2V3aGVlbCc6IGZ1bmN0aW9uICggZSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZGVsdGEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gKCBkZWx0YSA+IDAgKSA/IC0xIDogMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggZGlyZWN0aW9uICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkaXJlY3Rpb24gPCAwICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hY3Rpb24yID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hY3Rpb24yID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDAgKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbihldmVudCl7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ID0gJCh0aGlzKS5zY3JvbGxUb3AoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3QgPiBsYXN0U2Nyb2xsVG9wKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAxXG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAtMSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gLTFcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIGRpcmVjdGlvbiA8IDAgICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWN0aW9uMiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWN0aW9uMiA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDAgKVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIF9zaG93TWVudUJ0bi5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKCB0aGlzICkuaGFzQ2xhc3MoICdvcGVuZWQnICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCAkKCB0aGlzICkgKVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb3Blbk1lbnUoICQoIHRoaXMgKSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NoZWNrU2Nyb2xsID0gZnVuY3Rpb24oIGRpcmVjdGlvbiApIHtcblxuICAgICAgICAgICAgICAgIGlmKCBkaXJlY3Rpb24gPiAwICYmICFfb2JqLmhhc0NsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGRlbicgKSAmJiAhX3Nob3dNZW51QnRuLmhhc0NsYXNzKCAnb3BlbmVkJyApICYmIF9hY3Rpb24gJiYgIV9hY3Rpb24yICl7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ3NpdGVfX2hlYWRlcl9oaWRkZW4nICk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiggZGlyZWN0aW9uIDwgMCAmJiBfb2JqLmhhc0NsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGRlbicgKSAmJiAhX3Nob3dNZW51QnRuLmhhc0NsYXNzKCAnb3BlbmVkJyApICAmJiBfYWN0aW9uICYmIF9hY3Rpb24yICYmIGdsb2JhbFNjcm9sbEZsYWcgKXtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2xvc2VNZW51ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cbiAgICAgICAgICAgICAgICBfaHRtbC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bydcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZUNsYXNzKCAnb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdvcGVuZWQtbWVudScgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbiggZWxlbSApICB7XG5cbiAgICAgICAgICAgICAgICBlbGVtLmFkZENsYXNzKCAnb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdvcGVuZWQtbWVudScgKTtcblxuICAgICAgICAgICAgICAgIF9odG1sLmNzcygge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBTY3JvbGxQYW5lbCA9IGZ1bmN0aW9uICggb2JqICkge1xuXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2xpbmtzID0gX29iaixcbiAgICAgICAgICAgIF9odG1sID0gJCgnaHRtbCcpLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgIF9kb20gPSAgJCggJ2h0bWwsIGJvZHknKSxcbiAgICAgICAgICAgIF9oZWFkZXIgPSAkKCcuc2l0ZV9faGVhZGVyJyksXG4gICAgICAgICAgICBfcG9wdXAgPSAkKCcucG9wdXBfX2Nvb2tpZXMtaW5mbycpO1xuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2NoYW5nZUFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGwnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGFuZ2VBY3RpdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX2xpbmtzLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKCB0aGlzICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2xhc3MgPSBjdXJJdGVtLmF0dHIoJ2RhdGEtaHJlZicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRJdGVtVG9wID0gJCggJy4nICsgbmV3Q2xhc3MgICkub2Zmc2V0KCkudG9wO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19tZW51LW5hdl9hbmNob3JzIGEnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5zdG9wKCB0cnVlLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5hbmltYXRlKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiBuZXh0SXRlbVRvcFxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuYWRkQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZGVuJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFNjcm9sbEZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaHRtbC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdhdXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLmZpbmQoJy5zaXRlX19tZW51LWJ0bicpLnJlbW92ZUNsYXNzKCAnb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5yZW1vdmVDbGFzcyggJ29wZW5lZC1tZW51JyApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jaGFuZ2VBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gX3dpbmRvdy5zY3JvbGxUb3AoKSxcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9ICQoJ2JvZHknKS5maW5kKCdbZGF0YS1zY3JvbGw9XCJzY3JvbGxcIl0nKSxcbiAgICAgICAgICAgICAgICAgICAgaXRlbVBvcyA9IGl0ZW0ub2Zmc2V0KCkudG9wO1xuXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGl0ZW0ubGVuZ3RoOyBpKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ciA9ICQoaXRlbVtpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtQ3VyID0gJChpdGVtW2ldKS5vZmZzZXQoKS50b3AgLSBfaGVhZGVyLm91dGVySGVpZ2h0KHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUhlaWdodCA9ICQoaXRlbVtpXSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIHNjcm9sbFRvcCA+IGl0ZW1DdXIgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJDbGFzcyA9IGN1ci5hdHRyKCdjbGFzcycpLnNwbGl0KCcgJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyTGluayA9IF9saW5rcy5maWx0ZXIoXCJbZGF0YS1ocmVmPVwiK2N1ckNsYXNzWzBdK1wiXVwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2xpbmtzLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckxpbmsuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIHNjcm9sbFRvcCA+ICggaXRlbUN1ciArIGl0ZW1IZWlnaHQgKSApe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfbGlua3MucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFNsaWRlcyA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbih7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tTY3JvbGwgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgdmFyIGN1clNjcm9sbCA9IF93aW5kb3cuc2Nyb2xsVG9wKCksXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd0ggPSBfd2luZG93LmhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICB0b3BQb3MgPSBfb2JqLm9mZnNldCgpLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgdG9wSW5XaW5kb3cgPSB0b3BQb3MtY3VyU2Nyb2xsLFxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlUGVyY2VudCA9IDEtKHRvcEluV2luZG93L3dpbmRvd0gpO1xuXG4gICAgICAgICAgICAgICAgaWYoIHZpc2libGVQZXJjZW50ID4gLjUgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoICFfb2JqLmhhc0NsYXNzKCdzbGlkZXNfYWN0aXZlJykgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoJ3NsaWRlc19hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0uc2xpZGVzID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgRnVsbEhlaWdodCA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfaGVhZGVyID0gJCgnLnNpdGVfX2hlYWRlcicpLFxuICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gMDtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9nbG9iYWxXaWR0aCAhPSBfd2luZG93LndpZHRoKCkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSBfd2luZG93LndpZHRoKCkgKyAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gX3dpbmRvdy5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogaGVpZ2h0IC0gX2hlYWRlci5pbm5lckhlaWdodCgpIC0gJCgnLnNpdGVfX21haW4tdGl0bGUnKS5vdXRlckhlaWdodCh0cnVlKVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIGlmKCBfb2JqLmZpbmQoJy5jb250YWN0LXVzJykubGVuZ3RoICkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IGhlaWdodCAtIF9oZWFkZXIuaW5uZXJIZWlnaHQoKSAtICQoJy5zaXRlX19tYWluLXRpdGxlJykub3V0ZXJIZWlnaHQodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IGhlaWdodCAtIF9oZWFkZXIuaW5uZXJIZWlnaHQoKSAtICQoJy5zaXRlX19tYWluLXRpdGxlJykub3V0ZXJIZWlnaHQodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBTY3JvbGxUb0hhc2ggPSBmdW5jdGlvbiAoIG9iaiApIHtcblxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfZG9tID0gICQoJ2h0bWwsIGJvZHknKTtcblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zY3JvbGxUbygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDAgKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2Nyb2xsVG8gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcblxuICAgICAgICAgICAgICAgIGlmKCBoYXNoICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtID0gJCggJy4nICsgd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKSApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBlbGVtLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKCAwLCBwYXJzZUludCggZWxlbS5vZmZzZXQoKS50b3AgKSApO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4oIGZ1bmN0aW9uKCl7XG5cbiAgICAkKCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcucHJvZHVjdHMtY29va2llc19faXRlbXMnKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgUHJvZHVjdHNDb29raWVzU2xpZGVyKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5zaG9wJyApLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgbmV3IFNob3BIZWlnaHQgKCAkKCB0aGlzICkgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgUHJvZHVjdHNDb29raWVzU2xpZGVyID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfc2xpY2tJbml0ID0gZmFsc2UsXG4gICAgICAgICAgICBfc2xpY2tTbGlkZXI7XG5cbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCA3NjggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggIV9zbGlja0luaXQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRTbGljaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2xpY2tJbml0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9zbGlja0luaXQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Rlc3Ryb3lTbGljaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2xpY2tJbml0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRTbGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3NsaWNrU2xpZGVyID0gX29iai5maW5kKCcuc2xpY2stY29udGFpbmVyJykuc2xpY2soIHtcbiAgICAgICAgICAgICAgICAgICAgZG90czogZmFsc2VcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZGVzdHJveVNsaWNrID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfc2xpY2tTbGlkZXIuc2xpY2soJ3Vuc2xpY2snKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG5cbiAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgNzY4ICkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCAhX3NsaWNrSW5pdCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRTbGljaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NsaWNrSW5pdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgU2hvcEhlaWdodCA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2hlYWRlciA9ICQoJy5zaXRlX19oZWFkZXInKSxcbiAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IDA7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSBfd2luZG93LndpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfZ2xvYmFsV2lkdGggIT0gX3dpbmRvdy53aWR0aCgpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gX3dpbmRvdy53aWR0aCgpICsgMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IF93aW5kb3cuaGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IGhlaWdodCAtIF9oZWFkZXIuaW5uZXJIZWlnaHQoKSAtIHBhcnNlSW50KCBfb2JqLmNzcygncGFkZGluZy1ib3R0b20nKSApIC0gcGFyc2VJbnQoIF9vYmouY3NzKCdwYWRkaW5nLXRvcCcpICkgLSAkKCcuc2l0ZV9fbWFpbi10aXRsZScpLm91dGVySGVpZ2h0KHRydWUpXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7Il19
