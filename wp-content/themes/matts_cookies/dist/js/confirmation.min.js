"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__header"),function(){new i($(this))}),$.each($(".site__menu-nav_anchors"),function(){new n($(this))}),$.each($(".slides"),function(){new t($(this))}),$.each($(".site__content-full"),function(){new s($(this))})});var e=function(e){var i=this,n=$(window),t=e,s=$("body"),o=function(){n.on({load:function(){d()}})},a=function(){s[0].preloader=i,o()},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$(".site").addClass("site__loaded")},500)};a()},i=function(e){var i=this,n=e,t=$(window),s=$("html"),o=n.find(".site__menu"),a=($(".site__content"),!1),d=!1,c=!0,h=0,l=n.find(".site__menu-btn"),r=0,f=function(){t.on({load:function(){r=t.width()},resize:function(){r!=t.width()&&(r=t.width()+1,t.width()>=1024&&(o.scrollTop(0),_(l)))},scroll:function(){a=t.scrollTop()>=2*n.innerHeight(),t.scrollTop()>=n.innerHeight()?c&&(c=!1,n.addClass("site__header_hide")):(c=!0,n.removeClass("site__header_hide")),a?n.hasClass("site__header_hide")&&setTimeout(function(){n.addClass("site__header_fixed"),n.removeClass("site__header_hide")},100):t.scrollTop()<=3*n.innerHeight()&&n.removeClass("site__header_fixed")},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;u(n)}n<0?d=!0:setTimeout(function(){d=!1},300)},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;u(n)}n<0?d=!0:setTimeout(function(){d=!1},300)}}),$(window).scroll(function(e){var i=$(this).scrollTop();if(i>h){u(1);var n=1}else{u(-1);var n=-1}h=i,n<0?d=!0:setTimeout(function(){d=!1},300)}),l.on({click:function(){$(this).hasClass("opened")?_($(this)):m($(this))}})},u=function(e){e>0&&!n.hasClass("site__header_hidden")&&!l.hasClass("opened")&&a&&!d&&n.addClass("site__header_hidden"),e<0&&n.hasClass("site__header_hidden")&&!l.hasClass("opened")&&a&&d&&n.removeClass("site__header_hidden")},_=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),n.removeClass("opened-menu")},v=function(){n[0].obj=i,f()},m=function(e){e.addClass("opened"),n.addClass("opened-menu"),s.css({overflowY:"hidden"})};v()},n=function(e){var i=this,n=e,t=n.find(".site__menu-link[data-href]"),s=$("html"),o=$(window),a=$("html, body"),d=$(".site__header"),c=($(".popup__cookies-info"),function(){o.on({resize:function(){},scroll:function(){}}),t.on({click:function(){var e=$(this),i=e.attr("data-href"),n=$("."+i).offset().top-d.innerHeight();return t.removeClass("active"),e.addClass("active"),n=o.width()>=1024?$("."+i).offset().top-91:$("."+i).offset().top-64,a.stop(!0,!1),a.animate({scrollTop:n},300),s.css({overflowY:"auto"}),d.find(".site__menu-btn").removeClass("opened"),d.removeClass("opened-menu"),!1}})}),h=function(){n[0].obj=i,c()};h()},t=function(e){var i=this,n=e,t=$(window),s=function(){t.on({scroll:function(){o()}})},o=function(){var e=t.scrollTop(),i=t.height(),s=n.offset().top,o=s-e,a=1-o/i;a>.5&&(n.hasClass("slides_active")||n.addClass("slides_active"))},a=function(){n[0].slides=i,s(),o()};a()},s=function(e){var i=this,n=e,t=$(window),s=$(".site__header"),o=0,a=function(){t.on({load:function(){o=t.width(),c()},resize:function(){o!=t.width()&&(o=t.width()+1,c())}})},d=function(){n[0].obj=i,a()},c=function(){var e=t.height();n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)}),n.find(".contact-us").length&&t.width()>=1024?n.css({"min-height":""}):n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},l=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},r=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"scroll"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,r())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return r(),!1}}),c.on({click:function(){return r(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:l()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
