"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__header"),function(){new o($(this))}),$.each($(".site__menu-nav_anchors"),function(){new s($(this))}),$.each($(".slides"),function(){new i($(this))})});var e=function(e){var o=this,s=$(window),i=e,n=$("body"),t=function(){s.on({load:function(){d()}})},a=function(){n[0].preloader=o,t()},d=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},o=function(e){var o=this,s=e,i=$(window),n=$("html"),t=s.find(".site__menu"),a=($(".site__content"),!1),d=!1,l=!0,r=0,c=s.find(".site__menu-btn"),f=0,h=function(){i.on({load:function(){f=i.width()},resize:function(){f!=i.width()&&(f=i.width()+1,i.width()>=1024&&(t.scrollTop(0),_(c)))},scroll:function(){a=i.scrollTop()>=2*s.innerHeight(),i.scrollTop()>=s.innerHeight()?l&&(l=!1,s.addClass("site__header_hide")):(l=!0,s.removeClass("site__header_hide")),a?s.hasClass("site__header_hide")&&setTimeout(function(){s.addClass("site__header_fixed"),s.removeClass("site__header_hide")},100):i.scrollTop()<=3*s.innerHeight()&&s.removeClass("site__header_fixed")},DOMMouseScroll:function(e){var o=e.originalEvent.detail;if(o){var s=o>0?1:-1;u(s)}s<0?d=!0:setTimeout(function(){d=!1},300)},mousewheel:function(e){var o=e.originalEvent.wheelDelta;if(o){var s=o>0?-1:1;u(s)}s<0?d=!0:setTimeout(function(){d=!1},300)}}),$(window).scroll(function(e){var o=$(this).scrollTop();if(o>r){u(1);var s=1}else{u(-1);var s=-1}r=o,s<0?d=!0:setTimeout(function(){d=!1},300)}),c.on({click:function(){$(this).hasClass("opened")?_($(this)):p($(this))}})},u=function(e){e>0&&!s.hasClass("site__header_hidden")&&!c.hasClass("opened")&&a&&!d&&s.addClass("site__header_hidden"),e<0&&s.hasClass("site__header_hidden")&&!c.hasClass("opened")&&a&&d&&s.removeClass("site__header_hidden")},_=function(e){n.css({overflowY:"auto"}),e.removeClass("opened"),s.removeClass("opened-menu")},v=function(){s[0].obj=o,h()},p=function(e){e.addClass("opened"),s.addClass("opened-menu"),n.css({overflowY:"hidden"})};v()},s=function(e){var o=this,s=e,i=s.find(".site__menu-link"),n=$("html"),t=$(window),a=$("html, body"),d=$(".site__header"),l=($(".popup__cookies-info"),function(){t.on({resize:function(){r()},scroll:function(){r()}}),i.on({click:function(){var e=$(this),o=e.attr("data-href"),s=$("."+o).offset().top-d.innerHeight();return i.removeClass("active"),e.addClass("active"),s=t.width()>=1024?$("."+o).offset().top-91:$("."+o).offset().top-64,a.stop(!0,!1),a.animate({scrollTop:s},300),n.css({overflowY:"auto"}),d.find(".site__menu-btn").removeClass("opened"),d.removeClass("opened-menu"),!1}})}),r=function(){for(var e=$(window).scrollTop(),o=$("body").find('[data-scroll="scroll"]'),s=(o.offset().top,0);s<o.length;s++){var n=$(o[s]),t=$(o[s]).offset().top-d.outerHeight(!0),a=$(o[s]).outerHeight(!0);if(e>t){var l=n.attr("class").split(" "),r=i.filter("[data-href="+l[0]+"]");i.removeClass("active"),r.addClass("active")}e>t+a&&i.removeClass("active")}},c=function(){s[0].obj=o,l(),r()};c()},i=function(e){var o=this,s=e,i=$(window),n=function(){i.on({scroll:function(){t()}})},t=function(){var e=i.scrollTop(),o=i.height(),n=s.offset().top,t=n-e,a=1-t/o;a>.5&&(s.hasClass("slides_active")||s.addClass("slides_active"))},a=function(){s[0].slides=o,n(),t()};a()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,l())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),c.on({click:function(){return l(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
