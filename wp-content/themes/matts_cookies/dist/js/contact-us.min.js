"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__header"),function(){new i($(this))}),$.each($(".site__menu-nav_anchors"),function(){new n($(this))}),$.each($(".slides"),function(){new t($(this))}),$.each($(".site__content-full"),function(){new s($(this))})});var e=function(e){var i=this,n=$(window),t=e,s=$("body"),o=function(){n.on({load:function(){d()}})},a=function(){s[0].preloader=i,o()},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$(".site").addClass("site__loaded")},500)};a()},i=function(e){var i=this,n=e,t=$(window),s=$("html"),o=n.find(".site__menu"),a=($(".site__content"),!1),d=!1,c=!0,h=0,l=n.find(".site__menu-btn"),r=0,f=function(){t.on({load:function(){r=t.width()},resize:function(){r!=t.width()&&(r=t.width()+1,t.width()>=1024&&(o.scrollTop(0),_(l)))},scroll:function(){a=t.scrollTop()>=2*n.innerHeight(),t.scrollTop()>=n.innerHeight()?c&&(c=!1,n.addClass("site__header_hide")):(c=!0,n.removeClass("site__header_hide")),a?n.hasClass("site__header_hide")&&setTimeout(function(){n.addClass("site__header_fixed"),n.removeClass("site__header_hide")},100):t.scrollTop()<=3*n.innerHeight()&&n.removeClass("site__header_fixed")},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;u(n)}n<0?d=!0:setTimeout(function(){d=!1},300)},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;u(n)}n<0?d=!0:setTimeout(function(){d=!1},300)}}),$(window).scroll(function(e){var i=$(this).scrollTop();if(i>h){u(1);var n=1}else{u(-1);var n=-1}h=i,n<0?d=!0:setTimeout(function(){d=!1},300)}),l.on({click:function(){$(this).hasClass("opened")?_($(this)):m($(this))}})},u=function(e){e>0&&!n.hasClass("site__header_hidden")&&!l.hasClass("opened")&&a&&!d&&n.addClass("site__header_hidden"),e<0&&n.hasClass("site__header_hidden")&&!l.hasClass("opened")&&a&&d&&n.removeClass("site__header_hidden")},_=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),n.removeClass("opened-menu")},v=function(){n[0].obj=i,f()},m=function(e){e.addClass("opened"),n.addClass("opened-menu"),s.css({overflowY:"hidden"})};v()},n=function(e){var i=this,n=e,t=n.find(".site__menu-link[data-href]"),s=$("html"),o=$(window),a=$("html, body"),d=$(".site__header"),c=($(".popup__cookies-info"),function(){o.on({resize:function(){},scroll:function(){}}),t.on({click:function(){var e=$(this),i=e.attr("data-href"),n=$("."+i).offset().top-d.innerHeight();return t.removeClass("active"),e.addClass("active"),n=o.width()>=1024?$("."+i).offset().top-91:$("."+i).offset().top-64,a.stop(!0,!1),a.animate({scrollTop:n},300),s.css({overflowY:"auto"}),d.find(".site__menu-btn").removeClass("opened"),d.removeClass("opened-menu"),!1}})}),h=function(){n[0].obj=i,c()};h()},t=function(e){var i=this,n=e,t=$(window),s=function(){t.on({scroll:function(){o()}})},o=function(){var e=t.scrollTop(),i=t.height(),s=n.offset().top,o=s-e,a=1-o/i;a>.5&&(n.hasClass("slides_active")||n.addClass("slides_active"))},a=function(){n[0].slides=i,s(),o()};a()},s=function(e){var i=this,n=e,t=$(window),s=$(".site__header"),o=0,a=function(){t.on({load:function(){o=t.width(),c()},resize:function(){o!=t.width()&&(o=t.width()+1,c())}})},d=function(){n[0].obj=i,a()},c=function(){var e=t.height();n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)}),n.find(".contact-us").length&&t.width()>=1024?n.css({"min-height":""}):n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()}}();
"use strict";!function(){$(function(){$.each($(".contact-us__map"),function(){new e($(this))})});var e=function(e){var t,n=e,o=(n.attr("id"),n.data("map-lat")),a=n.data("map-lng"),i=n.data("icon-path"),g=n.data("map-zoom"),l={lat:n.data("map-lat"),lng:n.data("map-lng")},r=$(window),c=function(){google.maps.event.addDomListener(window,"resize",function(){t.setCenter(l),r.width()>=1024?d(t.getCenter(),0,0):d(t.getCenter(),0,-50)})},m=function(){t=new google.maps.Map(document.getElementById("contact-google-map"),{zoom:g,scrollwheel:!1,center:{lat:o,lng:a}});var e={url:i,scaledSize:new google.maps.Size(98,91)};new google.maps.Marker({position:{lat:o,lng:a},map:t,icon:e});google.maps.event.addListenerOnce(t,"idle",function(){t.setCenter(l),r.width()>=1024?d(t.getCenter(),0,0):d(t.getCenter(),0,-50)})},d=function(e,n,o){var a=Math.pow(2,t.getZoom()),i=t.getProjection().fromLatLngToPoint(e),g=new google.maps.Point(n/a||0,o/a||0),l=new google.maps.Point(i.x-g.x,i.y+g.y),r=t.getProjection().fromPointToLatLng(l);t.setCenter(r)},s=function(){google.maps.event.addDomListener(window,"load",m),c()};s()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
