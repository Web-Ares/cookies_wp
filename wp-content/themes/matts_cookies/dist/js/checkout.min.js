"use strict";!function(){var e=!0;$(function(){new i($(".preloader")),$.each($(".site__header"),function(){new n($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new o($(this))}),$.each($(".site__content-full"),function(){new s($(this))}),$.each($(".site_index"),function(){new a($(this))})});var i=function(e){var i=this,n=$(window),t=e,o=$("body"),s=function(){n.on({load:function(){d()}})},a=function(){o[0].preloader=i,s(),$("html").css({"overflow-y":"hidden"})},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$("html").css({"overflow-y":"scroll"}),$(".site").addClass("site__loaded")},500)};a()},n=function(i){var n=this,t=i,o=$(window),s=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),l=!1,r=!0,c=0,h=t.find(".site__menu-btn"),f=0,u=function(){o.on({load:function(){f=o.width()},resize:function(){f!=o.width()&&(f=o.width()+1,o.width()>=1024&&(a.scrollTop(0),v(h)))},scroll:function(){d=o.scrollTop()>=2*t.innerHeight(),o.scrollTop()>=t.innerHeight()+20?r&&(r=!1,t.addClass("site__header_hide")):(r=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):o.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),o.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;_(n)}n<0?l=!0:setTimeout(function(){l=!1},300)},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;_(n)}n<0?l=!0:setTimeout(function(){l=!1},300)}}),$(window).scroll(function(e){var i=$(this).scrollTop();if(i>c){_(1);var n=1}else{_(-1);var n=-1}c=i,n<0?l=!0:setTimeout(function(){l=!1},300)}),h.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(i){i>0&&!t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&!l&&t.addClass("site__header_hidden"),i<0&&t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&l&&e&&t.removeClass("site__header_hidden")},v=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=n,u()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),s.css({overflowY:"hidden"})};m()},t=function(i){var n=this,t=i,o=t,s=$("html"),a=$(window),d=$("html, body"),l=$(".site__header"),r=($(".popup__cookies-info"),function(){a.on({resize:function(){c()},scroll:function(){c()}}),o.on({click:function(){var i=$(this),n=i.attr("data-href"),t=$("."+n).offset().top,o=l.innerHeight();return $(".site__menu-nav_anchors a").removeClass("active"),i.addClass("active"),d.stop(!0,!1),d.animate({scrollTop:t-o},{duration:500,progress:function(){e=!1,l.addClass("site__header_hidden"),o=l.innerHeight()},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),s.css({overflowY:"auto"}),l.find(".site__menu-btn").removeClass("opened"),l.removeClass("opened-menu"),!1}})}),c=function(){for(var e=a.scrollTop(),i=$("body").find('[data-scroll="scroll"]'),n=(i.offset().top,0);n<i.length;n++){var t=$(i[n]),s=$(i[n]).offset().top-l.outerHeight(!0),d=$(i[n]).outerHeight(!0);if(e>s-20){var r=t.attr("class").split(" "),c=o.filter("[data-href="+r[0]+"]");o.removeClass("active"),c.addClass("active")}e>s+d&&o.removeClass("active")}},h=function(){t[0].obj=n,r()};h()},o=function(e){var i=this,n=e,t=$(window),o=function(){t.on({load:function(){s()},scroll:function(){s()}})},s=function(){var e=t.scrollTop(),i=t.height(),o=n.offset().top,s=o-e,a=1-s/i;a>.5&&(n.hasClass("slides_active")||n.addClass("slides_active"))},a=function(){n[0].slides=i,o()};a()},s=function(e){var i=this,n=e,t=$(window),o=$(".site__header"),s=0,a=function(){t.on({load:function(){s=t.width(),l()},resize:function(){s!=t.width()&&(s=t.width()+1,l())}})},d=function(){n[0].obj=i,a()},l=function(){var e=t.height();n.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)}),n.find(".contact-us").length&&t.width()>=1024?n.css({"min-height":""}):n.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()},a=function(e){var i=this,n=e,t=$(window),o=($("html, body"),function(){t.on({load:function(){setTimeout(function(){s()},100)}})}),s=function(){var e=window.location.hash.replace("#","");if(e){var i=$("."+window.location.hash.replace("#",""));i.length&&window.scrollTo(0,parseInt(i.offset().top)),$(".slides").addClass("slides_active")}},a=function(){n[0].obj=i,o()};a()}}();
"use strict";!function(){var e=!0;$(function(){$.each($(".checkout"),function(){new t($(this))})});var t=function(t){var i=this,o=t,n=$("html, body"),c=$(".site__header"),s=o.find('.checkout__show-billing input[type="checkbox"]'),h=o.find(".checkout__info-billing"),u=function(){s.on({change:function(){0==s.prop("checked")?($("#ship-to-different-address-checkbox").prop("checked",!0),h.height(h.find(">.checkout__info").outerHeight(!0)),h.addClass("visible"),n.stop(!0,!1),n.animate({scrollTop:h.offset().top-$(".checkout__title").outerHeight(!0)-c.innerHeight()},{duration:500,progress:function(){e=!1,c.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}})):($("#ship-to-different-address-checkbox").prop("checked",!1),h.height(0),h.removeClass("visible"),n.stop(!0,!1),n.animate({scrollTop:o.offset().top-$(".checkout__title").outerHeight(!0)-c.innerHeight()},{duration:500,progress:function(){e=!1,c.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),h.find("[data-required]").each(function(){var e=$(this);e.removeClass("not-touched"),e.removeClass("not-valid")}))}})},d=function(){o[0].obj=i,u()};d()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),p=$('<span class="websters-select__item"></span>'),d=$('<div class="websters-select"></div>'),r=$(window),f=($("body"),!1),u=function(){var e="";o.css({opacity:0}),o.wrap(d),d=o.parent(),d.append('<div class="websters-select__arrow"></div>'),o.before(p),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),p.text(e)},h=function(){f=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),d.removeClass("websters-select_opened")},v=function(){o[0].obj=i,u(),w(),b()},b=function(){o.on("change",function(){p.text($(this).find("option:selected").text())}),1!=s||l||(d.on({click:function(e){e.stopPropagation(),f?h():y()}}),r.on({click:function(){f&&h()}}))},w=function(){!s||l?_():1==s&&g()},g=function(){d.addClass("websters-select_custom")},_=function(){d.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),d.offset(),0),l=o.find("option:selected").index(),p=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),f&&t.remove(),f=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+p+'"></div>'),o.find("option").each(function(e){var t=$(this);e==l?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),d.append(t),d.addClass("websters-select_opened"),s=t.outerHeight(),s>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),h()}})};i.checkOpened=function(){return f},i.close=function(){h()},v()}}();
"use strict";!function(){window.requestAnimFrame=function(){return window.requestAnimationFrame||function(n,e){window.setTimeout(n,1e3/60)}}(),$(function(){$.each($(".checkout"),function(){new n($(this))})});var n=function(n){var e=this,i=n,t=i.find("[data-required]"),s=$(window),o=i.find(".checkout__back"),a=i.find(".checkout__proceed-payment"),c=i.find(".checkout__proceed .btn"),d=function(){l(),i[0].obj=e},u=function(){t.each(function(){var n=$(this);n.parents(".checkout__info-billing").length?n.parents(".checkout__info-billing").hasClass("visible")&&""===n.val()&&(n.addClass("not-touched"),_(n)):""===n.val()&&(n.addClass("not-touched"),_(n))})},l=function(){s.on({load:function(){$("body").trigger("update_checkout")}}),t.on({focus:function(){$(this).removeClass("not-touched")},keyup:function(){var n=$(this);n.parents(".checkout__info-billing").length?n.parents(".checkout__info-billing").hasClass("visible")&&_($(this)):_($(this))}}),c.on({click:function(){return u(),t.hasClass("not-touched")||t.hasClass("not-valid")?(i.find(".not-touched:first").focus(),i.find(".not-valid:first").focus()):($(".checkout__form").addClass("hidden"),$(".my-cart__review").addClass("visible"),$("body").trigger("update_checkout"),v()),!1}}),o.on({click:function(){return $(".checkout__form").removeClass("hidden"),$(".my-cart__review").removeClass("visible"),!1}})},r=function(n){n.addClass("not-valid"),n.removeClass("valid")},h=function(n){n.removeClass("not-valid"),n.addClass("valid")},f=function(n){var e=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return e.test(n)},v=function(){requestAnimationFrame(v),m()},m=function(){i.find(".shipping_method-success").length?($("#payment").addClass("visible"),o.addClass("hidden"),a.addClass("visible")):($("#payment").removeClass("visible"),o.removeClass("hidden"),a.removeClass("visible"))},_=function(n){var e=n.attr("type");return("email"!==e&&"text"!==e||""!==n.val())&&("email"!==e||f(n.val()))?void h(n):(r(n),!1)};e.checkValid=function(){var n=!0;return t.each(function(){$(this).removeClass("not-touched"),$(this).hasClass("not-valid")&&(n=!1)}),n},d()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
