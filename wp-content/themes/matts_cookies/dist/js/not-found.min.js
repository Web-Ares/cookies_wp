"use strict";!function(){var e=!0;$(function(){new i($(".preloader")),$.each($(".site__header"),function(){new n($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new s($(this))}),$.each($(".site__content-full"),function(){new o($(this))})});var i=function(e){var i=this,n=$(window),t=e,s=$("body"),o=function(){n.on({load:function(){d()}})},a=function(){s[0].preloader=i,o()},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$(".site").addClass("site__loaded")},500)};a()},n=function(i){var n=this,t=i,s=$(window),o=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),r=!1,c=!0,h=0,l=t.find(".site__menu-btn"),u=0,f=function(){s.on({load:function(){u=s.width()},resize:function(){u!=s.width()&&(u=s.width()+1,s.width()>=1024&&(a.scrollTop(0),v(l)))},scroll:function(){d=s.scrollTop()>=2*t.innerHeight(),s.scrollTop()>=t.innerHeight()+20?c&&(c=!1,t.addClass("site__header_hide")):(c=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):s.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),s.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;_(n)}n<0?r=!0:setTimeout(function(){r=!1},300)},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;_(n)}n<0?r=!0:setTimeout(function(){r=!1},300)}}),$(window).scroll(function(e){var i=$(this).scrollTop();if(i>h){_(1);var n=1}else{_(-1);var n=-1}h=i,n<0?r=!0:setTimeout(function(){r=!1},300)}),l.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(i){i>0&&!t.hasClass("site__header_hidden")&&!l.hasClass("opened")&&d&&!r&&t.addClass("site__header_hidden"),i<0&&t.hasClass("site__header_hidden")&&!l.hasClass("opened")&&d&&r&&e&&t.removeClass("site__header_hidden")},v=function(e){o.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=n,f()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),o.css({overflowY:"hidden"})};m()},t=function(i){var n=this,t=i,s=t,o=$("html"),a=$(window),d=$("html, body"),r=$(".site__header"),c=($(".popup__cookies-info"),function(){a.on({resize:function(){},scroll:function(){}}),s.on({click:function(){var i=$(this),n=i.attr("data-href"),t=$("."+n).offset().top-r.innerHeight();return s.removeClass("active"),i.addClass("active"),t=$("."+n).offset().top,d.stop(!0,!1),d.animate({scrollTop:t},{duration:500,progress:function(){e=!1,r.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),o.css({overflowY:"auto"}),r.find(".site__menu-btn").removeClass("opened"),r.removeClass("opened-menu"),!1}})}),h=function(){t[0].obj=n,c()};h()},s=function(e){var i=this,n=e,t=$(window),s=function(){t.on({scroll:function(){o()}})},o=function(){var e=t.scrollTop(),i=t.height(),s=n.offset().top,o=s-e,a=1-o/i;a>.5&&(n.hasClass("slides_active")||n.addClass("slides_active"))},a=function(){n[0].slides=i,s(),o()};a()},o=function(e){var i=this,n=e,t=$(window),s=$(".site__header"),o=0,a=function(){t.on({load:function(){o=t.width(),r()},resize:function(){o!=t.width()&&(o=t.width()+1,r())}})},d=function(){n[0].obj=i,a()},r=function(){var e=t.height();n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)}),n.find(".contact-us").length&&t.width()>=1024?n.css({"min-height":""}):n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
