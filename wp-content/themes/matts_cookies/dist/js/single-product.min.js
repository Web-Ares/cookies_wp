"use strict";!function(){var e=!0;$(function(){new i($(".preloader")),$.each($(".site__header"),function(){new n($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new s($(this))}),$.each($(".site__content-full"),function(){new o($(this))})});var i=function(e){var i=this,n=$(window),t=e,s=$("body"),o=function(){n.on({load:function(){d()}})},a=function(){s[0].preloader=i,o()},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$(".site").addClass("site__loaded")},500)};a()},n=function(i){var n=this,t=i,s=$(window),o=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),r=!1,c=!0,h=0,l=t.find(".site__menu-btn"),u=0,f=function(){s.on({load:function(){u=s.width()},resize:function(){u!=s.width()&&(u=s.width()+1,s.width()>=1024&&(a.scrollTop(0),v(l)))},scroll:function(){d=s.scrollTop()>=2*t.innerHeight(),s.scrollTop()>=t.innerHeight()+20?c&&(c=!1,t.addClass("site__header_hide")):(c=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):s.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),s.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;_(n)}n<0?r=!0:setTimeout(function(){r=!1},300)},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;_(n)}n<0?r=!0:setTimeout(function(){r=!1},300)}}),$(window).scroll(function(e){var i=$(this).scrollTop();if(i>h){_(1);var n=1}else{_(-1);var n=-1}h=i,n<0?r=!0:setTimeout(function(){r=!1},300)}),l.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(i){i>0&&!t.hasClass("site__header_hidden")&&!l.hasClass("opened")&&d&&!r&&t.addClass("site__header_hidden"),i<0&&t.hasClass("site__header_hidden")&&!l.hasClass("opened")&&d&&r&&e&&t.removeClass("site__header_hidden")},v=function(e){o.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=n,f()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),o.css({overflowY:"hidden"})};m()},t=function(i){var n=this,t=i,s=t,o=$("html"),a=$(window),d=$("html, body"),r=$(".site__header"),c=($(".popup__cookies-info"),function(){a.on({resize:function(){},scroll:function(){}}),s.on({click:function(){var i=$(this),n=i.attr("data-href"),t=$("."+n).offset().top-r.innerHeight();return s.removeClass("active"),i.addClass("active"),t=$("."+n).offset().top,d.stop(!0,!1),d.animate({scrollTop:t},{duration:500,progress:function(){e=!1,r.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),o.css({overflowY:"auto"}),r.find(".site__menu-btn").removeClass("opened"),r.removeClass("opened-menu"),!1}})}),h=function(){t[0].obj=n,c()};h()},s=function(e){var i=this,n=e,t=$(window),s=function(){t.on({scroll:function(){o()}})},o=function(){var e=t.scrollTop(),i=t.height(),s=n.offset().top,o=s-e,a=1-o/i;a>.5&&(n.hasClass("slides_active")||n.addClass("slides_active"))},a=function(){n[0].slides=i,s(),o()};a()},o=function(e){var i=this,n=e,t=$(window),s=$(".site__header"),o=0,a=function(){t.on({load:function(){o=t.width(),r()},resize:function(){o!=t.width()&&(o=t.width()+1,r())}})},d=function(){n[0].obj=i,a()},r=function(){var e=t.height();n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)}),n.find(".contact-us").length&&t.width()>=1024?n.css({"min-height":""}):n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()}}();
"use strict";!function(){$(function(){$.each($(".product-single__gallery"),function(){new s($(this))})});var s=function(s){var o=s.find(".gallery__top"),l=s.find(".gallery__thumbs"),e=function(){o.slick({slidesToShow:1,slidesToScroll:1,arrows:!1,fade:!0,asNavFor:".gallery__thumbs",responsive:[{breakpoint:768,settings:{fade:!1}}]}),l.slick({slidesToShow:2,slidesToScroll:1,asNavFor:".gallery__top",dots:!1,arrows:!1,focusOnSelect:!0})},i=function(){e()};i()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},l=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},r=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"scroll"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,r())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return r(),!1}}),c.on({click:function(){return r(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:l()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
"use strict";!function(){$(function(){$.each($(".count-product"),function(){new n($(this))})});var n=function(n){var t=this,c=n,i=c.find(".count-product__input"),u=c.find(".count-product_add"),o=c.find(".count-product_del"),e=function(){i.on({keypress:function(){46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57)||event.preventDefault()}}),i.on({keyup:function(){""==i.val()&&i.val(1)}}),u.on({click:function(){return f(),!1}}),o.on({click:function(){return r(),!1}})},f=function(){var n=parseInt(i.val());i.val(n+1)},r=function(){var n=parseInt(i.val());1!=n&&i.val(n-1)},a=function(){c[0].obj=t,e()};a()}}();
"use strict";!function(){$(function(){$.each($(".my-cart__product"),function(){new t($(this))}),$.each($(".product-single__info"),function(){new n($(this))})});var t=function(t){var n=this,i=t,e=i.find(".count-product__input"),o=i.find(".count-product__btn"),a=i.find(".my-cart__remove"),c=new XMLHttpRequest,r=$(".cart"),d=$(".my-cart__total"),s=$(window),u=function(){s.on({load:function(){p()},resize:function(){p()}}),e.on({keypress:function(){(46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57))&&_($(this).parents(".my-cart__product"))}}),o.on({click:function(){_($(this).parents(".my-cart__product"))}}),a.on({click:function(){return l($(this).parents(".my-cart__product")),!1}})},f=function(t){t.addClass("hidden"),setTimeout(function(){t.remove()},500)},l=function(t){c.abort(),c=$.ajax({url:$("body").attr("data-action"),data:{id:t.attr("data-id"),flag:"remove"},dataType:"json",type:"get",success:function(n){f(t),0==parseInt(n.cartCountProducts)?(r.find("div").remove(),r.removeClass("cart_fill"),$(".site__header").removeClass("site__header_fill-cart")):r.find("div").html(n.cartCountProducts),d.find("span").html(n.subtotal)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},_=function(t){c.abort(),c=$.ajax({url:$("body").attr("data-action"),data:{id:t.attr("data-id"),countProduct:t.find(".count-product__input").val(),flag:"changeCount"},dataType:"json",type:"get",success:function(n){t.find(".my-cart__total-price").html(n.total),d.find("span").html(n.subtotal)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},p=function(){i.each(function(){var t=$(this),n=t.find(">div");t.height(n.outerHeight(!0))})},h=function(){i[0].obj=n,u()};h()},n=function(t){var n=this,i=t,e=i.find(".count-product__input"),o=i.find(".product-single__price"),a=i.find(".product-single__add"),c=new XMLHttpRequest,r=$(".cart"),d=($(window),function(){a.on({click:function(t){return a.hasClass("adding")||(s(t),u(t,$(this).parents(".product-single__info")),a.addClass("adding")),!1}})}),s=function(t){var n=$(".gallery__top .slick-current").data("image"),i=t||window.event;i.pageX,i.pageY;console.log(n),$("body").append('<div class="site__product hidden" style="background-image: '+n+'"></div>'),$(".site__product").css({top:$(".gallery__top").offset().top+$(".gallery__top").innerHeight()/2-$(".site__product").height()/2,left:$(".gallery__top").offset().left+$(".gallery__top").innerWidth()/2-$(".site__product").width()/2}),setTimeout(function(){$(".site__product").addClass("visible"),$(".site__product").css({top:r.offset().top+r.innerHeight()/2-$(".site__product").height()/2,left:r.offset().left+r.innerWidth()/2-$(".site__product").width()/2})},100),setTimeout(function(){$(".site__product").removeClass("visible")},500),setTimeout(function(){$(".site__product").remove(),a.removeClass("adding")},700)},u=function(t){c.abort(),c=$.ajax({url:$("body").attr("data-action"),data:{id:t.attr("data-id"),countProduct:e.val(),price:o.text(),flag:"addToCart"},dataType:"json",type:"get",success:function(t){r.hasClass("cart_fill")?setTimeout(function(){r.find("div").html(t.cartCountProducts)},700):setTimeout(function(){r.append("<div></div>"),r.addClass("cart_fill"),$(".site__header").addClass("site__header_fill-cart"),setTimeout(function(){r.find("div").html(t.cartCountProducts)},100)},600)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},f=function(){i[0].obj=n,d()};f()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
