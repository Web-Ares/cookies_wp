"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__header"),function(){new o($(this))}),$.each($(".site__menu-nav_anchors"),function(){new s($(this))}),$.each($(".slides"),function(){new i($(this))})});var e=function(e){var o=this,s=$(window),i=e,n=$("body"),t=function(){s.on({load:function(){d()}})},a=function(){n[0].preloader=o,t()},d=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},o=function(e){var o=this,s=e,i=$(window),n=$("html"),t=s.find(".site__menu"),a=($(".site__content"),!1),d=!1,l=!0,r=0,c=s.find(".site__menu-btn"),f=0,h=function(){i.on({load:function(){f=i.width()},resize:function(){f!=i.width()&&(f=i.width()+1,i.width()>=1024&&(t.scrollTop(0),_(c)))},scroll:function(){a=i.scrollTop()>=2*s.innerHeight(),i.scrollTop()>=s.innerHeight()?l&&(l=!1,s.addClass("site__header_hide")):(l=!0,s.removeClass("site__header_hide")),a?s.hasClass("site__header_hide")&&setTimeout(function(){s.addClass("site__header_fixed"),s.removeClass("site__header_hide")},100):i.scrollTop()<=3*s.innerHeight()&&s.removeClass("site__header_fixed")},DOMMouseScroll:function(e){var o=e.originalEvent.detail;if(o){var s=o>0?1:-1;u(s)}s<0?d=!0:setTimeout(function(){d=!1},300)},mousewheel:function(e){var o=e.originalEvent.wheelDelta;if(o){var s=o>0?-1:1;u(s)}s<0?d=!0:setTimeout(function(){d=!1},300)}}),$(window).scroll(function(e){var o=$(this).scrollTop();if(o>r){u(1);var s=1}else{u(-1);var s=-1}r=o,s<0?d=!0:setTimeout(function(){d=!1},300)}),c.on({click:function(){$(this).hasClass("opened")?_($(this)):p($(this))}})},u=function(e){e>0&&!s.hasClass("site__header_hidden")&&!c.hasClass("opened")&&a&&!d&&s.addClass("site__header_hidden"),e<0&&s.hasClass("site__header_hidden")&&!c.hasClass("opened")&&a&&d&&s.removeClass("site__header_hidden")},_=function(e){n.css({overflowY:"auto"}),e.removeClass("opened"),s.removeClass("opened-menu")},v=function(){s[0].obj=o,h()},p=function(e){e.addClass("opened"),s.addClass("opened-menu"),n.css({overflowY:"hidden"})};v()},s=function(e){var o=this,s=e,i=s.find(".site__menu-link"),n=$("html"),t=$(window),a=$("html, body"),d=$(".site__header"),l=($(".popup__cookies-info"),function(){t.on({resize:function(){r()},scroll:function(){r()}}),i.on({click:function(){var e=$(this),o=e.attr("data-href"),s=$("."+o).offset().top-d.innerHeight();return i.removeClass("active"),e.addClass("active"),s=t.width()>=1024?$("."+o).offset().top-91:$("."+o).offset().top-64,a.stop(!0,!1),a.animate({scrollTop:s},300),n.css({overflowY:"auto"}),d.find(".site__menu-btn").removeClass("opened"),d.removeClass("opened-menu"),!1}})}),r=function(){for(var e=$(window).scrollTop(),o=$("body").find('[data-scroll="scroll"]'),s=(o.offset().top,0);s<o.length;s++){var n=$(o[s]),t=$(o[s]).offset().top-d.outerHeight(!0),a=$(o[s]).outerHeight(!0);if(e>t){var l=n.attr("class").split(" "),r=i.filter("[data-href="+l[0]+"]");i.removeClass("active"),r.addClass("active")}e>t+a&&i.removeClass("active")}},c=function(){s[0].obj=o,l(),r()};c()},i=function(e){var o=this,s=e,i=$(window),n=function(){i.on({scroll:function(){t()}})},t=function(){var e=i.scrollTop(),o=i.height(),n=s.offset().top,t=n-e,a=1-t/o;a>.5&&(s.hasClass("slides_active")||s.addClass("slides_active"))},a=function(){s[0].slides=o,n(),t()};a()}}();
"use strict";!function(){$(function(){$.each($(".product-single__gallery"),function(){new e($(this))})});var e=function(e){var s=e.find(".gallery__top"),i=e.find(".gallery__thumbs"),l=function(){var e=new Swiper(s,{spaceBetween:10,breakpoints:{1024:{effect:"fade",fade:{crossFade:!1}}},onSlideChangeStart:function(e){var s=e.activeIndex;$(l.slides).removeClass("is-selected"),$(l.slides).eq(s).addClass("is-selected"),l.slideTo(s,300,!0)}}),l=new Swiper(i,{touchRatio:.2,slidesPerView:2,slideToClickedSlide:!0,onClick:function(s,i){var l=s.clickedIndex;s.activeIndex=l,s.updateClasses(),$(s.slides).removeClass("is-selected"),$(s.clickedSlide).addClass("is-selected"),e.slideTo(l,300,!1)}});e.params.control=l,l.params.control=e},n=function(){l()};n()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,l())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),c.on({click:function(){return l(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
"use strict";!function(){$(function(){$.each($(".count-product"),function(){new n($(this))})});var n=function(n){var t=this,c=n,i=c.find(".count-product__input"),u=c.find(".count-product_add"),o=c.find(".count-product_del"),e=function(){i.on({keypress:function(){46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57)||event.preventDefault()}}),i.on({keyup:function(){""==i.val()&&i.val(1)}}),u.on({click:function(){return f(),!1}}),o.on({click:function(){return r(),!1}})},f=function(){var n=parseInt(i.val());i.val(n+1)},r=function(){var n=parseInt(i.val());1!=n&&i.val(n-1)},a=function(){c[0].obj=t,e()};a()}}();
"use strict";!function(){$(function(){$.each($(".my-cart__product"),function(){new t($(this))}),$.each($(".product-single__info"),function(){new e($(this))})});var t=function(t){var e=this,n=t,i=n.find(".count-product__input"),o=n.find(".count-product__btn"),a=n.find(".my-cart__remove"),s=new XMLHttpRequest,d=$(".cart"),r=$(".my-cart__total"),c=$(window),u=function(){c.on({load:function(){p()},resize:function(){p()}}),i.on({keypress:function(){(46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57))&&_($(this).parents(".my-cart__product"))}}),o.on({click:function(){_($(this).parents(".my-cart__product"))}}),a.on({click:function(){return l($(this).parents(".my-cart__product")),!1}})},f=function(t){t.addClass("hidden"),setTimeout(function(){t.remove()},500)},l=function(t){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{id:t.attr("data-id"),flag:"remove"},dataType:"json",type:"get",success:function(e){f(t),0==parseInt(e.cartCountProducts)?(d.find("div").remove(),d.removeClass("cart_fill"),$(".site__header").removeClass("site__header_fill-cart")):d.find("div").html(e.cartCountProducts),r.find("span").html(e.subtotal)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},_=function(t){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{id:t.attr("data-id"),countProduct:t.find(".count-product__input").val(),flag:"changeCount"},dataType:"json",type:"get",success:function(e){t.find(".my-cart__total-price").html(e.total),r.find("span").html(e.subtotal)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},p=function(){n.each(function(){var t=$(this),e=t.find(">div");t.height(e.outerHeight(!0))})},h=function(){n[0].obj=e,u()};h()},e=function(t){var e=this,n=t,i=n.find(".count-product__input"),o=n.find(".product-single__price"),a=n.find(".product-single__add"),s=new XMLHttpRequest,d=$(".cart"),r=($(window),function(){a.on({click:function(t){return a.hasClass("adding")||(f(t,$(this).parents(".product-single__info")),a.addClass("adding")),!1}})}),c=function(t,e){var n=e.data("image"),i=t||window.event;i.pageX,i.pageY;$("body").append('<div class="site__product hidden"><img src="'+n+'" alt=""></div>'),$(".site__product").css({top:$(".gallery__top").offset().top+$(".gallery__top").innerHeight()/2-$(".site__product").height()/2,left:$(".gallery__top").offset().left+$(".gallery__top").innerWidth()/2-$(".site__product").width()/2}),setTimeout(function(){$(".site__product").addClass("visible"),$(".site__product").css({top:d.offset().top+d.innerHeight()/2-$(".site__product").height()/2,left:d.offset().left+d.innerWidth()/2-$(".site__product").width()/2})},100),setTimeout(function(){$(".site__product").removeClass("visible")},500),setTimeout(function(){$(".site__product").remove(),a.removeClass("adding")},700)},u=function(){var t="";t=1==parseInt(i.val())?" item":" items",$(".product-single").append('<div class="product-single__info-message hidden">'+i.val()+t+" added to cart</div>"),$(".product-single__info-message ").css({top:a.offset().top+a.innerHeight()+10,left:a.offset().left}),setTimeout(function(){$(".product-single__info-message").addClass("visible")},200),setTimeout(function(){$(".product-single__info-message").remove(),a.removeClass("adding")},3e3)},f=function(t,e){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{id:e.attr("data-id"),countProduct:i.val(),price:o.text(),flag:"addToCart"},dataType:"json",type:"get",success:function(n){parseInt(n.cartCountProducts)!=parseInt(d.find("div").text())?d.hasClass("cart_fill")||(c(t,e),setTimeout(function(){d.append("<div></div>"),d.addClass("cart_fill"),$(".site__header").addClass("site__header_fill-cart"),setTimeout(function(){d.find("div").html(n.cartCountProducts)},100)},600)):u()},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},l=function(){n[0].obj=e,r()};l()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
