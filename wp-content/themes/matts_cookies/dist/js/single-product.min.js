"use strict";!function(){var e=!0;$(function(){new n($(".preloader")),$.each($(".site__header"),function(){new i($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new o($(this))}),$.each($(".site__content-full"),function(){new s($(this))}),$.each($(".site_index"),function(){new a($(this))})});var n=function(e){var n=this,i=$(window),t=e,o=$("body"),s=function(){i.on({load:function(){d()}})},a=function(){o[0].preloader=n,s()},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$(".site").addClass("site__loaded")},500)};a()},i=function(n){var i=this,t=n,o=$(window),s=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),c=!1,l=!0,r=0,h=t.find(".site__menu-btn"),f=0,u=function(){o.on({load:function(){f=o.width()},resize:function(){f!=o.width()&&(f=o.width()+1,o.width()>=1024&&(a.scrollTop(0),v(h)))},scroll:function(){d=o.scrollTop()>=2*t.innerHeight(),o.scrollTop()>=t.innerHeight()+20?l&&(l=!1,t.addClass("site__header_hide")):(l=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):o.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),o.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;_(i)}i<0?c=!0:setTimeout(function(){c=!1},300)},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;_(i)}i<0?c=!0:setTimeout(function(){c=!1},300)}}),$(window).scroll(function(e){var n=$(this).scrollTop();if(n>r){_(1);var i=1}else{_(-1);var i=-1}r=n,i<0?c=!0:setTimeout(function(){c=!1},300)}),h.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(n){n>0&&!t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&!c&&t.addClass("site__header_hidden"),n<0&&t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&c&&e&&t.removeClass("site__header_hidden")},v=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=i,u()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),s.css({overflowY:"hidden"})};m()},t=function(n){var i=this,t=n,o=t,s=$("html"),a=$(window),d=$("html, body"),c=$(".site__header"),l=($(".popup__cookies-info"),function(){a.on({resize:function(){},scroll:function(){}}),o.on({click:function(){var n=$(this),i=n.attr("data-href"),t=$("."+i).offset().top-c.innerHeight();return o.removeClass("active"),n.addClass("active"),t=$("."+i).offset().top,d.stop(!0,!1),d.animate({scrollTop:t},{duration:500,progress:function(){e=!1,c.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),s.css({overflowY:"auto"}),c.find(".site__menu-btn").removeClass("opened"),c.removeClass("opened-menu"),!1}})}),r=function(){t[0].obj=i,l()};r()},o=function(e){var n=this,i=e,t=$(window),o=function(){t.on({load:function(){s()},scroll:function(){s()}})},s=function(){var e=t.scrollTop(),n=t.height(),o=i.offset().top,s=o-e,a=1-s/n;a>.5&&(i.hasClass("slides_active")||i.addClass("slides_active"))},a=function(){i[0].slides=n,o()};a()},s=function(e){var n=this,i=e,t=$(window),o=$(".site__header"),s=0,a=function(){t.on({load:function(){s=t.width(),c()},resize:function(){s!=t.width()&&(s=t.width()+1,c())}})},d=function(){i[0].obj=n,a()},c=function(){var e=t.height();i.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)}),i.find(".contact-us").length&&t.width()>=1024?i.css({"min-height":""}):i.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()},a=function(e){var n=this,i=e,t=$(window),o=($("html, body"),function(){t.on({load:function(){setTimeout(function(){s()},100)}})}),s=function(){var e=window.location.hash.replace("#","");if(e){var n=$("."+window.location.hash.replace("#",""));n.length&&window.scrollTo(0,parseInt(n.offset().top))}},a=function(){i[0].obj=n,o()};a()}}();
"use strict";!function(){$(function(){$.each($(".product-single__gallery"),function(){new s($(this))})});var s=function(s){var o=s.find(".gallery__top"),l=s.find(".gallery__thumbs"),e=function(){o.slick({slidesToShow:1,slidesToScroll:1,arrows:!1,fade:!0,asNavFor:".gallery__thumbs",responsive:[{breakpoint:768,settings:{fade:!1}}]}),l.slick({slidesToShow:2,slidesToScroll:1,asNavFor:".gallery__top",dots:!1,arrows:!1,focusOnSelect:!0})},i=function(){e()};i()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},l=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},r=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"scroll"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,r())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return r(),!1}}),c.on({click:function(){return r(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:l()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
"use strict";!function(){$(function(){$.each($(".count-product"),function(){new n($(this))})});var n=function(n){var t=this,c=n,i=c.find(".count-product__input"),u=c.find(".count-product_add"),o=c.find(".count-product_del"),e=function(){i.on({keypress:function(){46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57)||event.preventDefault()}}),i.on({keyup:function(){""==i.val()&&i.val(1)}}),u.on({click:function(){return f(),!1}}),o.on({click:function(){return r(),!1}})},f=function(){var n=parseInt(i.val());i.val(n+1)},r=function(){var n=parseInt(i.val());1!=n&&i.val(n-1)},a=function(){c[0].obj=t,e()};a()}}();
"use strict";!function(){$(function(){$.each($(".my-cart__product"),function(){new t($(this))}),$.each($(".product-single__info"),function(){new n($(this))}),$.each($(".my-cart__promo-code"),function(){new o($(this))})});var t=function(t){var n=this,o=t,e=o.find(".count-product__input"),i=o.find(".count-product__btn"),a=o.find(".my-cart__remove"),c=new XMLHttpRequest,r=$(".cart"),d=$(".my-cart__total"),s=$(window),u=function(){s.on({load:function(){p()},resize:function(){p()}}),e.on({keypress:function(){(46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57))&&_($(this).parents(".my-cart__product"))}}),i.on({click:function(){_($(this).parents(".my-cart__product"))}}),a.on({click:function(){return l($(this).parents(".my-cart__product")),!1}})},f=function(t){t.addClass("hidden"),setTimeout(function(){t.remove()},500)},l=function(t){c.abort(),c=$.ajax({url:$("body").attr("data-action"),data:{action:"remove_cart_item",id:t.attr("data-product-key"),flag:"remove"},dataType:"json",type:"get",success:function(n){f(t),0==parseInt(n.cartCountProducts)?(r.find("div").remove(),r.removeClass("cart_fill"),$(".site__header").removeClass("site__header_fill-cart")):r.find("div").html(n.cartCountProducts),d.find("span").html(n.subtotal)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},_=function(t){c.abort(),c=$.ajax({url:$("body").attr("data-action"),data:{action:"cart_quantity_changes",id:t.attr("data-product-id"),key:t.attr("data-product-key"),countProduct:t.find(".count-product__input").val(),flag:"changeCount"},dataType:"json",type:"get",success:function(n){t.find(".my-cart__total-price").html(n.total),d.find("span").html(n.subtotal)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},p=function(){o.each(function(){var t=$(this),n=t.find(">div");t.height(n.outerHeight(!0))})},h=function(){o[0].obj=n,u()};h()},n=function(t){var n=this,o=t,e=o.find(".count-product__input"),i=o.find(".product-single__price"),a=o.find(".product-single__add"),c=new XMLHttpRequest,r=$(".cart"),d=0,s=0,u=($(window),function(){a.on({click:function(t){return a.hasClass("adding")||(f(t),_($(this).parents(".product-single__info")),a.addClass("adding")),!1}})}),f=function(t){var n=$(".gallery__top .slick-current").data("image"),o=t||window.event;o.pageX,o.pageY;$("body").append('<div class="site__product hidden" style="background-image:url('+n+')"></div>'),$(".site__product").css({top:$(".gallery__top").offset().top,left:$(".gallery__top").offset().left,width:$(".gallery__top").width(),height:$(".gallery__top").height()}),setTimeout(function(){$(".site__product").addClass("visible"),$(".site__product").css({top:r.offset().top+r.innerHeight()/2-$(".site__product").height()/2,left:r.offset().left+r.innerWidth()/2-$(".site__product").width()/2})},100),setTimeout(function(){$(".site__product").removeClass("visible"),$(".site__product").css({"-webkit-transform":"scale(0.2)",transform:"scale(0.2)"})},500),setTimeout(function(){$(".site__product").remove(),a.removeClass("adding")},700),l()},l=function(){r.hasClass("cart_fill")?(d=parseInt(r.find("div").text()),s=parseInt(e.val())+d,setTimeout(function(){r.find("div").html(s+" items")},700)):(s=parseInt(e.val()),setTimeout(function(){r.append("<div></div>"),r.addClass("cart_fill"),$(".site__header").addClass("site__header_fill-cart"),setTimeout(function(){1==s?r.find("div").html(s+" item"):r.find("div").html(s+" items")},100)},600))},_=function(t){c.abort(),c=$.ajax({url:$("body").attr("data-action"),data:{action:"single_add_product",id:t.attr("data-id"),countProduct:e.val(),price:i.text(),flag:"addToCart"},dataType:"json",type:"get",success:function(t){parseInt(t.cartCountProducts)!=s&&r.find("div").html(t.cartCountProducts)},error:function(t,n){"abort"!=t.statusText&&parseInt(n.cartCountProducts)!=s&&r.find("div").html(d+"items")}})},p=function(){o[0].obj=n,u()};p()},o=function(t){var n=this,o=t,e=t.find("button"),i=new XMLHttpRequest,a=function(){e.on({click:function(t){return o.find("#promo-code").val()?c(o):console.log("empty code"),!1}})},c=function(t){i.abort(),i=$.ajax({url:$("body").attr("data-action"),data:{action:"apply_coupon_to_order",coupon_name:t.find("#promo-code").val()},dataType:"json",type:"get",success:function(t){console.log(t)},error:function(t,n){"abort"!=t.statusText&&console.log("error")}})},r=function(){o[0].obj=n,a()};r()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
