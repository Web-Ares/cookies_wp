"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__header"),function(){new i($(this))}),$.each($(".site__menu-nav_anchors"),function(){new n($(this))}),$.each($(".slides"),function(){new t($(this))}),$.each($(".site__content-full"),function(){new s($(this))})});var e=function(e){var i=this,n=$(window),t=e,s=$("body"),o=function(){n.on({load:function(){d()}})},a=function(){s[0].preloader=i,o()},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$(".site").addClass("site__loaded")},500)};a()},i=function(e){var i=this,n=e,t=$(window),s=$("html"),o=n.find(".site__menu"),a=($(".site__content"),!1),d=!1,c=!0,h=0,l=n.find(".site__menu-btn"),r=0,f=function(){t.on({load:function(){r=t.width()},resize:function(){r!=t.width()&&(r=t.width()+1,t.width()>=1024&&(o.scrollTop(0),_(l)))},scroll:function(){a=t.scrollTop()>=2*n.innerHeight(),t.scrollTop()>=n.innerHeight()?c&&(c=!1,n.addClass("site__header_hide")):(c=!0,n.removeClass("site__header_hide")),a?n.hasClass("site__header_hide")&&setTimeout(function(){n.addClass("site__header_fixed"),n.removeClass("site__header_hide")},100):t.scrollTop()<=3*n.innerHeight()&&n.removeClass("site__header_fixed")},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;u(n)}n<0?d=!0:setTimeout(function(){d=!1},300)},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;u(n)}n<0?d=!0:setTimeout(function(){d=!1},300)}}),$(window).scroll(function(e){var i=$(this).scrollTop();if(i>h){u(1);var n=1}else{u(-1);var n=-1}h=i,n<0?d=!0:setTimeout(function(){d=!1},300)}),l.on({click:function(){$(this).hasClass("opened")?_($(this)):m($(this))}})},u=function(e){e>0&&!n.hasClass("site__header_hidden")&&!l.hasClass("opened")&&a&&!d&&n.addClass("site__header_hidden"),e<0&&n.hasClass("site__header_hidden")&&!l.hasClass("opened")&&a&&d&&n.removeClass("site__header_hidden")},_=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),n.removeClass("opened-menu")},v=function(){n[0].obj=i,f()},m=function(e){e.addClass("opened"),n.addClass("opened-menu"),s.css({overflowY:"hidden"})};v()},n=function(e){var i=this,n=e,t=n.find(".site__menu-link[data-href]"),s=$("html"),o=$(window),a=$("html, body"),d=$(".site__header"),c=($(".popup__cookies-info"),function(){o.on({resize:function(){},scroll:function(){}}),t.on({click:function(){var e=$(this),i=e.attr("data-href"),n=$("."+i).offset().top-d.innerHeight();return t.removeClass("active"),e.addClass("active"),n=o.width()>=1024?$("."+i).offset().top-91:$("."+i).offset().top-64,a.stop(!0,!1),a.animate({scrollTop:n},300),s.css({overflowY:"auto"}),d.find(".site__menu-btn").removeClass("opened"),d.removeClass("opened-menu"),!1}})}),h=function(){n[0].obj=i,c()};h()},t=function(e){var i=this,n=e,t=$(window),s=function(){t.on({scroll:function(){o()}})},o=function(){var e=t.scrollTop(),i=t.height(),s=n.offset().top,o=s-e,a=1-o/i;a>.5&&(n.hasClass("slides_active")||n.addClass("slides_active"))},a=function(){n[0].slides=i,s(),o()};a()},s=function(e){var i=this,n=e,t=$(window),s=$(".site__header"),o=0,a=function(){t.on({load:function(){o=t.width(),c()},resize:function(){o!=t.width()&&(o=t.width()+1,c())}})},d=function(){n[0].obj=i,a()},c=function(){var e=t.height();n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)}),n.find(".contact-us").length&&t.width()>=1024?n.css({"min-height":""}):n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()}}();
"use strict";!function(){$(function(){$.each($(".product-single__gallery"),function(){new s($(this))})});var s=function(s){var o=s.find(".gallery__top"),l=s.find(".gallery__thumbs"),e=function(){o.slick({slidesToShow:1,slidesToScroll:1,arrows:!1,fade:!0,asNavFor:".gallery__thumbs",responsive:[{breakpoint:768,settings:{fade:!1}}]}),l.slick({slidesToShow:2,slidesToScroll:1,asNavFor:".gallery__top",dots:!1,arrows:!1,focusOnSelect:!0})},i=function(){e()};i()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},l=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},r=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"scroll"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,r())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return r(),!1}}),c.on({click:function(){return r(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:l()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
"use strict";!function(){$(function(){$.each($(".count-product"),function(){new n($(this))})});var n=function(n){var t=this,c=n,i=c.find(".count-product__input"),u=c.find(".count-product_add"),o=c.find(".count-product_del"),e=function(){i.on({keypress:function(){46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57)||event.preventDefault()}}),i.on({keyup:function(){""==i.val()&&i.val(1)}}),u.on({click:function(){return f(),!1}}),o.on({click:function(){return r(),!1}})},f=function(){var n=parseInt(i.val());i.val(n+1)},r=function(){var n=parseInt(i.val());1!=n&&i.val(n-1)},a=function(){c[0].obj=t,e()};a()}}();
"use strict";!function(){$(function(){$.each($(".my-cart__product"),function(){new t($(this))}),$.each($(".product-single__info"),function(){new e($(this))})});var t=function(t){var e=this,n=t,i=n.find(".count-product__input"),o=n.find(".count-product__btn"),a=n.find(".my-cart__remove"),s=new XMLHttpRequest,d=$(".cart"),r=$(".my-cart__total"),c=$(window),u=function(){c.on({load:function(){p()},resize:function(){p()}}),i.on({keypress:function(){(46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57))&&_($(this).parents(".my-cart__product"))}}),o.on({click:function(){_($(this).parents(".my-cart__product"))}}),a.on({click:function(){return l($(this).parents(".my-cart__product")),!1}})},f=function(t){t.addClass("hidden"),setTimeout(function(){t.remove()},500)},l=function(t){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{id:t.attr("data-id"),flag:"remove"},dataType:"json",type:"get",success:function(e){f(t),0==parseInt(e.cartCountProducts)?(d.find("div").remove(),d.removeClass("cart_fill"),$(".site__header").removeClass("site__header_fill-cart")):d.find("div").html(e.cartCountProducts),r.find("span").html(e.subtotal)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},_=function(t){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{id:t.attr("data-id"),countProduct:t.find(".count-product__input").val(),flag:"changeCount"},dataType:"json",type:"get",success:function(e){t.find(".my-cart__total-price").html(e.total),r.find("span").html(e.subtotal)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},p=function(){n.each(function(){var t=$(this),e=t.find(">div");t.height(e.outerHeight(!0))})},h=function(){n[0].obj=e,u()};h()},e=function(t){var e=this,n=t,i=n.find(".count-product__input"),o=n.find(".product-single__price"),a=n.find(".product-single__add"),s=new XMLHttpRequest,d=$(".cart"),r=($(window),function(){a.on({click:function(t){return a.hasClass("adding")||(f(t,$(this).parents(".product-single__info")),a.addClass("adding")),!1}})}),c=function(t){var e=$(".gallery__top .slick-current").data("image"),n=t||window.event;n.pageX,n.pageY;console.log(e),$("body").append('<div class="site__product hidden"><img src="'+e+'" alt=""></div>'),$(".site__product").css({top:$(".gallery__top").offset().top+$(".gallery__top").innerHeight()/2-$(".site__product").height()/2,left:$(".gallery__top").offset().left+$(".gallery__top").innerWidth()/2-$(".site__product").width()/2}),setTimeout(function(){$(".site__product").addClass("visible"),$(".site__product").css({top:d.offset().top+d.innerHeight()/2-$(".site__product").height()/2,left:d.offset().left+d.innerWidth()/2-$(".site__product").width()/2})},100),setTimeout(function(){$(".site__product").removeClass("visible")},500),setTimeout(function(){$(".site__product").remove(),a.removeClass("adding")},700)},u=function(){var t="";t=1==parseInt(i.val())?" item":" items",$(".product-single").append('<div class="product-single__info-message hidden">'+i.val()+t+" added to cart</div>"),$(".product-single__info-message ").css({top:a.offset().top+a.innerHeight()+10,left:a.offset().left}),setTimeout(function(){$(".product-single__info-message").addClass("visible")},200),setTimeout(function(){$(".product-single__info-message").remove(),a.removeClass("adding")},3e3)},f=function(t,e){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{action:"single_add_product",id:e.attr("data-id"),countProduct:i.val(),price:o.text(),flag:"addToCart"},dataType:"json",type:"get",success:function(e){parseInt(e.cartCountProducts)!=parseInt(d.find("div").text())?(c(t),setTimeout(function(){d.hasClass("cart_fill")||d.append("<div></div>"),d.addClass("cart_fill"),$(".site__header").addClass("site__header_fill-cart"),setTimeout(function(){d.find("div").html(e.cartCountProducts)},100)},600)):u()},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},l=function(){n[0].obj=e,r()};l()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
