"use strict";!function(){var e=!0;$(function(){new i($(".preloader")),$.each($(".site__header"),function(){new n($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new o($(this))}),$.each($(".site__content-full"),function(){new s($(this))}),$.each($(".site_index"),function(){new a($(this))})});var i=function(e){var i=this,n=$(window),t=e,o=$("body"),s=function(){n.on({load:function(){d()}})},a=function(){o[0].preloader=i,s(),$("html").css({"overflow-y":"hidden"})},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$("html").css({"overflow-y":"scroll"}),$(".site").addClass("site__loaded")},500)};a()},n=function(i){var n=this,t=i,o=$(window),s=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),l=!1,r=!0,c=0,h=t.find(".site__menu-btn"),f=0,u=function(){o.on({load:function(){f=o.width()},resize:function(){f!=o.width()&&(f=o.width()+1,o.width()>=1024&&(a.scrollTop(0),v(h)))},scroll:function(){d=o.scrollTop()>=2*t.innerHeight(),o.scrollTop()>=t.innerHeight()+20?r&&(r=!1,t.addClass("site__header_hide")):(r=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):o.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),o.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;_(n)}n<0?l=!0:setTimeout(function(){l=!1},300)},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;_(n)}n<0?l=!0:setTimeout(function(){l=!1},300)}}),$(window).scroll(function(e){var i=$(this).scrollTop();if(i>c){_(1);var n=1}else{_(-1);var n=-1}c=i,n<0?l=!0:setTimeout(function(){l=!1},300)}),h.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(i){i>0&&!t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&!l&&t.addClass("site__header_hidden"),i<0&&t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&l&&e&&t.removeClass("site__header_hidden")},v=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=n,u()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),s.css({overflowY:"hidden"})};m()},t=function(i){var n=this,t=i,o=t,s=$("html"),a=$(window),d=$("html, body"),l=$(".site__header"),r=($(".popup__cookies-info"),function(){a.on({resize:function(){c()},scroll:function(){c()}}),o.on({click:function(){var i=$(this),n=i.attr("data-href"),t=$("."+n).offset().top;return $(".site__menu-nav_anchors a").removeClass("active"),i.addClass("active"),d.stop(!0,!1),d.animate({scrollTop:t},{duration:500,progress:function(){e=!1,l.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),s.css({overflowY:"auto"}),l.find(".site__menu-btn").removeClass("opened"),l.removeClass("opened-menu"),!1}})}),c=function(){for(var e=a.scrollTop(),i=$("body").find('[data-scroll="scroll"]'),n=(i.offset().top,0);n<i.length;n++){var t=$(i[n]),s=$(i[n]).offset().top-l.outerHeight(!0),d=$(i[n]).outerHeight(!0);if(e>s){var r=t.attr("class").split(" "),c=o.filter("[data-href="+r[0]+"]");o.removeClass("active"),c.addClass("active")}e>s+d&&o.removeClass("active")}},h=function(){t[0].obj=n,r()};h()},o=function(e){var i=this,n=e,t=$(window),o=function(){t.on({load:function(){s()},scroll:function(){s()}})},s=function(){var e=t.scrollTop(),i=t.height(),o=n.offset().top,s=o-e,a=1-s/i;a>.5&&(n.hasClass("slides_active")||n.addClass("slides_active"))},a=function(){n[0].slides=i,o()};a()},s=function(e){var i=this,n=e,t=$(window),o=$(".site__header"),s=0,a=function(){t.on({load:function(){s=t.width(),l()},resize:function(){s!=t.width()&&(s=t.width()+1,l())}})},d=function(){n[0].obj=i,a()},l=function(){var e=t.height();n.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)}),n.find(".contact-us").length&&t.width()>=1024?n.css({"min-height":""}):n.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()},a=function(e){var i=this,n=e,t=$(window),o=($("html, body"),function(){t.on({load:function(){setTimeout(function(){s()},100)}})}),s=function(){var e=window.location.hash.replace("#","");if(e){var i=$("."+window.location.hash.replace("#",""));i.length&&window.scrollTo(0,parseInt(i.offset().top))}},a=function(){n[0].obj=i,o()};a()}}();
"use strict";!function(){$(function(){$.each($(".product-single__gallery"),function(){new s($(this))})});var s=function(s){var o=s.find(".gallery__top"),l=s.find(".gallery__thumbs"),e=function(){o.slick({slidesToShow:1,slidesToScroll:1,arrows:!1,fade:!0,asNavFor:".gallery__thumbs",responsive:[{breakpoint:768,settings:{fade:!1}}]}),l.slick({slidesToShow:2,slidesToScroll:1,asNavFor:".gallery__top",dots:!1,arrows:!1,focusOnSelect:!0})},i=function(){e()};i()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},l=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},r=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"scroll"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,r())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return r(),!1}}),c.on({click:function(){return r(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:l()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
"use strict";!function(){$(function(){$.each($(".count-product"),function(){new n($(this))})});var n=function(n){var t=this,c=n,i=c.find(".count-product__input"),u=c.find(".count-product_add"),o=c.find(".count-product_del"),e=function(){i.on({keypress:function(){46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57)||event.preventDefault()}}),i.on({keyup:function(){""==i.val()&&i.val(1)}}),u.on({click:function(){return f(),!1}}),o.on({click:function(){return r(),!1}})},f=function(){var n=parseInt(i.val());i.val(n+1)},r=function(){var n=parseInt(i.val());1!=n&&i.val(n-1)},a=function(){c[0].obj=t,e()};a()}}();
"use strict";!function(){$(function(){$.each($(".my-cart__product"),function(){new t($(this))}),$.each($(".product-single__info"),function(){new a($(this))})});var t=function(t){var a=this,i=t,n=i.find(".count-product__input"),o=i.find(".count-product__btn"),e=i.find(".my-cart__remove"),d=new XMLHttpRequest,s=$(".cart"),c=0,r=$(".my-cart__total"),u=i.find(".my-cart__loading"),l=$(".my-cart__define .btn"),f=$(".my-cart__define input"),_=$(".my-cart__discount"),m=$(".my-cart__define"),p=$(".my-cart__applied"),v=$(".my-cart__invalid"),h=$(window),g=function(){h.on({load:function(){k()},resize:function(){k()}}),n.on({keypress:function(){(46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57))&&b($(this).parents(".my-cart__product"))}}),n.on({keyup:function(){setTimeout(function(){x(),b(i)},100)}}),o.on({click:function(){e.addClass("loading"),setTimeout(function(){b(i)},500)}}),o.on({mouseup:function(){setTimeout(function(){x()},100)}}),e.on({click:function(){var t=$(this);return t.hasClass("loading")||(u.addClass("visible"),setTimeout(function(){C(t.parents(".my-cart__product"))},500)),!1}}),l.on({click:function(){var t=$(this);return""!=f.val()?($(".my-cart__promo-loading").addClass("loading"),t.hasClass("ajax-loading")||T()):f.focus(),!1}}),v.find("a").on({click:function(){return $(".my-cart__promo-loading").removeClass("loading"),v.removeClass("visible"),m.removeClass("hidden"),!1}}),p.find("a").on({click:function(){return $(".my-cart__promo-loading").removeClass("loading"),w(),!1}})},y=function(t){t.addClass("hidden"),setTimeout(function(){t.remove()},500)},C=function(t){d.abort(),d=$.ajax({url:$("body").attr("data-action"),data:{action:"remove_cart_item",id:t.attr("data-product-key"),flag:"remove"},dataType:"json",type:"get",success:function(a){y(t),0==parseInt(a.cartCountProducts)?(s.find("div").remove(),s.removeClass("cart_fill"),$(".site__header").removeClass("site__header_fill-cart"),$(".my-cart").addClass("empty")):(s.find("div").html(a.cartCountProducts),$(".my-cart__discount").find("dd").html(a.discount)),r.find("dd").html(a.subtotal),setTimeout(function(){u.removeClass("visible")},500)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},b=function(t){d.abort(),d=$.ajax({url:$("body").attr("data-action"),data:{action:"cart_quantity_changes",id:t.attr("data-product-id"),key:t.attr("data-product-key"),countProduct:t.find(".count-product__input").val(),flag:"changeCount"},dataType:"json",type:"get",success:function(a){t.find(".my-cart__total-price").html(a.total),r.find("dd").html(a.subtotal),$(".my-cart__discount").find("dd").html(a.discount),setTimeout(function(){e.removeClass("loading")},500)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},T=function(){d.abort(),d=$.ajax({url:$("body").attr("data-action"),data:{action:"apply_coupon_to_order",inputVal:f.val(),flag:"coupon"},dataType:"json",type:"get",success:function(t){setTimeout(function(){1==t.status?(_.addClass("visible"),m.addClass("hidden"),p.addClass("visible"),r.find("dd").html(t.subtotal),_.find("dd").html(t.discount)):(m.addClass("hidden"),v.addClass("visible"),p.addClass("hidden")),l.removeClass("ajax-loading"),$(".my-cart__promo-loading").removeClass("loading")},500)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},w=function(){d.abort(),d=$.ajax({url:$("body").attr("data-action"),data:{action:"remove_coupon_to_order",inputVal:f.val(),flag:"couponRemove"},dataType:"json",type:"get",success:function(t){setTimeout(function(){r.find("dd").html(t.subtotal),_.removeClass("visible"),m.removeClass("hidden"),p.removeClass("visible"),$(".my-cart__promo-loading").removeClass("loading")},500)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},k=function(){i.each(function(){var t=$(this),a=t.find(">div");t.height(a.outerHeight(!0))})},x=function(){c=0,s.hasClass("cart_fill")?($(".my-cart__products .count-product__input").each(function(){var t=$(this),a=parseInt(t.val());c+=a}),setTimeout(function(){s.find("div").html(c+" items")},700)):($(".my-cart__products .count-product__input").each(function(){var t=$(this),a=parseInt(t.val());c+=a}),setTimeout(function(){s.append("<div></div>"),s.addClass("cart_fill"),$(".site__header").addClass("site__header_fill-cart"),setTimeout(function(){1==c?s.find("div").html(c+" item"):s.find("div").html(c+" items")},100)},600))},R=function(){i[0].obj=a,g()};R()},a=function(t){var a=this,i=t,n=i.find(".count-product__input"),o=i.find(".product-single__price"),e=i.find(".product-single__add"),d=new XMLHttpRequest,s=$(".cart"),c=0,r=0,u=($(window),function(){e.on({click:function(t){return e.hasClass("adding")||($(".gallery__top .slick-current").length?l(t):f(),_($(this).parents(".product-single__info")),e.addClass("adding")),!1}})}),l=function(t){var a=$(".gallery__top .slick-current").data("image"),i=t||window.event;i.pageX,i.pageY;$("body").append('<div class="site__product hidden" style="background-image:url('+a+')"></div>'),$(".site__product").css({top:$(".gallery__top").offset().top,left:$(".gallery__top").offset().left,width:$(".gallery__top").width(),height:$(".gallery__top").height()}),setTimeout(function(){$(".site__product").addClass("visible"),$(".site__product").css({top:s.offset().top+s.innerHeight()/2-$(".site__product").height()/2,left:s.offset().left+s.innerWidth()/2-$(".site__product").width()/2})},100),setTimeout(function(){$(".site__product").removeClass("visible"),$(".site__product").css({"-webkit-transform":"scale(0.3)",transform:"scale(0.3)"})},500),setTimeout(function(){$(".site__product").remove()},700),f()},f=function(){s.hasClass("cart_fill")?(c=parseInt(s.find("div").text()),r=parseInt(n.val())+c,setTimeout(function(){s.find("div").html(r+" items")},700)):(r=parseInt(n.val()),setTimeout(function(){s.append("<div></div>"),s.addClass("cart_fill"),$(".site__header").addClass("site__header_fill-cart"),setTimeout(function(){1==r?s.find("div").html(r+" item"):s.find("div").html(r+" items")},100)},600)),setTimeout(function(){e.removeClass("adding")},700)},_=function(t){d.abort(),d=$.ajax({url:$("body").attr("data-action"),data:{action:"single_add_product",id:t.attr("data-id"),countProduct:n.val(),price:o.text(),flag:"addToCart"},dataType:"json",type:"get",success:function(t){parseInt(t.cartCountProducts)!=r&&s.find("div").html(t.cartCountProducts)},error:function(t,a){"abort"!=t.statusText&&parseInt(a.cartCountProducts)!=r&&s.find("div").html(c+"items")}})},m=function(){i[0].obj=a,u()};m()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
