"use strict";!function(){var e=!0;$(function(){new n($(".preloader")),$.each($(".site__header"),function(){new i($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new o($(this))}),$.each($(".site__content-full"),function(){new s($(this))}),$.each($(".site_index"),function(){new a($(this))})});var n=function(e){var n=this,i=$(window),t=e,o=$("body"),s=function(){i.on({load:function(){d()}})},a=function(){o[0].preloader=n,s()},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$(".site").addClass("site__loaded")},500)};a()},i=function(n){var i=this,t=n,o=$(window),s=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),c=!1,l=!0,r=0,h=t.find(".site__menu-btn"),u=0,f=function(){o.on({load:function(){u=o.width()},resize:function(){u!=o.width()&&(u=o.width()+1,o.width()>=1024&&(a.scrollTop(0),v(h)))},scroll:function(){d=o.scrollTop()>=2*t.innerHeight(),o.scrollTop()>=t.innerHeight()+20?l&&(l=!1,t.addClass("site__header_hide")):(l=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):o.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),o.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;_(i)}i<0?c=!0:setTimeout(function(){c=!1},300)},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;_(i)}i<0?c=!0:setTimeout(function(){c=!1},300)}}),$(window).scroll(function(e){var n=$(this).scrollTop();if(n>r){_(1);var i=1}else{_(-1);var i=-1}r=n,i<0?c=!0:setTimeout(function(){c=!1},300)}),h.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(n){n>0&&!t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&!c&&t.addClass("site__header_hidden"),n<0&&t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&c&&e&&t.removeClass("site__header_hidden")},v=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=i,f()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),s.css({overflowY:"hidden"})};m()},t=function(n){var i=this,t=n,o=t,s=$("html"),a=$(window),d=$("html, body"),c=$(".site__header"),l=($(".popup__cookies-info"),function(){a.on({resize:function(){},scroll:function(){}}),o.on({click:function(){var n=$(this),i=n.attr("data-href"),t=$("."+i).offset().top;return $(".site__menu-nav_anchors a").removeClass("active"),n.addClass("active"),d.stop(!0,!1),d.animate({scrollTop:t},{duration:500,progress:function(){e=!1,c.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),s.css({overflowY:"auto"}),c.find(".site__menu-btn").removeClass("opened"),c.removeClass("opened-menu"),!1}})}),r=function(){t[0].obj=i,l()};r()},o=function(e){var n=this,i=e,t=$(window),o=function(){t.on({load:function(){s()},scroll:function(){s()}})},s=function(){var e=t.scrollTop(),n=t.height(),o=i.offset().top,s=o-e,a=1-s/n;a>.5&&(i.hasClass("slides_active")||i.addClass("slides_active"))},a=function(){i[0].slides=n,o()};a()},s=function(e){var n=this,i=e,t=$(window),o=$(".site__header"),s=0,a=function(){t.on({load:function(){s=t.width(),c()},resize:function(){s!=t.width()&&(s=t.width()+1,c())}})},d=function(){i[0].obj=n,a()},c=function(){var e=t.height();i.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)}),i.find(".contact-us").length&&t.width()>=1024?i.css({"min-height":""}):i.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()},a=function(e){var n=this,i=e,t=$(window),o=($("html, body"),function(){t.on({load:function(){setTimeout(function(){s()},100)}})}),s=function(){var e=window.location.hash.replace("#","");if(e){var n=$("."+window.location.hash.replace("#",""));n.length&&window.scrollTo(0,parseInt(n.offset().top))}},a=function(){i[0].obj=n,o()};a()}}();
"use strict";!function(){$(function(){$.each($(".product-single__gallery"),function(){new s($(this))})});var s=function(s){var o=s.find(".gallery__top"),l=s.find(".gallery__thumbs"),e=function(){o.slick({slidesToShow:1,slidesToScroll:1,arrows:!1,fade:!0,asNavFor:".gallery__thumbs",responsive:[{breakpoint:768,settings:{fade:!1}}]}),l.slick({slidesToShow:2,slidesToScroll:1,asNavFor:".gallery__top",dots:!1,arrows:!1,focusOnSelect:!0})},i=function(){e()};i()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},l=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},r=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"scroll"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,r())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return r(),!1}}),c.on({click:function(){return r(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:l()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
"use strict";!function(){$(function(){$.each($(".count-product"),function(){new n($(this))})});var n=function(n){var t=this,c=n,i=c.find(".count-product__input"),u=c.find(".count-product_add"),o=c.find(".count-product_del"),e=function(){i.on({keypress:function(){46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57)||event.preventDefault()}}),i.on({keyup:function(){""==i.val()&&i.val(1)}}),u.on({click:function(){return f(),!1}}),o.on({click:function(){return r(),!1}})},f=function(){var n=parseInt(i.val());i.val(n+1)},r=function(){var n=parseInt(i.val());1!=n&&i.val(n-1)},a=function(){c[0].obj=t,e()};a()}}();
"use strict";!function(){$(function(){$.each($(".my-cart__product"),function(){new t($(this))}),$.each($(".product-single__info"),function(){new i($(this))})});var t=function(t){var i=this,n=t,e=n.find(".count-product__input"),a=n.find(".count-product__btn"),o=n.find(".my-cart__remove"),s=new XMLHttpRequest,c=$(".cart"),d=0,r=$(".my-cart__total"),u=n.find(".my-cart__loading"),l=$(window),f=function(){l.on({load:function(){h()},resize:function(){h()}}),e.on({keypress:function(){(46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57))&&m($(this).parents(".my-cart__product"))}}),e.on({keyup:function(){setTimeout(function(){v(),m(n)},100)}}),a.on({click:function(){o.addClass("loading"),setTimeout(function(){m(n)},500)}}),a.on({mouseup:function(){setTimeout(function(){v()},100)}}),o.on({click:function(){var t=$(this);return t.hasClass("loading")||(u.addClass("visible"),setTimeout(function(){p(t.parents(".my-cart__product"))},500)),!1}})},_=function(t){t.addClass("hidden"),setTimeout(function(){t.remove()},500)},p=function(t){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{action:"remove_cart_item",id:t.attr("data-product-key"),flag:"remove"},dataType:"json",type:"get",success:function(i){_(t),0==parseInt(i.cartCountProducts)?(c.find("div").remove(),c.removeClass("cart_fill"),$(".site__header").removeClass("site__header_fill-cart"),$(".my-cart").addClass("empty")):c.find("div").html(i.cartCountProducts),r.find("span").html(i.subtotal),setTimeout(function(){u.removeClass("visible")},500)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},m=function(t){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{action:"cart_quantity_changes",id:t.attr("data-product-id"),key:t.attr("data-product-key"),countProduct:t.find(".count-product__input").val(),flag:"changeCount"},dataType:"json",type:"get",success:function(i){t.find(".my-cart__total-price").html(i.total),r.find("span").html(i.subtotal),setTimeout(function(){o.removeClass("loading")},500)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},h=function(){n.each(function(){var t=$(this),i=t.find(">div");t.height(i.outerHeight(!0))})},v=function(){d=0,c.hasClass("cart_fill")?($(".my-cart__products .count-product__input").each(function(){var t=$(this),i=parseInt(t.val());d+=i}),setTimeout(function(){c.find("div").html(d+" items")},700)):($(".my-cart__products .count-product__input").each(function(){var t=$(this),i=parseInt(t.val());d+=i}),setTimeout(function(){c.append("<div></div>"),c.addClass("cart_fill"),$(".site__header").addClass("site__header_fill-cart"),setTimeout(function(){1==d?c.find("div").html(d+" item"):c.find("div").html(d+" items")},100)},600))},g=function(){n[0].obj=i,f()};g()},i=function(t){var i=this,n=t,e=n.find(".count-product__input"),a=n.find(".product-single__price"),o=n.find(".product-single__add"),s=new XMLHttpRequest,c=$(".cart"),d=0,r=0,u=($(window),function(){o.on({click:function(t){return o.hasClass("adding")||($(".gallery__top .slick-current").length?l(t):f(),_($(this).parents(".product-single__info")),o.addClass("adding")),!1}})}),l=function(t){var i=$(".gallery__top .slick-current").data("image"),n=t||window.event;n.pageX,n.pageY;$("body").append('<div class="site__product hidden" style="background-image:url('+i+')"></div>'),$(".site__product").css({top:$(".gallery__top").offset().top,left:$(".gallery__top").offset().left,width:$(".gallery__top").width(),height:$(".gallery__top").height()}),setTimeout(function(){$(".site__product").addClass("visible"),$(".site__product").css({top:c.offset().top+c.innerHeight()/2-$(".site__product").height()/2,left:c.offset().left+c.innerWidth()/2-$(".site__product").width()/2})},100),setTimeout(function(){$(".site__product").removeClass("visible"),$(".site__product").css({"-webkit-transform":"scale(0.3)",transform:"scale(0.3)"})},500),setTimeout(function(){$(".site__product").remove()},700),f()},f=function(){c.hasClass("cart_fill")?(d=parseInt(c.find("div").text()),r=parseInt(e.val())+d,setTimeout(function(){c.find("div").html(r+" items")},700)):(r=parseInt(e.val()),setTimeout(function(){c.append("<div></div>"),c.addClass("cart_fill"),$(".site__header").addClass("site__header_fill-cart"),setTimeout(function(){1==r?c.find("div").html(r+" item"):c.find("div").html(r+" items")},100)},600)),setTimeout(function(){o.removeClass("adding")},700)},_=function(t){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{action:"single_add_product",id:t.attr("data-id"),countProduct:e.val(),price:a.text(),flag:"addToCart"},dataType:"json",type:"get",success:function(t){parseInt(t.cartCountProducts)!=r&&c.find("div").html(t.cartCountProducts)},error:function(t,i){"abort"!=t.statusText&&parseInt(i.cartCountProducts)!=r&&c.find("div").html(d+"items")}})},p=function(){n[0].obj=i,u()};p()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
