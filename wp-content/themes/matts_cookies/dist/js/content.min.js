"use strict";!function(){var e=!0;$(function(){new i($(".preloader")),$.each($(".site__header"),function(){new n($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new o($(this))}),$.each($(".site__content-full"),function(){new s($(this))}),$.each($(".site_index"),function(){new a($(this))})});var i=function(e){var i=this,n=$(window),t=e,o=$("body"),s=function(){n.on({load:function(){d()}})},a=function(){o[0].preloader=i,s(),$("html").css({"overflow-y":"hidden"})},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$("html").css({"overflow-y":"scroll"}),$(".site").addClass("site__loaded")},500)};a()},n=function(i){var n=this,t=i,o=$(window),s=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),l=!1,r=!0,c=0,h=t.find(".site__menu-btn"),f=0,u=function(){o.on({load:function(){f=o.width()},resize:function(){f!=o.width()&&(f=o.width()+1,o.width()>=1024&&(a.scrollTop(0),v(h)))},scroll:function(){d=o.scrollTop()>=2*t.innerHeight(),o.scrollTop()>=t.innerHeight()+20?r&&(r=!1,t.addClass("site__header_hide")):(r=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):o.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),o.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;_(n)}n<0?l=!0:setTimeout(function(){l=!1},300)},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;_(n)}n<0?l=!0:setTimeout(function(){l=!1},300)}}),$(window).scroll(function(e){var i=$(this).scrollTop();if(i>c){_(1);var n=1}else{_(-1);var n=-1}c=i,n<0?l=!0:setTimeout(function(){l=!1},300)}),h.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(i){i>0&&!t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&!l&&t.addClass("site__header_hidden"),i<0&&t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&l&&e&&t.removeClass("site__header_hidden")},v=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=n,u()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),s.css({overflowY:"hidden"})};m()},t=function(i){var n=this,t=i,o=t,s=$("html"),a=$(window),d=$("html, body"),l=$(".site__header"),r=($(".popup__cookies-info"),function(){a.on({resize:function(){c()},scroll:function(){c()}}),o.on({click:function(){var i=$(this),n=i.attr("data-href"),t=$("."+n).offset().top,o=l.innerHeight();return $(".site__menu-nav_anchors a").removeClass("active"),i.addClass("active"),d.stop(!0,!1),d.animate({scrollTop:t-o},{duration:500,progress:function(){e=!1,l.addClass("site__header_hidden"),o=l.innerHeight()},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),s.css({overflowY:"auto"}),l.find(".site__menu-btn").removeClass("opened"),l.removeClass("opened-menu"),!1}})}),c=function(){for(var e=a.scrollTop(),i=$("body").find('[data-scroll="scroll"]'),n=(i.offset().top,0);n<i.length;n++){var t=$(i[n]),s=$(i[n]).offset().top-l.outerHeight(!0),d=$(i[n]).outerHeight(!0);if(e>s-20){var r=t.attr("class").split(" "),c=o.filter("[data-href="+r[0]+"]");o.removeClass("active"),c.addClass("active")}e>s+d&&o.removeClass("active")}},h=function(){t[0].obj=n,r()};h()},o=function(e){var i=this,n=e,t=$(window),o=function(){t.on({load:function(){s()},scroll:function(){s()}})},s=function(){var e=t.scrollTop(),i=t.height(),o=n.offset().top,s=o-e,a=1-s/i;a>.5&&(n.hasClass("slides_active")||n.addClass("slides_active"))},a=function(){n[0].slides=i,o()};a()},s=function(e){var i=this,n=e,t=$(window),o=$(".site__header"),s=0,a=function(){t.on({load:function(){s=t.width(),l()},resize:function(){s!=t.width()&&(s=t.width()+1,l())}})},d=function(){n[0].obj=i,a()},l=function(){var e=t.height();n.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)}),n.find(".contact-us").length&&t.width()>=1024?n.css({"min-height":""}):n.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()},a=function(e){var i=this,n=e,t=$(window),o=($("html, body"),function(){t.on({load:function(){setTimeout(function(){s()},100)}})}),s=function(){var e=window.location.hash.replace("#","");if(e){var i=$("."+window.location.hash.replace("#",""));i.length&&window.scrollTo(0,parseInt(i.offset().top)),$(".slides").addClass("slides_active")}},a=function(){n[0].obj=i,o()};a()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
