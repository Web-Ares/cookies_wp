"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__header"),function(){new o($(this))}),$.each($(".site__menu-nav_anchors"),function(){new s($(this))}),$.each($(".slides"),function(){new i($(this))})});var e=function(e){var o=this,s=$(window),i=e,n=$("body"),t=function(){s.on({load:function(){d()}})},a=function(){n[0].preloader=o,t()},d=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},o=function(e){var o=this,s=e,i=$(window),n=$("html"),t=s.find(".site__menu"),a=($(".site__content"),!1),d=!1,l=!0,r=0,c=s.find(".site__menu-btn"),f=0,h=function(){i.on({load:function(){f=i.width()},resize:function(){f!=i.width()&&(f=i.width()+1,i.width()>=1024&&(t.scrollTop(0),_(c)))},scroll:function(){a=i.scrollTop()>=2*s.innerHeight(),i.scrollTop()>=s.innerHeight()?l&&(l=!1,s.addClass("site__header_hide")):(l=!0,s.removeClass("site__header_hide")),a?s.hasClass("site__header_hide")&&setTimeout(function(){s.addClass("site__header_fixed"),s.removeClass("site__header_hide")},100):i.scrollTop()<=3*s.innerHeight()&&s.removeClass("site__header_fixed")},DOMMouseScroll:function(e){var o=e.originalEvent.detail;if(o){var s=o>0?1:-1;u(s)}s<0?d=!0:setTimeout(function(){d=!1},300)},mousewheel:function(e){var o=e.originalEvent.wheelDelta;if(o){var s=o>0?-1:1;u(s)}s<0?d=!0:setTimeout(function(){d=!1},300)}}),$(window).scroll(function(e){var o=$(this).scrollTop();if(o>r){u(1);var s=1}else{u(-1);var s=-1}r=o,s<0?d=!0:setTimeout(function(){d=!1},300)}),c.on({click:function(){$(this).hasClass("opened")?_($(this)):p($(this))}})},u=function(e){e>0&&!s.hasClass("site__header_hidden")&&!c.hasClass("opened")&&a&&!d&&s.addClass("site__header_hidden"),e<0&&s.hasClass("site__header_hidden")&&!c.hasClass("opened")&&a&&d&&s.removeClass("site__header_hidden")},_=function(e){n.css({overflowY:"auto"}),e.removeClass("opened"),s.removeClass("opened-menu")},v=function(){s[0].obj=o,h()},p=function(e){e.addClass("opened"),s.addClass("opened-menu"),n.css({overflowY:"hidden"})};v()},s=function(e){var o=this,s=e,i=s.find(".site__menu-link"),n=$("html"),t=$(window),a=$("html, body"),d=$(".site__header"),l=($(".popup__cookies-info"),function(){t.on({resize:function(){r()},scroll:function(){r()}}),i.on({click:function(){var e=$(this),o=e.attr("data-href"),s=$("."+o).offset().top-d.innerHeight();return i.removeClass("active"),e.addClass("active"),s=t.width()>=1024?$("."+o).offset().top-91:$("."+o).offset().top-64,a.stop(!0,!1),a.animate({scrollTop:s},300),n.css({overflowY:"auto"}),d.find(".site__menu-btn").removeClass("opened"),d.removeClass("opened-menu"),!1}})}),r=function(){for(var e=$(window).scrollTop(),o=$("body").find('[data-scroll="scroll"]'),s=(o.offset().top,0);s<o.length;s++){var n=$(o[s]),t=$(o[s]).offset().top-d.outerHeight(!0),a=$(o[s]).outerHeight(!0);if(e>t){var l=n.attr("class").split(" "),r=i.filter("[data-href="+l[0]+"]");i.removeClass("active"),r.addClass("active")}e>t+a&&i.removeClass("active")}},c=function(){s[0].obj=o,l(),r()};c()},i=function(e){var o=this,s=e,i=$(window),n=function(){i.on({scroll:function(){t()}})},t=function(){var e=i.scrollTop(),o=i.height(),n=s.offset().top,t=n-e,a=1-t/o;a>.5&&(s.hasClass("slides_active")||s.addClass("slides_active"))},a=function(){s[0].slides=o,n(),t()};a()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,l())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),c.on({click:function(){return l(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
"use strict";!function(){$(function(){$.each($(".count-product"),function(){new n($(this))})});var n=function(n){var t=this,c=n,i=c.find(".count-product__input"),u=c.find(".count-product_add"),o=c.find(".count-product_del"),e=function(){i.on({keypress:function(){46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57)||event.preventDefault()}}),i.on({keyup:function(){""==i.val()&&i.val(1)}}),u.on({click:function(){return f(),!1}}),o.on({click:function(){return r(),!1}})},f=function(){var n=parseInt(i.val());i.val(n+1)},r=function(){var n=parseInt(i.val());1!=n&&i.val(n-1)},a=function(){c[0].obj=t,e()};a()}}();
"use strict";!function(){$(function(){$.each($(".my-cart__product"),function(){new t($(this))}),$.each($(".product-single__info"),function(){new e($(this))})});var t=function(t){var e=this,n=t,i=n.find(".count-product__input"),o=n.find(".count-product__btn"),a=n.find(".my-cart__remove"),s=new XMLHttpRequest,d=$(".cart"),r=$(".my-cart__total"),c=$(window),u=function(){c.on({load:function(){p()},resize:function(){p()}}),i.on({keypress:function(){(46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57))&&_($(this).parents(".my-cart__product"))}}),o.on({click:function(){_($(this).parents(".my-cart__product"))}}),a.on({click:function(){return l($(this).parents(".my-cart__product")),!1}})},f=function(t){t.addClass("hidden"),setTimeout(function(){t.remove()},500)},l=function(t){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{id:t.attr("data-id"),flag:"remove"},dataType:"json",type:"get",success:function(e){f(t),0==parseInt(e.cartCountProducts)?(d.find("div").remove(),d.removeClass("cart_fill"),$(".site__header").removeClass("site__header_fill-cart")):d.find("div").html(e.cartCountProducts),r.find("span").html(e.subtotal)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},_=function(t){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{id:t.attr("data-id"),countProduct:t.find(".count-product__input").val(),flag:"changeCount"},dataType:"json",type:"get",success:function(e){t.find(".my-cart__total-price").html(e.total),r.find("span").html(e.subtotal)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},p=function(){n.each(function(){var t=$(this),e=t.find(">div");t.height(e.outerHeight(!0))})},h=function(){n[0].obj=e,u()};h()},e=function(t){var e=this,n=t,i=n.find(".count-product__input"),o=n.find(".product-single__price"),a=n.find(".product-single__add"),s=new XMLHttpRequest,d=$(".cart"),r=($(window),function(){a.on({click:function(t){return a.hasClass("adding")||(f(t,$(this).parents(".product-single__info")),a.addClass("adding")),!1}})}),c=function(t,e){var n=e.data("image"),i=t||window.event;i.pageX,i.pageY;$("body").append('<div class="site__product hidden"><img src="'+n+'" alt=""></div>'),$(".site__product").css({top:$(".gallery__top").offset().top+$(".gallery__top").innerHeight()/2-$(".site__product").height()/2,left:$(".gallery__top").offset().left+$(".gallery__top").innerWidth()/2-$(".site__product").width()/2}),setTimeout(function(){$(".site__product").addClass("visible"),$(".site__product").css({top:d.offset().top+d.innerHeight()/2-$(".site__product").height()/2,left:d.offset().left+d.innerWidth()/2-$(".site__product").width()/2})},100),setTimeout(function(){$(".site__product").removeClass("visible")},500),setTimeout(function(){$(".site__product").remove(),a.removeClass("adding")},700)},u=function(){var t="";t=1==parseInt(i.val())?" item":" items",$(".product-single").append('<div class="product-single__info-message hidden">'+i.val()+t+" added to cart</div>"),$(".product-single__info-message ").css({top:a.offset().top+a.innerHeight()+10,left:a.offset().left}),setTimeout(function(){$(".product-single__info-message").addClass("visible")},200),setTimeout(function(){$(".product-single__info-message").remove(),a.removeClass("adding")},3e3)},f=function(t,e){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{id:e.attr("data-id"),countProduct:i.val(),price:o.text(),flag:"addToCart"},dataType:"json",type:"get",success:function(n){parseInt(n.cartCountProducts)!=parseInt(d.find("div").text())?d.hasClass("cart_fill")||(c(t,e),setTimeout(function(){d.append("<div></div>"),d.addClass("cart_fill"),$(".site__header").addClass("site__header_fill-cart"),setTimeout(function(){d.find("div").html(n.cartCountProducts)},100)},600)):u()},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},l=function(){n[0].obj=e,r()};l()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LnBvcHVwLmpzIiwianF1ZXJ5Lm51bWJlci1zcGlubmVyLmpzIiwianF1ZXJ5LmFqYXgtY2FydC5qcyJdLCJuYW1lcyI6WyIkIiwiUHJlbG9hZGVyIiwiZWFjaCIsIk1lbnUiLCJ0aGlzIiwiU2Nyb2xsUGFuZWwiLCJTbGlkZXMiLCJvYmoiLCJfc2VsZiIsIl93aW5kb3ciLCJ3aW5kb3ciLCJfcHJlbG9hZGVyIiwiX2JvZHkiLCJfYWRkRXZlbnRzIiwib24iLCJsb2FkIiwiX3Nob3dTaXRlIiwiX2luaXQiLCJwcmVsb2FkZXIiLCJhZGRDbGFzcyIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJfb2JqIiwiX2h0bWwiLCJfbWVudSIsImZpbmQiLCJfYWN0aW9uIiwiX2FjdGlvbjIiLCJfZmxhZ0hpZGUiLCJsYXN0U2Nyb2xsVG9wIiwiX3Nob3dNZW51QnRuIiwiX2dsb2JhbFdpZHRoIiwid2lkdGgiLCJyZXNpemUiLCJzY3JvbGxUb3AiLCJfY2xvc2VNZW51Iiwic2Nyb2xsIiwiaW5uZXJIZWlnaHQiLCJyZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwiRE9NTW91c2VTY3JvbGwiLCJlIiwiZGVsdGEiLCJvcmlnaW5hbEV2ZW50IiwiZGV0YWlsIiwiZGlyZWN0aW9uIiwiX2NoZWNrU2Nyb2xsIiwibW91c2V3aGVlbCIsIndoZWVsRGVsdGEiLCJldmVudCIsInN0IiwiY2xpY2siLCJfb3Blbk1lbnUiLCJlbGVtIiwiY3NzIiwib3ZlcmZsb3dZIiwiX2xpbmtzIiwiX2RvbSIsIl9oZWFkZXIiLCJfY2hhbmdlQWN0aXZlIiwiY3VySXRlbSIsIm5ld0NsYXNzIiwiYXR0ciIsIm5leHRJdGVtVG9wIiwib2Zmc2V0IiwidG9wIiwic3RvcCIsImFuaW1hdGUiLCJpdGVtIiwiaSIsImxlbmd0aCIsImN1ciIsIml0ZW1DdXIiLCJvdXRlckhlaWdodCIsIml0ZW1IZWlnaHQiLCJjdXJDbGFzcyIsInNwbGl0IiwiY3VyTGluayIsImZpbHRlciIsImN1clNjcm9sbCIsIndpbmRvd0giLCJoZWlnaHQiLCJ0b3BQb3MiLCJ0b3BJbldpbmRvdyIsInZpc2libGVQZXJjZW50Iiwic2xpZGVzIiwiUG9wdXAiLCJfcG9wdXBQYWRkaW5nIiwiX2J0blNob3ciLCJfYnRuQ2xvc2UiLCJfd3JhcCIsIl9jb250ZW50cyIsIl9zY3JvbGxDb250ZWluZXIiLCJfdGltZXIiLCJfY2VudGVyV3JhcCIsIl9nZXRTY3JvbGxXaWR0aCIsInNjcm9sbEJhcldpZHRoIiwic2Nyb2xsRGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYm9keSIsImFwcGVuZENoaWxkIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsInJlbW92ZUNoaWxkIiwiX2hpZGUiLCJwYWRkaW5nUmlnaHQiLCJfb25FdmVudHMiLCJfc2hvdyIsInN0b3BQcm9wYWdhdGlvbiIsIl9zZXRQb3B1cENvbnRlbnQiLCJjdXJDb250ZW50IiwiZGlzcGxheSIsIlNwaW5uZXIiLCJfaW5wdXQiLCJfYnRuVXAiLCJfYnRuRG93biIsImtleXByZXNzIiwid2hpY2giLCJ2YWwiLCJpbmRleE9mIiwicHJldmVudERlZmF1bHQiLCJrZXl1cCIsIl9hZGRDb3VudCIsIl9yZWR1Y2VDb3VudCIsInZhbHVlIiwicGFyc2VJbnQiLCJQcm9kdWN0c0luQ2FydCIsIkFkZFByb2R1Y3RzVG9DYXJ0IiwiX2J0bkNoYW5nZUNvdW50IiwiX2J0blJlbW92ZVByb2R1Y3QiLCJfcmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiX2NhcnQiLCJfdG90YWxQcmljZSIsIl9zZXRIZWlnaHQiLCJfcmVxdWVzdENvdW50Q2hhbmdlIiwicGFyZW50cyIsIl9yZXF1ZXN0UHJvZHVjdFJlbW92ZSIsIl9yZW1vdmVQcm9kdWN0IiwiYWJvcnQiLCJhamF4IiwidXJsIiwiZGF0YSIsImlkIiwiZmxhZyIsImRhdGFUeXBlIiwidHlwZSIsInN1Y2Nlc3MiLCJtIiwiY2FydENvdW50UHJvZHVjdHMiLCJodG1sIiwic3VidG90YWwiLCJlcnJvciIsInN0YXR1c1RleHQiLCJhbGVydCIsImNvdW50UHJvZHVjdCIsInRvdGFsIiwiY2hpbGRyZW4iLCJfcHJpY2UiLCJfYWRkVG9DYXJ0QnRuIiwiX3JlcXVlc3RQcm9kdWN0QWRkVG9DYXJ0IiwiX2FuaW1hdGVkQWRkaW5nIiwicGljIiwicGFnZVgiLCJwYWdlWSIsImFwcGVuZCIsImxlZnQiLCJpbm5lcldpZHRoIiwiX2luZm9BZGRpbmciLCJpdGVtVGV4dCIsInByaWNlIiwidGV4dCJdLCJtYXBwaW5ncyI6IkFBQUEsY0FDQSxXQUVJQSxFQUFHLFdBRUMsR0FBSUMsR0FBV0QsRUFBRSxlQUVqQkEsRUFBRUUsS0FBTUYsRUFBRyxpQkFBbUIsV0FFMUIsR0FBSUcsR0FBT0gsRUFBR0ksU0FJbEJKLEVBQUVFLEtBQU1GLEVBQUUsMkJBQTRCLFdBRWxDLEdBQUlLLEdBQWFMLEVBQUVJLFNBSXZCSixFQUFFRSxLQUFNRixFQUFFLFdBQVksV0FFbEIsR0FBSU0sR0FBUU4sRUFBRUksVUFNdEIsSUFBSUgsR0FBWSxTQUFVTSxHQUd0QixHQUFJQyxHQUFRSixLQUNSSyxFQUFVVCxFQUFHVSxRQUNiQyxFQUFhSixFQUNiSyxFQUFRWixFQUFFLFFBR1ZhLEVBQWEsV0FFVEosRUFBUUssSUFDSkMsS0FBTSxXQUVGQyxRQU1aQyxFQUFRLFdBRUpMLEVBQU0sR0FBR00sVUFBWVYsRUFDckJLLEtBR0pHLEVBQVksV0FFUkwsRUFBV1EsU0FBVSxvQkFFckJDLFdBQVcsV0FDUFQsRUFBV1UsU0FDWHJCLEVBQUUsU0FBU21CLFNBQVUsaUJBRXZCLEtBUVZGLE1BR0FkLEVBQU8sU0FBVUksR0FHakIsR0FBSUMsR0FBUUosS0FDUmtCLEVBQU9mLEVBQ1BFLEVBQVVULEVBQUVVLFFBQ1phLEVBQVF2QixFQUFFLFFBQ1Z3QixFQUFRRixFQUFLRyxLQUFLLGVBRWxCQyxHQURXMUIsRUFBRSxtQkFDSCxHQUNWMkIsR0FBVyxFQUNYQyxHQUFZLEVBQ1pDLEVBQWdCLEVBQ2hCQyxFQUFlUixFQUFLRyxL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QixTQUNuQzRJLEVBQWMzSCxZQUFZLFdBRTNCLE1BSVA0SCxFQUEyQixTQUFXakgsRUFBT0ksR0FFekMrRSxFQUFTUyxRQUNUVCxFQUFXcEksRUFBRThJLE1BQ1RDLElBQUsvSSxFQUFFLFFBQVE4RCxLQUFLLGVBQ3BCa0YsTUFDSUMsR0FBSTVGLEVBQUtTLEtBQUssV0FDZCtGLGFBQWMxQyxFQUFPSyxNQUNyQm9ELE1BQU9aLEVBQU9hLE9BQ2QzQixLQUFNLGFBRVZDLFNBQVUsT0FDVkMsS0FBTSxNQUNOQyxRQUFTLFNBQVVDLEdBRVh2QixTQUFTdUIsRUFBRUMsb0JBQXNCeEIsU0FBU08sRUFBTTdHLEtBQUssT0FBT29KLFFBRXJEdkMsRUFBTS9GLFNBQVMsZUFFbEI0SCxFQUFpQmxILEVBQU9JLEdBRXhCakMsV0FBWSxXQUVSa0gsRUFBTWlDLE9BQU8sZUFDYmpDLEVBQU1uSCxTQUFTLGFBQ2ZuQixFQUFFLGlCQUFpQm1CLFNBQVMsMEJBRTVCQyxXQUFZLFdBRVJrSCxFQUFNN0csS0FBSyxPQUFPK0gsS0FBS0YsRUFBRUMsb0JBRTFCLE1BRUosTUFPUG1CLEtBS1JoQixNQUFPLFNBQVVyQixHQUNxQixTQUE3QkEsRUFBZXNCLFlBQ2hCQyxNQUFNLGdCQU10QjNJLEVBQVEsV0FDSkssRUFBSyxHQUFHZixJQUFNQyxFQUNkSyxJQVFSSSIsImZpbGUiOiJjYXJ0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuKCBmdW5jdGlvbigpe1xuXG4gICAgJCggZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIG5ldyBQcmVsb2FkZXIoICQoJy5wcmVsb2FkZXInKSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5zaXRlX19oZWFkZXInICksIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBuZXcgTWVudSAoICQoIHRoaXMgKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5zaXRlX19tZW51LW5hdl9hbmNob3JzJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IFNjcm9sbFBhbmVsKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLnNsaWRlcycpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBTbGlkZXMoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgUHJlbG9hZGVyID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfcHJlbG9hZGVyID0gb2JqLFxuICAgICAgICAgICAgX2JvZHkgPSAkKCdib2R5Jyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93U2l0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9ib2R5WzBdLnByZWxvYWRlciA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zaG93U2l0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3ByZWxvYWRlci5hZGRDbGFzcyggJ3ByZWxvYWRlcl9sb2FkZWQnICk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIF9wcmVsb2FkZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5zaXRlJykuYWRkQ2xhc3MoICdzaXRlX19sb2FkZWQnICk7XG5cbiAgICAgICAgICAgICAgICB9LDUwMCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgTWVudSA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2h0bWwgPSAkKCdodG1sJyksXG4gICAgICAgICAgICBfbWVudSA9IF9vYmouZmluZCgnLnNpdGVfX21lbnUnKSxcbiAgICAgICAgICAgIF9jb250ZW50ID0gJCgnLnNpdGVfX2NvbnRlbnQnKSxcbiAgICAgICAgICAgIF9hY3Rpb24gPSBmYWxzZSxcbiAgICAgICAgICAgIF9hY3Rpb24yID0gZmFsc2UsXG4gICAgICAgICAgICBfZmxhZ0hpZGUgPSB0cnVlLFxuICAgICAgICAgICAgbGFzdFNjcm9sbFRvcCA9IDAsXG4gICAgICAgICAgICBfc2hvd01lbnVCdG4gPSBfb2JqLmZpbmQoJy5zaXRlX19tZW51LWJ0bicpLFxuICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gMDtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9nbG9iYWxXaWR0aCAhPSBfd2luZG93LndpZHRoKCkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSBfd2luZG93LndpZHRoKCkgKyAxO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21lbnUuc2Nyb2xsVG9wKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCBfc2hvd01lbnVCdG4gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGwnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hY3Rpb24gPSBfd2luZG93LnNjcm9sbFRvcCgpID49IF9vYmouaW5uZXJIZWlnaHQoKSAqIDI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LnNjcm9sbFRvcCgpID49IF9vYmouaW5uZXJIZWlnaHQoKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfZmxhZ0hpZGUgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZsYWdIaWRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZScgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZsYWdIaWRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX2FjdGlvbiApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb2JqLmhhc0NsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGUnICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdzaXRlX19oZWFkZXJfZml4ZWQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggX3dpbmRvdy5zY3JvbGxUb3AoKSA8PSBfb2JqLmlubmVySGVpZ2h0KCkgKiAzICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3NpdGVfX2hlYWRlcl9maXhlZCcgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdET01Nb3VzZVNjcm9sbCc6IGZ1bmN0aW9uICggZSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5vcmlnaW5hbEV2ZW50LmRldGFpbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkZWx0YSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoIGRlbHRhID4gMCApID8gMSA6IC0xO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCBkaXJlY3Rpb24gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRpcmVjdGlvbiA8IDAgICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbjIgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbjIgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMCApXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtb3VzZXdoZWVsJzogZnVuY3Rpb24gKCBlICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkZWx0YSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoIGRlbHRhID4gMCApID8gLTEgOiAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCBkaXJlY3Rpb24gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRpcmVjdGlvbiA8IDAgICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbjIgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbjIgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMCApXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKGV2ZW50KXtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHRoaXMpLnNjcm9sbFRvcCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdCA+IGxhc3RTY3JvbGxUb3Ape1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIDEgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IDFcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIC0xICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAtMVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFzdFNjcm9sbFRvcCA9IHN0O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggZGlyZWN0aW9uIDwgMCAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hY3Rpb24yID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hY3Rpb24yID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMCApXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgX3Nob3dNZW51QnRuLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQoIHRoaXMgKS5oYXNDbGFzcyggJ29wZW5lZCcgKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZU1lbnUoICQoIHRoaXMgKSApXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTWVudSggJCggdGhpcyApICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tTY3JvbGwgPSBmdW5jdGlvbiggZGlyZWN0aW9uICkge1xuXG4gICAgICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiA+IDAgJiYgIV9vYmouaGFzQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZGVuJyApICYmICFfc2hvd01lbnVCdG4uaGFzQ2xhc3MoICdvcGVuZWQnICkgJiYgX2FjdGlvbiAmJiAhX2FjdGlvbjIgKXtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGRlbicgKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCBkaXJlY3Rpb24gPCAwICYmIF9vYmouaGFzQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZGVuJyApICYmICFfc2hvd01lbnVCdG4uaGFzQ2xhc3MoICdvcGVuZWQnICkgICYmIF9hY3Rpb24gJiYgX2FjdGlvbjIgKXtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2xvc2VNZW51ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cbiAgICAgICAgICAgICAgICBfaHRtbC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bydcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZUNsYXNzKCAnb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdvcGVuZWQtbWVudScgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbiggZWxlbSApICB7XG5cbiAgICAgICAgICAgICAgICBlbGVtLmFkZENsYXNzKCAnb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdvcGVuZWQtbWVudScgKTtcblxuICAgICAgICAgICAgICAgIF9odG1sLmNzcygge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBTY3JvbGxQYW5lbCA9IGZ1bmN0aW9uICggb2JqICkge1xuXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2xpbmtzID0gX29iai5maW5kKCcuc2l0ZV9fbWVudS1saW5rJyksXG4gICAgICAgICAgICBfaHRtbCA9ICQoJ2h0bWwnKSxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfZG9tID0gICQoICdodG1sLCBib2R5JyksXG4gICAgICAgICAgICBfaGVhZGVyID0gJCgnLnNpdGVfX2hlYWRlcicpLFxuICAgICAgICAgICAgX3BvcHVwID0gJCgnLnBvcHVwX19jb29raWVzLWluZm8nKTtcblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGFuZ2VBY3RpdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsJzogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hhbmdlQWN0aXZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9saW5rcy5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCggdGhpcyApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NsYXNzID0gY3VySXRlbS5hdHRyKCdkYXRhLWhyZWYnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbVRvcCA9ICQoICcuJyArIG5ld0NsYXNzICApLm9mZnNldCgpLnRvcCAtIF9oZWFkZXIuaW5uZXJIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2xpbmtzLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbVRvcCA9ICQoICcuJyArIG5ld0NsYXNzICApLm9mZnNldCgpLnRvcCAtIDkxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW1Ub3AgPSAkKCAnLicgKyBuZXdDbGFzcyAgKS5vZmZzZXQoKS50b3AgLSA2NDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5zdG9wKCB0cnVlLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5hbmltYXRlKCB7IHNjcm9sbFRvcDogbmV4dEl0ZW1Ub3AgIH0sIDMwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaHRtbC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdhdXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLmZpbmQoJy5zaXRlX19tZW51LWJ0bicpLnJlbW92ZUNsYXNzKCAnb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5yZW1vdmVDbGFzcyggJ29wZW5lZC1tZW51JyApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jaGFuZ2VBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpLFxuICAgICAgICAgICAgICAgICAgICBpdGVtID0gJCgnYm9keScpLmZpbmQoJ1tkYXRhLXNjcm9sbD1cInNjcm9sbFwiXScpLFxuICAgICAgICAgICAgICAgICAgICBpdGVtUG9zID0gaXRlbS5vZmZzZXQoKS50b3A7XG5cbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgaXRlbS5sZW5ndGg7IGkrKyApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyID0gJChpdGVtW2ldKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1DdXIgPSAkKGl0ZW1baV0pLm9mZnNldCgpLnRvcCAtIF9oZWFkZXIub3V0ZXJIZWlnaHQodHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtSGVpZ2h0ID0gJChpdGVtW2ldKS5vdXRlckhlaWdodCh0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggc2Nyb2xsVG9wID4gaXRlbUN1ciApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckNsYXNzID0gY3VyLmF0dHIoJ2NsYXNzJykuc3BsaXQoJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJMaW5rID0gX2xpbmtzLmZpbHRlcihcIltkYXRhLWhyZWY9XCIrY3VyQ2xhc3NbMF0rXCJdXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfbGlua3MucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyTGluay5hZGRDbGFzcygnYWN0aXZlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiggc2Nyb2xsVG9wID4gKCBpdGVtQ3VyICsgaXRlbUhlaWdodCApICl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9saW5rcy5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9jaGFuZ2VBY3RpdmUoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFNsaWRlcyA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbih7XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tTY3JvbGwgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciBjdXJTY3JvbGwgPSBfd2luZG93LnNjcm9sbFRvcCgpLFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dIID0gX3dpbmRvdy5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgdG9wUG9zID0gX29iai5vZmZzZXQoKS50b3AsXG4gICAgICAgICAgICAgICAgICAgIHRvcEluV2luZG93ID0gdG9wUG9zLWN1clNjcm9sbCxcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZVBlcmNlbnQgPSAxLSh0b3BJbldpbmRvdy93aW5kb3dIKTtcblxuICAgICAgICAgICAgICAgIGlmKCB2aXNpYmxlUGVyY2VudCA+IC41ICl7XG4gICAgICAgICAgICAgICAgICAgIGlmKCAhX29iai5oYXNDbGFzcygnc2xpZGVzX2FjdGl2ZScpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCdzbGlkZXNfYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLnNsaWRlcyA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xuXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcblxuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7IiwiKCBmdW5jdGlvbigpe1xuXG4gICAgJCggZnVuY3Rpb24oKXtcblxuICAgICAgICAkKCAnLnBvcHVwJyApLmVhY2goZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgbmV3IFBvcHVwKCQodGhpcykpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgICB2YXIgUG9wdXAgPSBmdW5jdGlvbiggb2JqICl7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9wb3B1cFBhZGRpbmcgPSA0MCxcbiAgICAgICAgICAgIF9idG5TaG93ID0gICQoICcucG9wdXBfX29wZW4nICksXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2J0bkNsb3NlID0gX29iai5maW5kKCAnLnBvcHVwX19jbG9zZSwgLnBvcHVwX19jYW5jZWwnICksXG4gICAgICAgICAgICBfd3JhcCA9IF9vYmouZmluZCggJy5wb3B1cF9fd3JhcCcgKSxcbiAgICAgICAgICAgIF9jb250ZW50cyA9IF9vYmouZmluZCggJy5wb3B1cF9fY29udGVudCcgKSxcbiAgICAgICAgICAgIF9zY3JvbGxDb250ZWluZXIgPSAkKCAnaHRtbCcgKSxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKSxcbiAgICAgICAgICAgIF9nbG9iYWxXaWR0aCxcbiAgICAgICAgICAgIF90aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7fSwgMSApO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfY2VudGVyV3JhcCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaWYgKCBfd2luZG93LmhlaWdodCgpIC0gKCBfcG9wdXBQYWRkaW5nICogMiApIC0gX3dyYXAuaGVpZ2h0KCkgPiAwICkge1xuICAgICAgICAgICAgICAgICAgICBfd3JhcC5jc3MoIHsgdG9wOiAoICggX3dpbmRvdy5oZWlnaHQoKSAtICggX3BvcHVwUGFkZGluZyAqIDIgKSApIC0gX3dyYXAuaGVpZ2h0KCkgKSAvIDIgfSApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF93cmFwLmNzcyggeyB0b3A6IDAgfSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZ2V0U2Nyb2xsV2lkdGggPSBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicpLFxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxCYXJXaWR0aDtcblxuICAgICAgICAgICAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSAncG9wdXBfX3Njcm9sbGJhci1tZWFzdXJlJztcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoIHNjcm9sbERpdiApO1xuXG4gICAgICAgICAgICAgICAgc2Nyb2xsQmFyV2lkdGggPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsQmFyV2lkdGg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2hpZGUgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX3Njcm9sbENvbnRlaW5lci5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdwb3B1cF9vcGVuZWQnICk7XG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ3BvcHVwX2hpZGUnICk7XG5cbiAgICAgICAgICAgICAgICBfdGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmouY3NzICh7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdhdXRvJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAncG9wdXBfaGlkZScgKTtcbiAgICAgICAgICAgICAgICB9LCAzMDAgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jZW50ZXJXcmFwKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfZ2xvYmFsV2lkdGggIT0gX3dpbmRvdy53aWR0aCgpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKSArIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX2J0blNob3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKHRoaXMpLmhhc0NsYXNzKCdjb29raWVzLWluZm9fYnRuJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2hvdyggJCggdGhpcyApLmF0dHIoICdkYXRhLXBvcHVwJyApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93KCAkKCB0aGlzICkuYXR0ciggJ2RhdGEtcG9wdXAnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF93cmFwLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiggZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYnRuQ2xvc2Uub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zaG93ID0gZnVuY3Rpb24oIGNsYXNzTmFtZSApe1xuICAgICAgICAgICAgICAgIF9zZXRQb3B1cENvbnRlbnQoIGNsYXNzTmFtZSApO1xuXG4gICAgICAgICAgICAgICAgX3Njcm9sbENvbnRlaW5lci5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiBfZ2V0U2Nyb2xsV2lkdGgoKVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAncG9wdXBfb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgIF9jZW50ZXJXcmFwKCk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0UG9wdXBDb250ZW50ID0gZnVuY3Rpb24oIGNsYXNzTmFtZSApe1xuICAgICAgICAgICAgICAgIHZhciBjdXJDb250ZW50ID0gX2NvbnRlbnRzLmZpbHRlciggJy5wb3B1cF9fJyArIGNsYXNzTmFtZSApO1xuXG4gICAgICAgICAgICAgICAgX2NvbnRlbnRzLmNzcyggeyBkaXNwbGF5OiAnbm9uZScgfSApO1xuICAgICAgICAgICAgICAgIGN1ckNvbnRlbnQuY3NzKCB7IGRpc3BsYXk6ICdibG9jaycgfSApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG59ICkoKTtcblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4oIGZ1bmN0aW9uKCl7XG5cbiAgICAkKCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcuY291bnQtcHJvZHVjdCcpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBTcGlubmVyKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgfSApO1xuXG4gICAgdmFyIFNwaW5uZXIgPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfaW5wdXQgPSBfb2JqLmZpbmQoJy5jb3VudC1wcm9kdWN0X19pbnB1dCcpLFxuICAgICAgICAgICAgX2J0blVwID0gX29iai5maW5kKCcuY291bnQtcHJvZHVjdF9hZGQnKSxcbiAgICAgICAgICAgIF9idG5Eb3duID0gX29iai5maW5kKCcuY291bnQtcHJvZHVjdF9kZWwnKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9pbnB1dC5vbigge1xuICAgICAgICAgICAgICAgICAgICBrZXlwcmVzczogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICggZXZlbnQud2hpY2ggIT0gNDYgfHwgJCggdGhpcyApLnZhbCgpLmluZGV4T2YoICcuJyApICE9IC0xICkgJiYgKCBldmVudC53aGljaCA8IDQ4IHx8IGV2ZW50LndoaWNoID4gNTcgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfaW5wdXQub24oIHtcbiAgICAgICAgICAgICAgICAgICAga2V5dXA6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9pbnB1dC52YWwoKSA9PSAnJyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dC52YWwoIDEgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfYnRuVXAub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2FkZENvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX2J0bkRvd24ub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlZHVjZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2FkZENvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUludCggX2lucHV0LnZhbCgpICk7XG5cbiAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCB2YWx1ZSArIDEgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9yZWR1Y2VDb3VudCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUludCggX2lucHV0LnZhbCgpICk7XG5cbiAgICAgICAgICAgICAgICBpZiggdmFsdWUgIT0gMSApIHtcblxuICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCB2YWx1ZSAtIDEgKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG59ICkoKTsiLCJcInVzZSBzdHJpY3RcIjtcbiggZnVuY3Rpb24oKXtcblxuICAgICQoIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAkLmVhY2goICQoJy5teS1jYXJ0X19wcm9kdWN0JyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IFByb2R1Y3RzSW5DYXJ0KCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLnByb2R1Y3Qtc2luZ2xlX19pbmZvJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IEFkZFByb2R1Y3RzVG9DYXJ0KCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgfSApO1xuXG4gICAgdmFyIFByb2R1Y3RzSW5DYXJ0ID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2lucHV0ID0gX29iai5maW5kKCcuY291bnQtcHJvZHVjdF9faW5wdXQnKSxcbiAgICAgICAgICAgIF9idG5DaGFuZ2VDb3VudCA9IF9vYmouZmluZCgnLmNvdW50LXByb2R1Y3RfX2J0bicpLFxuICAgICAgICAgICAgX2J0blJlbW92ZVByb2R1Y3QgPSBfb2JqLmZpbmQoJy5teS1jYXJ0X19yZW1vdmUnKSxcbiAgICAgICAgICAgIF9yZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgICAgICBfY2FydCA9ICQoJy5jYXJ0JyksXG4gICAgICAgICAgICBfdG90YWxQcmljZSA9ICQoJy5teS1jYXJ0X190b3RhbCcpLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfaW5wdXQub24oIHtcbiAgICAgICAgICAgICAgICAgICAga2V5cHJlc3M6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhKCggZXZlbnQud2hpY2ggIT0gNDYgfHwgJCggdGhpcyApLnZhbCgpLmluZGV4T2YoICcuJyApICE9IC0xICkgJiYgKCBldmVudC53aGljaCA8IDQ4IHx8IGV2ZW50LndoaWNoID4gNTcgKSkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVxdWVzdENvdW50Q2hhbmdlKCAkKHRoaXMpLnBhcmVudHMoJy5teS1jYXJ0X19wcm9kdWN0JykgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfYnRuQ2hhbmdlQ291bnQub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb3VudENoYW5nZSggJCh0aGlzKS5wYXJlbnRzKCcubXktY2FydF9fcHJvZHVjdCcpICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9idG5SZW1vdmVQcm9kdWN0Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0UHJvZHVjdFJlbW92ZSggJCh0aGlzKS5wYXJlbnRzKCcubXktY2FydF9fcHJvZHVjdCcpICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3JlbW92ZVByb2R1Y3QgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuICAgICAgICAgICAgICAgIGVsZW0uYWRkQ2xhc3MoJ2hpZGRlbicpO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZWxlbS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIH0sIDUwMCApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3JlcXVlc3RQcm9kdWN0UmVtb3ZlID0gZnVuY3Rpb24gKCBlbGVtICkge1xuXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2JvZHknKS5hdHRyKCdkYXRhLWFjdGlvbicpLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZWxlbS5hdHRyKCdkYXRhLWlkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFnOiAncmVtb3ZlJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAobSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVtb3ZlUHJvZHVjdCggZWxlbSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggcGFyc2VJbnQobS5jYXJ0Q291bnRQcm9kdWN0cykgPT0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jYXJ0LmZpbmQoJ2RpdicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jYXJ0LnJlbW92ZUNsYXNzKCdjYXJ0X2ZpbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZV9faGVhZGVyJykucmVtb3ZlQ2xhc3MoJ3NpdGVfX2hlYWRlcl9maWxsLWNhcnQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jYXJ0LmZpbmQoJ2RpdicpLmh0bWwoIG0uY2FydENvdW50UHJvZHVjdHMgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RvdGFsUHJpY2UuZmluZCgnc3BhbicpLmh0bWwoIG0uc3VidG90YWwgKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKFhNTEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRVJST1IhISFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfcmVxdWVzdENvdW50Q2hhbmdlID0gZnVuY3Rpb24gKCBlbGVtICkge1xuXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2JvZHknKS5hdHRyKCdkYXRhLWFjdGlvbicpLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZWxlbS5hdHRyKCdkYXRhLWlkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudFByb2R1Y3Q6IGVsZW0uZmluZCgnLmNvdW50LXByb2R1Y3RfX2lucHV0JykudmFsKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFnOiAnY2hhbmdlQ291bnQnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChtKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uZmluZCgnLm15LWNhcnRfX3RvdGFsLXByaWNlJykuaHRtbCggbS50b3RhbCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RvdGFsUHJpY2UuZmluZCgnc3BhbicpLmh0bWwoIG0uc3VidG90YWwgKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKFhNTEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRVJST1IhISFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfb2JqLmVhY2goIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gY3VySXRlbS5maW5kKCc+ZGl2Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5oZWlnaHQoIGNoaWxkcmVuLm91dGVySGVpZ2h0KHRydWUpICk7XG5cbiAgICAgICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIEFkZFByb2R1Y3RzVG9DYXJ0ID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2lucHV0ID0gX29iai5maW5kKCcuY291bnQtcHJvZHVjdF9faW5wdXQnKSxcbiAgICAgICAgICAgIF9wcmljZSA9IF9vYmouZmluZCgnLnByb2R1Y3Qtc2luZ2xlX19wcmljZScpLFxuICAgICAgICAgICAgX2FkZFRvQ2FydEJ0biA9IF9vYmouZmluZCgnLnByb2R1Y3Qtc2luZ2xlX19hZGQnKSxcbiAgICAgICAgICAgIF9yZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgICAgICBfY2FydCA9ICQoJy5jYXJ0JyksXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX2FkZFRvQ2FydEJ0bi5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCBldmVudCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICEoIF9hZGRUb0NhcnRCdG4uaGFzQ2xhc3MoJ2FkZGluZycpICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVxdWVzdFByb2R1Y3RBZGRUb0NhcnQoIGV2ZW50LCAkKHRoaXMpLnBhcmVudHMoJy5wcm9kdWN0LXNpbmdsZV9faW5mbycpICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZFRvQ2FydEJ0bi5hZGRDbGFzcygnYWRkaW5nJylcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hbmltYXRlZEFkZGluZyA9IGZ1bmN0aW9uKCBldmVudCwgZWxlbSApIHtcblxuICAgICAgICAgICAgICAgIHZhciBwaWMgPSBlbGVtLmRhdGEoJ2ltYWdlJyksXG5cbiAgICAgICAgICAgICAgICBlID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhZ2VYID0gZS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgcGFnZVkgPSBlLnBhZ2VZO1xuXG4gICAgICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZCgnPGRpdiBjbGFzcz1cInNpdGVfX3Byb2R1Y3QgaGlkZGVuXCI+PGltZyBzcmM9XCInKyBwaWMgKydcIiBhbHQ9XCJcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAkKCcuc2l0ZV9fcHJvZHVjdCcpLmNzcygge1xuICAgICAgICAgICAgICAgICAgICB0b3A6ICQoJy5nYWxsZXJ5X190b3AnKS5vZmZzZXQoKS50b3AgKyAkKCcuZ2FsbGVyeV9fdG9wJykuaW5uZXJIZWlnaHQoKS8yIC0gJCgnLnNpdGVfX3Byb2R1Y3QnKS5oZWlnaHQoKS8yICxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJCgnLmdhbGxlcnlfX3RvcCcpLm9mZnNldCgpLmxlZnQgKyAkKCcuZ2FsbGVyeV9fdG9wJykuaW5uZXJXaWR0aCgpLzIgLSAkKCcuc2l0ZV9fcHJvZHVjdCcpLndpZHRoKCkvMlxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19wcm9kdWN0JykuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLnNpdGVfX3Byb2R1Y3QnKS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogX2NhcnQub2Zmc2V0KCkudG9wICsgX2NhcnQuaW5uZXJIZWlnaHQoKS8yIC0gJCgnLnNpdGVfX3Byb2R1Y3QnKS5oZWlnaHQoKS8yICxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF9jYXJ0Lm9mZnNldCgpLmxlZnQgKyBfY2FydC5pbm5lcldpZHRoKCkvMiAtICQoJy5zaXRlX19wcm9kdWN0Jykud2lkdGgoKS8yXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIH0sIDEwMCApO1xuXG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZV9fcHJvZHVjdCcpLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XG5cbiAgICAgICAgICAgICAgICB9LCA1MDAgKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19wcm9kdWN0JykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIF9hZGRUb0NhcnRCdG4ucmVtb3ZlQ2xhc3MoJ2FkZGluZycpO1xuXG4gICAgICAgICAgICAgICAgfSwgNzAwICk7XG5cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbmZvQWRkaW5nID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbVRleHQgPSAnJztcblxuICAgICAgICAgICAgICAgIGlmKCBwYXJzZUludCggX2lucHV0LnZhbCgpICkgPT0gMSApIHtcblxuICAgICAgICAgICAgICAgICAgICBpdGVtVGV4dCA9ICcgaXRlbSc7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1UZXh0ID0gJyBpdGVtcyc7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkKCcucHJvZHVjdC1zaW5nbGUnKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJwcm9kdWN0LXNpbmdsZV9faW5mby1tZXNzYWdlIGhpZGRlblwiPicrIF9pbnB1dC52YWwoKSArIGl0ZW1UZXh0ICsnIGFkZGVkIHRvIGNhcnQ8L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAkKCcucHJvZHVjdC1zaW5nbGVfX2luZm8tbWVzc2FnZSAnKS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBfYWRkVG9DYXJ0QnRuLm9mZnNldCgpLnRvcCArIF9hZGRUb0NhcnRCdG4uaW5uZXJIZWlnaHQoKSArIDEwLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfYWRkVG9DYXJ0QnRuLm9mZnNldCgpLmxlZnRcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAkKCcucHJvZHVjdC1zaW5nbGVfX2luZm8tbWVzc2FnZScpLmFkZENsYXNzKCd2aXNpYmxlJyk7XG5cbiAgICAgICAgICAgICAgICB9LCAyMDAgKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICQoJy5wcm9kdWN0LXNpbmdsZV9faW5mby1tZXNzYWdlJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIF9hZGRUb0NhcnRCdG4ucmVtb3ZlQ2xhc3MoJ2FkZGluZycpO1xuXG4gICAgICAgICAgICAgICAgfSwgMzAwMCApO1xuXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfcmVxdWVzdFByb2R1Y3RBZGRUb0NhcnQgPSBmdW5jdGlvbiAoIGV2ZW50LCBlbGVtICkge1xuXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2JvZHknKS5hdHRyKCdkYXRhLWFjdGlvbicpLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZWxlbS5hdHRyKCdkYXRhLWlkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudFByb2R1Y3Q6IF9pbnB1dC52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlOiBfcHJpY2UudGV4dCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmxhZzogJ2FkZFRvQ2FydCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJnZXRcIixcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKG0pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHBhcnNlSW50KG0uY2FydENvdW50UHJvZHVjdHMpICE9IHBhcnNlSW50KF9jYXJ0LmZpbmQoJ2RpdicpLnRleHQoKSkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggISggX2NhcnQuaGFzQ2xhc3MoJ2NhcnRfZmlsbCcpICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FuaW1hdGVkQWRkaW5nKCBldmVudCwgZWxlbSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2FydC5hcHBlbmQoJzxkaXY+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2FydC5hZGRDbGFzcygnY2FydF9maWxsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZV9faGVhZGVyJykuYWRkQ2xhc3MoJ3NpdGVfX2hlYWRlcl9maWxsLWNhcnQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2FydC5maW5kKCdkaXYnKS5odG1sKG0uY2FydENvdW50UHJvZHVjdHMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA2MDAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW5mb0FkZGluZygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChYTUxIdHRwUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBYTUxIdHRwUmVxdWVzdC5zdGF0dXNUZXh0ICE9IFwiYWJvcnRcIiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVSUk9SISEhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpOyJdfQ==
