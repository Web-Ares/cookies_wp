"use strict";!function(){$(function(){$.each($(".site_index .logo"),function(){new t($(this))})});var t=function(t){var o=this,n=t,i=$(window),c=$("html, body"),s=function(){n.on({click:function(){return i.width()>=1024?(c.stop(!0,!1),c.animate({scrollTop:$(".site").offset().top-91},300)):(c.stop(!0,!1),c.animate({scrollTop:$(".site").offset().top-64},300)),!1}})},e=function(){n[0].obj=o,s()};e()}}();
"use strict";!function(){var e=!0;$(function(){new i($(".preloader")),$.each($(".site__header"),function(){new n($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new s($(this))}),$.each($(".site__content-full"),function(){new o($(this))})});var i=function(e){var i=this,n=$(window),t=e,s=$("body"),o=function(){n.on({load:function(){d()}})},a=function(){s[0].preloader=i,o()},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$(".site").addClass("site__loaded")},500)};a()},n=function(i){var n=this,t=i,s=$(window),o=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),r=!1,c=!0,h=0,l=t.find(".site__menu-btn"),u=0,f=function(){s.on({load:function(){u=s.width()},resize:function(){u!=s.width()&&(u=s.width()+1,s.width()>=1024&&(a.scrollTop(0),v(l)))},scroll:function(){d=s.scrollTop()>=2*t.innerHeight(),s.scrollTop()>=t.innerHeight()+20?c&&(c=!1,t.addClass("site__header_hide")):(c=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):s.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),s.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;_(n)}n<0?r=!0:setTimeout(function(){r=!1},300)},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;_(n)}n<0?r=!0:setTimeout(function(){r=!1},300)}}),$(window).scroll(function(e){var i=$(this).scrollTop();if(i>h){_(1);var n=1}else{_(-1);var n=-1}h=i,n<0?r=!0:setTimeout(function(){r=!1},300)}),l.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(i){i>0&&!t.hasClass("site__header_hidden")&&!l.hasClass("opened")&&d&&!r&&t.addClass("site__header_hidden"),i<0&&t.hasClass("site__header_hidden")&&!l.hasClass("opened")&&d&&r&&e&&t.removeClass("site__header_hidden")},v=function(e){o.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=n,f()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),o.css({overflowY:"hidden"})};m()},t=function(i){var n=this,t=i,s=t,o=$("html"),a=$(window),d=$("html, body"),r=$(".site__header"),c=($(".popup__cookies-info"),function(){a.on({resize:function(){},scroll:function(){}}),s.on({click:function(){var i=$(this),n=i.attr("data-href"),t=$("."+n).offset().top-r.innerHeight();return s.removeClass("active"),i.addClass("active"),t=$("."+n).offset().top,d.stop(!0,!1),d.animate({scrollTop:t},{duration:500,progress:function(){e=!1,r.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),o.css({overflowY:"auto"}),r.find(".site__menu-btn").removeClass("opened"),r.removeClass("opened-menu"),!1}})}),h=function(){t[0].obj=n,c()};h()},s=function(e){var i=this,n=e,t=$(window),s=function(){t.on({scroll:function(){o()}})},o=function(){var e=t.scrollTop(),i=t.height(),s=n.offset().top,o=s-e,a=1-o/i;a>.5&&(n.hasClass("slides_active")||n.addClass("slides_active"))},a=function(){n[0].slides=i,s(),o()};a()},o=function(e){var i=this,n=e,t=$(window),s=$(".site__header"),o=0,a=function(){t.on({load:function(){o=t.width(),r()},resize:function(){o!=t.width()&&(o=t.width()+1,r())}})},d=function(){n[0].obj=i,a()},r=function(){var e=t.height();n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)}),n.find(".contact-us").length&&t.width()>=1024?n.css({"min-height":""}):n.css({"min-height":e-s.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()}}();
"use strict";!function(){$(function(){$.each($(".hero"),function(){new i($(this))})});var i=function(i){var t=this,n=i,s=$(window),o=$(".site__header"),e=0,c=null,h=$("html, body"),r=n.find(".hero__down"),f=function(){s.on({load:function(){e=s.width(),d()},resize:function(){e!=s.width()&&(e=s.width()+1,d())}}),r.on({click:function(){return s.width()>=1024?(h.stop(!0,!1),h.animate({scrollTop:$(".our-cookies").offset().top-91},300)):(h.stop(!0,!1),h.animate({scrollTop:$(".our-cookies").offset().top-64},300)),!1}})},l=function(){n[0].obj=t,f(),a()},a=function(){c=n.find(".slick-container").slick({dots:!0,autoplay:!0,autoplaySpeed:5e3,arrows:!1})},d=function(){var i=s.height();s.width()>=1024?i-o.innerHeight()>parseInt(n.css("min-height"))?n.find(".slick-list").css({height:i-o.innerHeight()}):n.find(".slick-list").css({height:parseInt(n.css("min-height"))}):i>parseInt(n.css("min-height"))?n.find(".slick-list").css({height:i}):n.find(".slick-list").css({height:parseInt(n.css("min-height"))})};l()}}();
"use strict";!function(){$(function(){$.each($(".our-cookies"),function(){new n($(this))})});var n=function(n){var i=this,o=n,t=function(){o[0].obj=i,c()},c=function(){o.find(".slick-container").slick({dots:!0,autoplay:!0,autoplaySpeed:5e3})};t()}}();
"use strict";!function(){$(function(){$.each($(".real-stuff"),function(){new t($(this))}),$.each($(".real-stuff__products"),function(){new e($(this))})});var t=function(t){var e=this,n=t,o=$(window),i=0,s=n.find(".real-stuff__ingredients-list"),f=$("html, body"),d=n.find(".btn"),a=function(){o.on({load:function(){i=o.width()},resize:function(){i!=o.width()&&(i=o.width()+1,r(d,d.data("close")))}}),d.on({click:function(){var t=$(this),e=t.data("open"),n=t.data("close");return t.hasClass("opened")?r(t,n):c(t,e),!1}})},r=function(t,e){t.removeClass("opened"),t.text(e),s.css({height:0}),f.stop(!0,!1),f.animate({scrollTop:$(".real-stuff").offset().top-40-$(".site__header").innerHeight()},300)},c=function(t,e){t.addClass("opened"),t.text(e),s.css({height:s.find(">div").innerHeight()}),f.stop(!0,!1),f.animate({scrollTop:s.offset().top-40-$(".site__header").innerHeight()},300)},l=function(){n[0].obj=e,a()};l()},e=function(t){var e=this,n=t,o=$(".site__header"),i=15,s=5,f=6,d=7,a=$(window),r=0,c=$("html, body"),l=n.find(".real-stuff__description-content"),p=n.find(".real-stuff__description-btn"),u=function(){p.on({click:function(){if(a.width()>=1024){var t=$(this),e=t.next(),n=t.parent();return t.hasClass("opened")?_(t,n,e):h(t,n,e),!1}}}),a.on({load:function(){r=a.width()},resize:function(){a.width()>=1024?m():r!=a.width()&&(r=a.width()+1,_(p,n,l))}}),$(document).on("click",".real-stuff__description-content",function(t){t=t||window.event,t.stopPropagation?t.stopPropagation():t.cancelBubble=!0}),$(document).on("click","body",function(){_(p,n,l),$(".real-stuff__description").removeClass("opened")}),$(document).on("mousemove","body",function(t){t=t||window.event;var e=$(this),r=(e.find(".real-stuff__products-img"),e.find(".real-stuff__description_1:not(.opened)")),c=e.find(".real-stuff__description_2:not(.opened)"),l=e.find(".real-stuff__description_3:not(.opened)"),p=e.find(".real-stuff__description_4:not(.opened)"),u=e.find(".real-stuff__description_5:not(.opened)"),_=e.find(".real-stuff__description_6:not(.opened)");if(a.width()>1024&&!o.hasClass("opened")){var h=t.clientX,m=t.clientY,C=n.width()/2,g=n.height()/2,b=(h-C)/C,x=(m-g)/g;a.outerWidth()>1024&&(v(b,x,s,r),w(b,x,f,c),v(b,x,d,l),w(b,x,s,p),w(b,x,i,u),w(b,x,d,_))}})},_=function(t,e,n){t.removeClass("opened"),e.removeClass("opened")},h=function(t,e,n){p.removeClass("opened"),$(".real-stuff__description").removeClass("opened"),t.addClass("opened"),e.addClass("opened"),c.stop(!0,!1),c.animate({scrollTop:n.offset().top-40-$(".site__header").innerHeight()},300)},m=function(){l.each(function(){var t=$(this);t.offset().left+t.innerWidth()>=a.width()?t.addClass("right_pos"):t.removeClass("right_pos"),t.offset().left<=0?t.addClass("left_pos"):t.removeClass("left_pos")})},w=function(t,e,n,o){o.css({"-webkit-transform":"translate( "+-(t*n)+"px,"+-(e*n)+"px )",transform:"translate( "+-(t*n)+"px, "+-(e*n)+"px  )"})},v=function(t,e,n,o){o.css({"-webkit-transform":"translate( "+t*n+"px ,"+e*n+"px  )",transform:"translate( "+t*n+"px , "+e*n+"px  )"})},C=function(){n[0].obj=e,u(),m()};C()}}();
"use strict";!function(){$(function(){$.each($(".cookies-info_btn"),function(){new i($(this))})});var i=function(i){var n=this,o=i,t=$(window),c=$(".popup__cookies-info"),f=function(){t.on({resize:function(){t.width()<1024}}),o.on({click:function(){if(t.width()<1024){var i=$(this),n=i.find(".cookies-info__title"),o=i.find(".cookies-info__text");c.find(".site__main-title").html(n.html()),c.find(".cookies-info__description").html(o.html())}}})},e=function(){o[0].obj=n,f()};e()}}();
"use strict";!function(){$(function(){$.each($(".products-cookies__items"),function(){new i($(this))}),$.each($(".shop"),function(){new n($(this))})});var i=function(i){var n,t=this,o=i,c=$(window),s=!1,e=function(){c.on({resize:function(){c.width()<768?s||(u(),s=!0):s&&(h(),s=!1)}})},u=function(){n=o.find(".slick-container").slick({dots:!1})},h=function(){n.slick("unslick")},f=function(){o[0].obj=t,e(),c.width()<768&&(s||(u(),s=!0))};f()},n=function(i){var n=this,t=i,o=$(window),c=$(".site__header"),s=0,e=function(){o.on({load:function(){s=o.width(),h()},resize:function(){s!=o.width()&&(s=o.width()+1,h())}})},u=function(){t[0].obj=n,e()},h=function(){var i=o.height();t.css({"min-height":i-c.innerHeight()-parseInt(t.css("padding-bottom"))-parseInt(t.css("padding-top"))-$(".site__main-title").outerHeight(!0)})};u()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},l=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},r=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"scroll"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,r())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return r(),!1}}),c.on({click:function(){return r(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:l()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),p=$('<span class="websters-select__item"></span>'),d=$('<div class="websters-select"></div>'),r=$(window),f=($("body"),!1),u=function(){var e="";o.css({opacity:0}),o.wrap(d),d=o.parent(),d.append('<div class="websters-select__arrow"></div>'),o.before(p),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),p.text(e)},h=function(){f=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),d.removeClass("websters-select_opened")},v=function(){o[0].obj=i,u(),w(),b()},b=function(){o.on("change",function(){p.text($(this).find("option:selected").text())}),1!=s||l||(d.on({click:function(e){e.stopPropagation(),f?h():y()}}),r.on({click:function(){f&&h()}}))},w=function(){!s||l?_():1==s&&g()},g=function(){d.addClass("websters-select_custom")},_=function(){d.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),d.offset(),0),l=o.find("option:selected").index(),p=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),f&&t.remove(),f=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+p+'"></div>'),o.find("option").each(function(e){var t=$(this);e==l?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),d.append(t),d.addClass("websters-select_opened"),s=t.outerHeight(),s>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),h()}})};i.checkOpened=function(){return f},i.close=function(){h()},v()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
