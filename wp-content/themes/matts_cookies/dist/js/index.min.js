"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__header"),function(){new o($(this))}),$.each($(".site__menu-nav_anchors"),function(){new s($(this))}),$.each($(".slides"),function(){new i($(this))})});var e=function(e){var o=this,s=$(window),i=e,n=$("body"),t=function(){s.on({load:function(){d()}})},a=function(){n[0].preloader=o,t()},d=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},o=function(e){var o=this,s=e,i=$(window),n=$("html"),t=s.find(".site__menu"),a=($(".site__content"),!1),d=!1,l=!0,r=0,c=s.find(".site__menu-btn"),f=0,h=function(){i.on({load:function(){f=i.width()},resize:function(){f!=i.width()&&(f=i.width()+1,i.width()>=1024&&(t.scrollTop(0),_(c)))},scroll:function(){a=i.scrollTop()>=2*s.innerHeight(),i.scrollTop()>=s.innerHeight()?l&&(l=!1,s.addClass("site__header_hide")):(l=!0,s.removeClass("site__header_hide")),a?s.hasClass("site__header_hide")&&setTimeout(function(){s.addClass("site__header_fixed"),s.removeClass("site__header_hide")},100):i.scrollTop()<=3*s.innerHeight()&&s.removeClass("site__header_fixed")},DOMMouseScroll:function(e){var o=e.originalEvent.detail;if(o){var s=o>0?1:-1;u(s)}s<0?d=!0:setTimeout(function(){d=!1},300)},mousewheel:function(e){var o=e.originalEvent.wheelDelta;if(o){var s=o>0?-1:1;u(s)}s<0?d=!0:setTimeout(function(){d=!1},300)}}),$(window).scroll(function(e){var o=$(this).scrollTop();if(o>r){u(1);var s=1}else{u(-1);var s=-1}r=o,s<0?d=!0:setTimeout(function(){d=!1},300)}),c.on({click:function(){$(this).hasClass("opened")?_($(this)):p($(this))}})},u=function(e){e>0&&!s.hasClass("site__header_hidden")&&!c.hasClass("opened")&&a&&!d&&s.addClass("site__header_hidden"),e<0&&s.hasClass("site__header_hidden")&&!c.hasClass("opened")&&a&&d&&s.removeClass("site__header_hidden")},_=function(e){n.css({overflowY:"auto"}),e.removeClass("opened"),s.removeClass("opened-menu")},v=function(){s[0].obj=o,h()},p=function(e){e.addClass("opened"),s.addClass("opened-menu"),n.css({overflowY:"hidden"})};v()},s=function(e){var o=this,s=e,i=s.find(".site__menu-link"),n=$("html"),t=$(window),a=$("html, body"),d=$(".site__header"),l=($(".popup__cookies-info"),function(){t.on({resize:function(){r()},scroll:function(){r()}}),i.on({click:function(){var e=$(this),o=e.attr("data-href"),s=$("."+o).offset().top-d.innerHeight();return i.removeClass("active"),e.addClass("active"),s=t.width()>=1024?$("."+o).offset().top-91:$("."+o).offset().top-64,a.stop(!0,!1),a.animate({scrollTop:s},300),n.css({overflowY:"auto"}),d.find(".site__menu-btn").removeClass("opened"),d.removeClass("opened-menu"),!1}})}),r=function(){for(var e=$(window).scrollTop(),o=$("body").find('[data-scroll="scroll"]'),s=(o.offset().top,0);s<o.length;s++){var n=$(o[s]),t=$(o[s]).offset().top-d.outerHeight(!0),a=$(o[s]).outerHeight(!0);if(e>t){var l=n.attr("class").split(" "),r=i.filter("[data-href="+l[0]+"]");i.removeClass("active"),r.addClass("active")}e>t+a&&i.removeClass("active")}},c=function(){s[0].obj=o,l(),r()};c()},i=function(e){var o=this,s=e,i=$(window),n=function(){i.on({scroll:function(){t()}})},t=function(){var e=i.scrollTop(),o=i.height(),n=s.offset().top,t=n-e,a=1-t/o;a>.5&&(s.hasClass("slides_active")||s.addClass("slides_active"))},a=function(){s[0].slides=o,n(),t()};a()}}();
"use strict";!function(){$(function(){$.each($(".hero"),function(){new i($(this))})});var i=function(i){var o=this,t=i,n=$(window),c=$(".site__header"),e=0,s=null,f=$("html, body"),h=t.find(".hero__down"),r=function(){n.on({load:function(){e=n.width()},resize:function(){e!=n.width()&&(e=n.width()+1,a())}}),h.on({click:function(){return n.width()>=1024?(f.stop(!0,!1),f.animate({scrollTop:$(".our-cookies").offset().top-91},300)):(f.stop(!0,!1),f.animate({scrollTop:$(".our-cookies").offset().top-64},300)),!1}})},u=function(){t[0].obj=o,r(),l(),a()},l=function(){s=t.find(".slick-container").slick({dots:!0,autoplay:!0,autoplaySpeed:5e3,arrows:!1})},a=function(){var i=n.height();n.width()>=1024?t.find(".slick-list").css({height:i-c.innerHeight()}):t.find(".slick-list").css({height:i})};u()}}();
"use strict";!function(){$(function(){$.each($(".our-cookies"),function(){new n($(this))})});var n=function(n){var i=this,o=n,t=function(){o[0].obj=i,c()},c=function(){o.find(".slick-container").slick({dots:!0,autoplay:!0,autoplaySpeed:5e3})};t()}}();
"use strict";!function(){$(function(){$.each($(".real-stuff"),function(){new t($(this))}),$.each($(".real-stuff__products"),function(){new e($(this))})});var t=function(t){var e=this,n=t,o=$(window),i=0,s=n.find(".real-stuff__ingredients-list"),f=$("html, body"),d=n.find(".btn"),a=function(){o.on({load:function(){i=o.width()},resize:function(){i!=o.width()&&(i=o.width()+1,r(d,d.data("close")))}}),d.on({click:function(){var t=$(this),e=t.data("open"),n=t.data("close");return t.hasClass("opened")?r(t,n):c(t,e),!1}})},r=function(t,e){t.removeClass("opened"),t.text(e),s.css({height:0}),f.stop(!0,!1),f.animate({scrollTop:$(".real-stuff").offset().top-40-$(".site__header").innerHeight()},300)},c=function(t,e){t.addClass("opened"),t.text(e),s.css({height:s.find(">div").innerHeight()}),f.stop(!0,!1),f.animate({scrollTop:s.offset().top-40-$(".site__header").innerHeight()},300)},l=function(){n[0].obj=e,a()};l()},e=function(t){var e=this,n=t,o=$(".site__header"),i=15,s=5,f=6,d=7,a=$(window),r=0,c=$("html, body"),l=n.find(".real-stuff__description-content"),p=n.find(".real-stuff__description-btn"),u=function(){p.on({click:function(){if(a.width()>=1024){var t=$(this),e=t.next(),n=t.parent();return t.hasClass("opened")?_(t,n,e):h(t,n,e),!1}}}),a.on({load:function(){r=a.width()},resize:function(){a.width()>=1024?m():r!=a.width()&&(r=a.width()+1,_(p,n,l))}}),$(document).on("click",".real-stuff__description-content",function(t){t=t||window.event,t.stopPropagation?t.stopPropagation():t.cancelBubble=!0}),$(document).on("click","body",function(){_(p,n,l),$(".real-stuff__description").removeClass("opened")}),$(document).on("mousemove","body",function(t){t=t||window.event;var e=$(this),r=(e.find(".real-stuff__products-img"),e.find(".real-stuff__description_1:not(.opened)")),c=e.find(".real-stuff__description_2:not(.opened)"),l=e.find(".real-stuff__description_3:not(.opened)"),p=e.find(".real-stuff__description_4:not(.opened)"),u=e.find(".real-stuff__description_5:not(.opened)"),_=e.find(".real-stuff__description_6:not(.opened)");if(a.width()>1024&&!o.hasClass("opened")){var h=t.clientX,m=t.clientY,C=n.width()/2,g=n.height()/2,b=(h-C)/C,x=(m-g)/g;a.outerWidth()>1024&&(v(b,x,s,r),w(b,x,f,c),v(b,x,d,l),w(b,x,s,p),w(b,x,i,u),w(b,x,d,_))}})},_=function(t,e,n){t.removeClass("opened"),e.removeClass("opened")},h=function(t,e,n){p.removeClass("opened"),$(".real-stuff__description").removeClass("opened"),t.addClass("opened"),e.addClass("opened"),c.stop(!0,!1),c.animate({scrollTop:n.offset().top-40-$(".site__header").innerHeight()},300)},m=function(){l.each(function(){var t=$(this);t.offset().left+t.innerWidth()>=a.width()?t.addClass("right_pos"):t.removeClass("right_pos"),t.offset().left<=0?t.addClass("left_pos"):t.removeClass("left_pos")})},w=function(t,e,n,o){o.css({"-webkit-transform":"translate( "+-(t*n)+"px,"+-(e*n)+"px )",transform:"translate( "+-(t*n)+"px, "+-(e*n)+"px  )"})},v=function(t,e,n,o){o.css({"-webkit-transform":"translate( "+t*n+"px ,"+e*n+"px  )",transform:"translate( "+t*n+"px , "+e*n+"px  )"})},C=function(){n[0].obj=e,u(),m()};C()}}();
"use strict";!function(){$(function(){$.each($(".cookies-info_btn"),function(){new i($(this))})});var i=function(i){var n=this,o=i,t=$(window),c=$(".popup__cookies-info"),f=function(){t.on({resize:function(){t.width()<1024}}),o.on({click:function(){if(t.width()<1024){var i=$(this),n=i.find(".cookies-info__title"),o=i.find(".cookies-info__text");c.find(".site__main-title").html(n.html()),c.find(".cookies-info__description").html(o.html())}}})},e=function(){o[0].obj=n,f()};e()}}();
"use strict";!function(){$(function(){$.each($(".products-cookies__items"),function(){new i($(this))}),$.each($(".shop"),function(){new n($(this))})});var i=function(i){var n,t=this,o=i,c=$(window),s=!1,e=function(){c.on({resize:function(){c.width()<768?s||(u(),s=!0):s&&(h(),s=!1)}})},u=function(){n=o.find(".slick-container").slick({dots:!1})},h=function(){n.slick("unslick")},f=function(){o[0].obj=t,e(),c.width()<768&&(s||(u(),s=!0))};f()},n=function(i){var n=this,t=i,o=$(window),c=$(".site__header"),s=0,e=function(){o.on({load:function(){s=o.width(),h()},resize:function(){s!=o.width()&&(s=o.width()+1,h())}})},u=function(){t[0].obj=n,e()},h=function(){var i=o.height();t.css({"min-height":i-c.innerHeight()-parseInt(t.css("padding-bottom"))-parseInt(t.css("padding-top"))-$(".site__main-title").outerHeight(!0)})};u()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,l())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),c.on({click:function(){return l(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),p=$('<span class="websters-select__item"></span>'),d=$('<div class="websters-select"></div>'),r=$(window),f=($("body"),!1),u=function(){var e="";o.css({opacity:0}),o.wrap(d),d=o.parent(),d.append('<div class="websters-select__arrow"></div>'),o.before(p),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),p.text(e)},h=function(){f=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),d.removeClass("websters-select_opened")},v=function(){o[0].obj=i,u(),w(),b()},b=function(){o.on("change",function(){p.text($(this).find("option:selected").text())}),1!=s||l||(d.on({click:function(e){e.stopPropagation(),f?h():y()}}),r.on({click:function(){f&&h()}}))},w=function(){!s||l?_():1==s&&g()},g=function(){d.addClass("websters-select_custom")},_=function(){d.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),d.offset(),0),l=o.find("option:selected").index(),p=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),f&&t.remove(),f=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+p+'"></div>'),o.find("option").each(function(e){var t=$(this);e==l?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),d.append(t),d.addClass("websters-select_opened"),s=t.outerHeight(),s>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),h()}})};i.checkOpened=function(){return f},i.close=function(){h()},v()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
