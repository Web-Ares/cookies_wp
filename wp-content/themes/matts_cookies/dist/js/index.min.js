"use strict";!function(){$(function(){$.each($(".site_index .logo"),function(){new t($(this))}),$("#wpsl-stores ").perfectScrollbar()});var t=function(t){var o=this,n=t,i=$(window),s=$("html, body"),c=function(){n.on({click:function(){return i.width()>=1024?(s.stop(!0,!1),s.animate({scrollTop:$(".site").offset().top-91},300)):(s.stop(!0,!1),s.animate({scrollTop:$(".site").offset().top-64},300)),!1}})},e=function(){n[0].obj=o,c()};e()}}();
"use strict";!function(){var e=!0;$(function(){new n($(".preloader")),$.each($(".site__header"),function(){new i($(this))}),$.each($("[data-href]"),function(){new t($(this))}),$.each($(".slides"),function(){new o($(this))}),$.each($(".site__content-full"),function(){new s($(this))}),$.each($(".site_index"),function(){new a($(this))})});var n=function(e){var n=this,i=$(window),t=e,o=$("body"),s=function(){i.on({load:function(){d()}})},a=function(){o[0].preloader=n,s()},d=function(){t.addClass("preloader_loaded"),setTimeout(function(){t.remove(),$(".site").addClass("site__loaded")},500)};a()},i=function(n){var i=this,t=n,o=$(window),s=$("html"),a=t.find(".site__menu"),d=($(".site__content"),!1),c=!1,l=!0,r=0,h=t.find(".site__menu-btn"),u=0,f=function(){o.on({load:function(){u=o.width()},resize:function(){u!=o.width()&&(u=o.width()+1,o.width()>=1024&&(a.scrollTop(0),v(h)))},scroll:function(){d=o.scrollTop()>=2*t.innerHeight(),o.scrollTop()>=t.innerHeight()+20?l&&(l=!1,t.addClass("site__header_hide")):(l=!0,t.removeClass("site__header_hide")),d?t.hasClass("site__header_hide")&&setTimeout(function(){t.addClass("site__header_fixed"),t.removeClass("site__header_hide")},100):o.scrollTop()<=3*t.innerHeight()&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden")),o.scrollTop()<=10&&(t.removeClass("site__header_fixed"),t.removeClass("site__header_hidden"))},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;_(i)}i<0?c=!0:setTimeout(function(){c=!1},300)},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;_(i)}i<0?c=!0:setTimeout(function(){c=!1},300)}}),$(window).scroll(function(e){var n=$(this).scrollTop();if(n>r){_(1);var i=1}else{_(-1);var i=-1}r=n,i<0?c=!0:setTimeout(function(){c=!1},300)}),h.on({click:function(){$(this).hasClass("opened")?v($(this)):w($(this))}})},_=function(n){n>0&&!t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&!c&&t.addClass("site__header_hidden"),n<0&&t.hasClass("site__header_hidden")&&!h.hasClass("opened")&&d&&c&&e&&t.removeClass("site__header_hidden")},v=function(e){s.css({overflowY:"auto"}),e.removeClass("opened"),t.removeClass("opened-menu")},m=function(){t[0].obj=i,f()},w=function(e){e.addClass("opened"),t.addClass("opened-menu"),s.css({overflowY:"hidden"})};m()},t=function(n){var i=this,t=n,o=t,s=$("html"),a=$(window),d=$("html, body"),c=$(".site__header"),l=($(".popup__cookies-info"),function(){a.on({resize:function(){},scroll:function(){}}),o.on({click:function(){var n=$(this),i=n.attr("data-href"),t=$("."+i).offset().top;return $(".site__menu-nav_anchors a").removeClass("active"),n.addClass("active"),d.stop(!0,!1),d.animate({scrollTop:t},{duration:500,progress:function(){e=!1,c.addClass("site__header_hidden")},complete:function(){setTimeout(function(){e=!1},200),setTimeout(function(){e=!0},500)}}),s.css({overflowY:"auto"}),c.find(".site__menu-btn").removeClass("opened"),c.removeClass("opened-menu"),!1}})}),r=function(){t[0].obj=i,l()};r()},o=function(e){var n=this,i=e,t=$(window),o=function(){t.on({load:function(){s()},scroll:function(){s()}})},s=function(){var e=t.scrollTop(),n=t.height(),o=i.offset().top,s=o-e,a=1-s/n;a>.5&&(i.hasClass("slides_active")||i.addClass("slides_active"))},a=function(){i[0].slides=n,o()};a()},s=function(e){var n=this,i=e,t=$(window),o=$(".site__header"),s=0,a=function(){t.on({load:function(){s=t.width(),c()},resize:function(){s!=t.width()&&(s=t.width()+1,c())}})},d=function(){i[0].obj=n,a()},c=function(){var e=t.height();i.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)}),i.find(".contact-us").length&&t.width()>=1024?i.css({"min-height":""}):i.css({"min-height":e-o.innerHeight()-$(".site__main-title").outerHeight(!0)})};d()},a=function(e){var n=this,i=e,t=$(window),o=($("html, body"),function(){t.on({load:function(){setTimeout(function(){s()},100)}})}),s=function(){var e=window.location.hash.replace("#","");if(e){var n=$("."+window.location.hash.replace("#",""));n.length&&window.scrollTo(0,parseInt(n.offset().top))}},a=function(){i[0].obj=n,o()};a()}}();
"use strict";!function(){var i=!0;$(function(){$.each($(".hero"),function(){new n($(this))})});var n=function(n){var t=this,s=n,e=$(window),o=$(".site__header"),c=0,h=null,r=$("html, body"),u=s.find(".hero__down, .btn"),a=function(){e.on({load:function(){c=e.width(),l()},resize:function(){c!=e.width()&&(c=e.width()+1,l())}}),u.on({click:function(){return r.stop(!0,!1),r.animate({scrollTop:$(".our-cookies").offset().top},{duration:500,progress:function(){i=!1,o.addClass("site__header_hidden")},complete:function(){setTimeout(function(){i=!1},200),setTimeout(function(){i=!0},500)}}),!1}})},d=function(){s[0].obj=t,a(),f()},f=function(){h=s.find(".slick-container").slick({dots:!0,autoplay:!0,autoplaySpeed:5e3,arrows:!1})},l=function(){var i=e.height();e.width()>=1024?i-o.innerHeight()>parseInt(s.css("min-height"))?s.find(".slick-list").css({height:i-o.innerHeight()}):s.find(".slick-list").css({height:parseInt(s.css("min-height"))}):i>parseInt(s.css("min-height"))?s.find(".slick-list").css({height:i}):s.find(".slick-list").css({height:parseInt(s.css("min-height"))})};d()}}();
"use strict";!function(){$(function(){$.each($(".our-cookies"),function(){new n($(this))})});var n=function(n){var i=this,o=n,t=function(){o[0].obj=i,c()},c=function(){o.find(".slick-container").slick({dots:!0,autoplay:!0,autoplaySpeed:5e3})};t()}}();
"use strict";!function(){var t=!0;$(function(){$.each($(".real-stuff"),function(){new e($(this))}),$.each($(".real-stuff__products"),function(){new n($(this))})});var e=function(e){var n=this,o=e,i=$(window),s=0,d=$(".site__header"),a=o.find(".real-stuff__ingredients-list"),f=$("html, body"),r=o.find(".btn"),c=function(){i.on({load:function(){s=i.width()},resize:function(){s!=i.width()&&(s=i.width()+1,r.hasClass("opened")&&u(r,r.data("close")))}}),r.on({click:function(){var t=$(this),e=t.data("open"),n=t.data("close");return t.hasClass("opened")?u(t,n):l(t,e),!1}})},u=function(e,n){e.removeClass("opened"),e.text(n),a.css({height:0}),f.stop(!0,!1),f.animate({scrollTop:$(".real-stuff").offset().top-$(".site__header").innerHeight()},{duration:500,progress:function(){t=!1,d.addClass("site__header_hidden")},complete:function(){setTimeout(function(){t=!1},200),setTimeout(function(){t=!0},500)}})},l=function(e,n){e.addClass("opened"),e.text(n),a.css({height:a.find(">div").innerHeight()}),f.stop(!0,!1),f.animate({scrollTop:a.offset().top-$(".site__header").innerHeight()},{duration:500,progress:function(){t=!1,d.addClass("site__header_hidden")},complete:function(){setTimeout(function(){t=!1},200),setTimeout(function(){t=!0},500)}})},p=function(){o[0].obj=n,c()};p()},n=function(t){var e=this,n=t,o=$(".site__header"),i=15,s=5,d=6,a=7,f=$(window),r=0,c=$("html, body"),u=n.find(".real-stuff__description-content"),l=n.find(".real-stuff__description-btn"),p=function(){l.on({click:function(){if(f.width()>=1024){var t=$(this),e=t.next(),n=t.parent();return t.hasClass("opened")?_(t,n,e):h(t,n,e),!1}}}),f.on({load:function(){r=f.width()},resize:function(){f.width()>=1024?m():r!=f.width()&&(r=f.width()+1,_(l,n,u))}}),$(document).on("click",".real-stuff__description-content",function(t){t=t||window.event,t.stopPropagation?t.stopPropagation():t.cancelBubble=!0}),$(document).on("click","body",function(){_(l,n,u),$(".real-stuff__description").removeClass("opened")}),$(document).on("mousemove","body",function(t){t=t||window.event;var e=$(this),r=(e.find(".real-stuff__products-img"),e.find(".real-stuff__description_1:not(.opened)")),c=e.find(".real-stuff__description_2:not(.opened)"),u=e.find(".real-stuff__description_3:not(.opened)"),l=e.find(".real-stuff__description_4:not(.opened)"),p=e.find(".real-stuff__description_5:not(.opened)"),_=e.find(".real-stuff__description_6:not(.opened)");if(f.width()>1024&&!o.hasClass("opened")){var h=t.clientX,m=t.clientY,C=n.width()/2,g=n.height()/2,b=(h-C)/C,x=(m-g)/g;f.outerWidth()>1024&&(v(b,x,s,r),w(b,x,d,c),v(b,x,a,u),w(b,x,s,l),w(b,x,i,p),w(b,x,a,_))}})},_=function(t,e,n){t.removeClass("opened"),e.removeClass("opened")},h=function(t,e,n){l.removeClass("opened"),$(".real-stuff__description").removeClass("opened"),t.addClass("opened"),e.addClass("opened"),c.stop(!0,!1),c.animate({scrollTop:n.offset().top-40-$(".site__header").innerHeight()},300)},m=function(){u.each(function(){var t=$(this);t.offset().left+t.innerWidth()>=f.width()?t.addClass("right_pos"):t.removeClass("right_pos"),t.offset().left<=0?t.addClass("left_pos"):t.removeClass("left_pos")})},w=function(t,e,n,o){o.css({"-webkit-transform":"translate( "+-(t*n)+"px,"+-(e*n)+"px )",transform:"translate( "+-(t*n)+"px, "+-(e*n)+"px  )"})},v=function(t,e,n,o){o.css({"-webkit-transform":"translate( "+t*n+"px ,"+e*n+"px  )",transform:"translate( "+t*n+"px , "+e*n+"px  )"})},C=function(){n[0].obj=e,p(),m()};C()}}();
"use strict";!function(){$(function(){$.each($(".cookies-info_btn"),function(){new i($(this))})});var i=function(i){var n=this,o=i,t=$(window),c=$(".popup__cookies-info"),f=function(){o.on({click:function(){if(t.width()<1024){var i=$(this),n=i.find(".cookies-info__title"),o=i.find(".cookies-info__text");c.find(".site__main-title").html(n.html()),c.find(".cookies-info__description").html(o.html())}}})},e=function(){o[0].obj=n,f()};e()}}();
"use strict";!function(){$(function(){$.each($(".products-cookies__items"),function(){new i($(this))}),$.each($(".shop"),function(){new n($(this))})});var i=function(i){var n,t=this,o=i,c=$(window),s=!1,e=function(){c.on({resize:function(){c.width()<768?s||(u(),s=!0):s&&(h(),s=!1)}})},u=function(){n=o.find(".slick-container").slick({dots:!1})},h=function(){n.slick("unslick")},f=function(){o[0].obj=t,e(),c.width()<768&&(s||(u(),s=!0))};f()},n=function(i){var n=this,t=i,o=$(window),c=$(".site__header"),s=0,e=function(){o.on({load:function(){s=o.width(),h()},resize:function(){s!=o.width()&&(s=o.width()+1,h())}})},u=function(){t[0].obj=n,e()},h=function(){var i=o.height();t.css({"min-height":i-c.innerHeight()-parseInt(t.css("padding-bottom"))-parseInt(t.css("padding-top"))-$(".site__main-title").outerHeight(!0)})};u()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n,t=this,i=40,p=$(".popup__open"),e=o,c=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),u=e.find(".popup__content"),d=$("html"),a=$(window),h=setTimeout(function(){},1),f=function(){a.height()-2*i-s.height()>0?s.css({top:(a.height()-2*i-s.height())/2}):s.css({top:0})},l=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},r=function(){e.css({overflowY:"hidden"}),d.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),h=setTimeout(function(){e.css({overflowY:"scroll"}),e.removeClass("popup_hide")},300)},_=function(){e[0].obj=t,v()},v=function(){a.on({load:function(){n=a.width()},resize:function(){f(),a.width()>=1024&&n!=a.width()&&(n=a.width()+1,r())}}),p.on({click:function(){return $(this).hasClass("cookies-info_btn")?a.width()<1024?(w($(this).attr("data-popup")),!1):void 0:(w($(this).attr("data-popup")),!1)}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return r(),!1}}),c.on({click:function(){return r(),!1}})},w=function(o){m(o),d.css({overflowY:"hidden",paddingRight:l()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};_()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),p=$('<span class="websters-select__item"></span>'),d=$('<div class="websters-select"></div>'),r=$(window),f=($("body"),!1),u=function(){var e="";o.css({opacity:0}),o.wrap(d),d=o.parent(),d.append('<div class="websters-select__arrow"></div>'),o.before(p),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),p.text(e)},h=function(){f=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),d.removeClass("websters-select_opened")},v=function(){o[0].obj=i,u(),w(),b()},b=function(){o.on("change",function(){p.text($(this).find("option:selected").text())}),1!=s||l||(d.on({click:function(e){e.stopPropagation(),f?h():y()}}),r.on({click:function(){f&&h()}}))},w=function(){!s||l?_():1==s&&g()},g=function(){d.addClass("websters-select_custom")},_=function(){d.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),d.offset(),0),l=o.find("option:selected").index(),p=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),f&&t.remove(),f=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+p+'"></div>'),o.find("option").each(function(e){var t=$(this);e==l?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),d.append(t),d.addClass("websters-select_opened"),s=t.outerHeight(),s>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),h()}})};i.checkOpened=function(){return f},i.close=function(){h()},v()}}();
"use strict";!function(){$(function(){$.each($(".store-finder"),function(){new n($(this))})});var n=function(n){var t=this,e=n,i=e.find("input"),o=e.find("select"),s=(e.find(".store-finders__search"),function(){i.on({keyup:function(){$("#wpsl-search-input").val($(this).val())}}),$("#wpsl-search-input").on({keyup:function(){i.val($(this).val())}}),o.on({change:function(){var n=$(this).find("option:selected").val();$("#wpsl-radius-dropdown").find("option:selected").removeAttr("selected"),$("#wpsl-radius-dropdown").find("option[value="+n+"]").attr("selected","selected")}})}),c=function(){e[0].obj=t,s()};c()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5pbmRleC5qcyIsImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5Lmhlcm8uanMiLCJqcXVlcnkub3VyLWNvb2tpZXMtc2xpZGVyLmpzIiwianF1ZXJ5LnJlYWwtc3R1ZmYuanMiLCJqcXVlcnkuaW5mby1jb29raWVzLXBvcHVwLmpzIiwianF1ZXJ5LnByb2R1Y3RzLWNvb2tpZXMtc2xpZGVyLmpzIiwianF1ZXJ5LnBvcHVwLmpzIiwianF1ZXJ5LndlYnN0ZXJzLXNlbGVjdC5qcyIsImpxdWVyeS5zdG9yZS1maW5kZXIuanMiXSwibmFtZXMiOlsiJCIsImVhY2giLCJTY3JvbGxUb3AiLCJ0aGlzIiwicGVyZmVjdFNjcm9sbGJhciIsIm9iaiIsIl9zZWxmIiwiX29iaiIsIl93aW5kb3ciLCJ3aW5kb3ciLCJfZG9tIiwiX2FkZEV2ZW50cyIsIm9uIiwiY2xpY2siLCJ3aWR0aCIsInN0b3AiLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwib2Zmc2V0IiwidG9wIiwiX2luaXQiLCJnbG9iYWxTY3JvbGxGbGFnIiwiUHJlbG9hZGVyIiwiTWVudSIsIlNjcm9sbFBhbmVsIiwiU2xpZGVzIiwiRnVsbEhlaWdodCIsIlNjcm9sbFRvSGFzaCIsIl9wcmVsb2FkZXIiLCJfYm9keSIsImxvYWQiLCJfc2hvd1NpdGUiLCJwcmVsb2FkZXIiLCJhZGRDbGFzcyIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJfaHRtbCIsIl9tZW51IiwiZmluZCIsIl9hY3Rpb24iLCJfYWN0aW9uMiIsIl9mbGFnSGlkZSIsImxhc3RTY3JvbGxUb3AiLCJfc2hvd01lbnVCdG4iLCJfZ2xvYmFsV2lkdGgiLCJyZXNpemUiLCJfY2xvc2VNZW51Iiwic2Nyb2xsIiwiaW5uZXJIZWlnaHQiLCJyZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwiRE9NTW91c2VTY3JvbGwiLCJlIiwiZGVsdGEiLCJvcmlnaW5hbEV2ZW50IiwiZGV0YWlsIiwiZGlyZWN0aW9uIiwiX2NoZWNrU2Nyb2xsIiwibW91c2V3aGVlbCIsIndoZWVsRGVsdGEiLCJldmVudCIsInN0IiwiX29wZW5NZW51IiwiZWxlbSIsImNzcyIsIm92ZXJmbG93WSIsIl9saW5rcyIsIl9oZWFkZXIiLCJjdXJJdGVtIiwibmV3Q2xhc3MiLCJhdHRyIiwibmV4dEl0ZW1Ub3AiLCJkdXJhdGlvbiIsInByb2dyZXNzIiwiY29tcGxldGUiLCJjdXJTY3JvbGwiLCJ3aW5kb3dIIiwiaGVpZ2h0IiwidG9wUG9zIiwidG9wSW5XaW5kb3ciLCJ2aXNpYmxlUGVyY2VudCIsInNsaWRlcyIsIl9zZXRIZWlnaHQiLCJtaW4taGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJsZW5ndGgiLCJfc2Nyb2xsVG8iLCJoYXNoIiwibG9jYXRpb24iLCJyZXBsYWNlIiwic2Nyb2xsVG8iLCJwYXJzZUludCIsIkhlcm8iLCJfc2xpY2tTbGlkZXIiLCJfYnRuRG93biIsIl9pbml0U2xpY2siLCJzbGljayIsImRvdHMiLCJhdXRvcGxheSIsImF1dG9wbGF5U3BlZWQiLCJhcnJvd3MiLCJPdXJDb29raWVzU2xpZGVyIiwiUmVhbFN0dWZmQnRuU2hvdyIsIlJlYWxTdHVmZkluZ3JlZGllbnRzU2hvdyIsIl9pbmdyZWRpZW50c0xpc3QiLCJfc2hvd01vcmVCdG4iLCJfY2xvc2VMaXN0IiwiZGF0YSIsImN1ckl0ZW1UZXh0T3BlbiIsImN1ckl0ZW1UZXh0Q2xvc2UiLCJfb3Blbkxpc3QiLCJ0ZXh0IiwiX3N0ZXAxIiwiX3N0ZXAzIiwiX3N0ZXA0IiwiX3N0ZXA1IiwiX2luZ3JlZGllbnRzQ29udGVudCIsIl9pbmdyZWRpZW50c0J0blNob3ciLCJuZXh0Q29udGVudCIsIm5leHQiLCJwYXJlbnQiLCJfY2xvc2VDb250ZW50IiwiX29wZW5Db250ZW50IiwiX3NldFBvcyIsImRvY3VtZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwic2xpZGUiLCJfaW1nMiIsIl9pbWczIiwiX2ltZzQiLCJfaW1nNSIsIl9pbWc2IiwiX2ltZzciLCJwYWdlWCIsImNsaWVudFgiLCJwYWdlWSIsImNsaWVudFkiLCJoYWxmV2lkdGgiLCJoYWxmSGVpZ2h0IiwicGVyY2VudEZyb21DZW50ZXJYIiwicGVyY2VudEZyb21DZW50ZXJZIiwib3V0ZXJXaWR0aCIsIl9tb3ZlVG9wIiwiX21vdmVCb3R0b20iLCJsZWZ0IiwiaW5uZXJXaWR0aCIsInhQZXJjZW50IiwieVBlcmNlbnQiLCJzdGVwIiwiaW1hZ2UiLCItd2Via2l0LXRyYW5zZm9ybSIsInRyYW5zZm9ybSIsIkluZm9Db29raWVzUG9wdXAiLCJfcG9wdXAiLCJjaXJJdGVtIiwidGl0bGUiLCJjb250ZW50IiwiaHRtbCIsIlByb2R1Y3RzQ29va2llc1NsaWRlciIsIlNob3BIZWlnaHQiLCJfc2xpY2tJbml0IiwiX2Rlc3Ryb3lTbGljayIsIlBvcHVwIiwiX3BvcHVwUGFkZGluZyIsIl9idG5TaG93IiwiX2J0bkNsb3NlIiwiX3dyYXAiLCJfY29udGVudHMiLCJfc2Nyb2xsQ29udGVpbmVyIiwiX3RpbWVyIiwiX2NlbnRlcldyYXAiLCJfZ2V0U2Nyb2xsV2lkdGgiLCJzY3JvbGxCYXJXaWR0aCIsInNjcm9sbERpdiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJvZmZzZXRXaWR0aCIsImNsaWVudFdpZHRoIiwicmVtb3ZlQ2hpbGQiLCJfaGlkZSIsInBhZGRpbmdSaWdodCIsIl9vbkV2ZW50cyIsIl9zaG93IiwiX3NldFBvcHVwQ29udGVudCIsImN1ckNvbnRlbnQiLCJmaWx0ZXIiLCJkaXNwbGF5IiwiV2Vic3RlcnNTZWxlY3QiLCJvcHRpb25UeXBlIiwic2hvd1R5cGUiLCJwYXJhbXMiLCJfc2Nyb2xsIiwiX29wdGlvblR5cGUiLCJfc2hvd1R5cGUiLCJfdmlzaWJsZSIsInZpc2libGUiLCJfZGV2aWNlIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIl90ZXh0IiwiX29wZW5lZCIsIl9hZGRXcmFwIiwiY3VyVGV4dCIsIm9wYWNpdHkiLCJ3cmFwIiwiYXBwZW5kIiwiYmVmb3JlIiwiZXEiLCJfaGlkZVBvcHVwIiwic2xpZGVVcCIsImZhZGVPdXQiLCJfY29uc3RydWN0b3IiLCJfc2VsZWN0Vmlld1R5cGUiLCJfc2hvd1BvcHVwIiwiX3NldE1vYmlsZVZpZXciLCJfc2V0Q3VzdG9tMSIsInNlbGVjdHMiLCJsaXN0IiwibWF4SGVpZ2h0IiwiY3VySW5kZXgiLCJpbmRleCIsImlkIiwiTWF0aCIsInJvdW5kIiwicmFuZG9tIiwiY2hlY2tPcGVuZWQiLCJjbG9zZSIsImkiLCJzbGlkZURvd24iLCJ2YWwiLCJ0cmlnZ2VyIiwiV3JpdGVEYXRhSW5Qb3B1cCIsIl9pbnB1dCIsIl9zZWxlY3QiLCJrZXl1cCIsImNoYW5nZSIsInNlbGVjdGVkVmFsIiwicmVtb3ZlQXR0ciJdLCJtYXBwaW5ncyI6IkFBQUEsY0FDQSxXQUVJQSxFQUFHLFdBRUNBLEVBQUVDLEtBQU1ELEVBQUcscUJBQXVCLFdBRTlCLEdBQUlFLEdBQVlGLEVBQUdHLFNBSXZCSCxFQUFFLGlCQUFpQkksb0JBSXZCLElBQUlGLEdBQVksU0FBVUcsR0FHdEIsR0FBSUMsR0FBUUgsS0FDUkksRUFBT0YsRUFDUEcsRUFBVVIsRUFBRVMsUUFDWkMsRUFBUVYsRUFBRyxjQUdYVyxFQUFhLFdBRVRKLEVBQUtLLElBQ0RDLE1BQU8sV0FjSCxNQVpJTCxHQUFRTSxTQUFXLE1BRW5CSixFQUFLSyxNQUFNLEdBQU0sR0FDakJMLEVBQUtNLFNBQVdDLFVBQVdqQixFQUFFLFNBQVNrQixTQUFTQyxJQUFNLElBQU8sT0FJNURULEVBQUtLLE1BQU0sR0FBTSxHQUNqQkwsRUFBS00sU0FBV0MsVUFBV2pCLEVBQUUsU0FBU2tCLFNBQVNDLElBQU0sSUFBTyxPQUl6RCxNQU1uQkMsRUFBUSxXQUNKYixFQUFNLEdBQUlGLElBQU1DLEVBQ2hCSyxJQUdSUztBQ3BEUixjQUNBLFdBRUksR0FBSUMsSUFBbUIsQ0FFdkJyQixHQUFHLFdBRUMsR0FBSXNCLEdBQVd0QixFQUFFLGVBRWpCQSxFQUFFQyxLQUFNRCxFQUFHLGlCQUFtQixXQUUxQixHQUFJdUIsR0FBT3ZCLEVB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SyxHQUFJYSxHQUFRMUosS0FBTSxVQUNsRC9ELEVBQUttTyxRQUFTLFVBQ2R0QixPQVNoQjlNLEdBQU0rTixZQUFjLFdBQ2hCLE1BQU96QixJQUVYdE0sRUFBTWdPLE1BQVEsV0FDWmxCLEtBSUZHO0FDaE5SLGNBQ0EsV0FFSXZOLEVBQUcsV0FFQ0EsRUFBRUMsS0FBTUQsRUFBRyxpQkFBbUIsV0FFMUIsR0FBSTJPLEdBQW1CM08sRUFBR0csVUFNbEMsSUFBSXdPLEdBQW1CLFNBQVV0TyxHQUc3QixHQUFJQyxHQUFRSCxLQUNSSSxFQUFPRixFQUNQdU8sRUFBU3JPLEVBQUsrQixLQUFLLFNBQ25CdU0sRUFBVXRPLEVBQUsrQixLQUFLLFVBSXBCM0IsR0FIYUosRUFBSytCLEtBQUssMEJBR1YsV0FFVHNNLEVBQU9oTyxJQUNIa08sTUFBTyxXQUVIOU8sRUFBRSxzQkFBc0J5TyxJQUFLek8sRUFBRUcsTUFBTXNPLFVBSzdDek8sRUFBRSxzQkFBc0JZLElBQ3BCa08sTUFBTyxXQUVIRixFQUFPSCxJQUFLek8sRUFBRUcsTUFBTXNPLFVBSzVCSSxFQUFRak8sSUFDSm1PLE9BQVEsV0FFSixHQUFJQyxHQUFjaFAsRUFBRUcsTUFBTW1DLEtBQUssbUJBQW1CbU0sS0FFbER6TyxHQUFFLHlCQUF5QnNDLEtBQUssbUJBQW1CMk0sV0FBVyxZQUM5RGpQLEVBQUUseUJBQXlCc0MsS0FBSyxnQkFBaUIwTSxFQUFhLEtBQUsxSyxLQUFLLFdBQVksaUJBTWhHbEQsRUFBUSxXQUNKYixFQUFNLEdBQUlGLElBQU1DLEVBQ2hCSyxJQUdSUyIsImZpbGUiOiJpbmRleC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbiggZnVuY3Rpb24oKSB7XG5cbiAgICAkKCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLnNpdGVfaW5kZXggLmxvZ28nICksIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBuZXcgU2Nyb2xsVG9wICggJCggdGhpcyApICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQoJyN3cHNsLXN0b3JlcyAnKS5wZXJmZWN0U2Nyb2xsYmFyKCk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgU2Nyb2xsVG9wID0gZnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfZG9tID0gICQoICdodG1sLCBib2R5Jyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9vYmoub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5zdG9wKCB0cnVlLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kb20uYW5pbWF0ZSggeyBzY3JvbGxUb3A6ICQoJy5zaXRlJykub2Zmc2V0KCkudG9wIC0gOTEgIH0sIDMwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5zdG9wKCB0cnVlLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kb20uYW5pbWF0ZSggeyBzY3JvbGxUb3A6ICQoJy5zaXRlJykub2Zmc2V0KCkudG9wIC0gNjQgIH0sIDMwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpOyIsIlwidXNlIHN0cmljdFwiO1xuKCBmdW5jdGlvbigpe1xuXG4gICAgdmFyIGdsb2JhbFNjcm9sbEZsYWcgPSB0cnVlO1xuXG4gICAgJCggZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIG5ldyBQcmVsb2FkZXIoICQoJy5wcmVsb2FkZXInKSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5zaXRlX19oZWFkZXInICksIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBuZXcgTWVudSAoICQoIHRoaXMgKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJ1tkYXRhLWhyZWZdJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IFNjcm9sbFBhbmVsKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLnNsaWRlcycpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBTbGlkZXMoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcuc2l0ZV9fY29udGVudC1mdWxsJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IEZ1bGxIZWlnaHQoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcuc2l0ZV9pbmRleCcpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBTY3JvbGxUb0hhc2goICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgUHJlbG9hZGVyID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfcHJlbG9hZGVyID0gb2JqLFxuICAgICAgICAgICAgX2JvZHkgPSAkKCdib2R5Jyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93U2l0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9ib2R5WzBdLnByZWxvYWRlciA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zaG93U2l0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3ByZWxvYWRlci5hZGRDbGFzcyggJ3ByZWxvYWRlcl9sb2FkZWQnICk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIF9wcmVsb2FkZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5zaXRlJykuYWRkQ2xhc3MoICdzaXRlX19sb2FkZWQnICk7XG5cbiAgICAgICAgICAgICAgICB9LDUwMCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgTWVudSA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2h0bWwgPSAkKCdodG1sJyksXG4gICAgICAgICAgICBfbWVudSA9IF9vYmouZmluZCgnLnNpdGVfX21lbnUnKSxcbiAgICAgICAgICAgIF9jb250ZW50ID0gJCgnLnNpdGVfX2NvbnRlbnQnKSxcbiAgICAgICAgICAgIF9hY3Rpb24gPSBmYWxzZSxcbiAgICAgICAgICAgIF9hY3Rpb24yID0gZmFsc2UsXG4gICAgICAgICAgICBfZmxhZ0hpZGUgPSB0cnVlLFxuICAgICAgICAgICAgbGFzdFNjcm9sbFRvcCA9IDAsXG4gICAgICAgICAgICBfc2hvd01lbnVCdG4gPSBfb2JqLmZpbmQoJy5zaXRlX19tZW51LWJ0bicpLFxuICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gMDtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9nbG9iYWxXaWR0aCAhPSBfd2luZG93LndpZHRoKCkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSBfd2luZG93LndpZHRoKCkgKyAxO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21lbnUuc2Nyb2xsVG9wKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCBfc2hvd01lbnVCdG4gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGwnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hY3Rpb24gPSBfd2luZG93LnNjcm9sbFRvcCgpID49IF9vYmouaW5uZXJIZWlnaHQoKSAqIDI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LnNjcm9sbFRvcCgpID49IF9vYmouaW5uZXJIZWlnaHQoKSsgMjAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX2ZsYWdIaWRlICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mbGFnSGlkZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mbGFnSGlkZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3NpdGVfX2hlYWRlcl9oaWRlJyApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9hY3Rpb24gKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX29iai5oYXNDbGFzcyggJ3NpdGVfX2hlYWRlcl9oaWRlJyApICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAnc2l0ZV9faGVhZGVyX2ZpeGVkJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3NpdGVfX2hlYWRlcl9oaWRlJyApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIF93aW5kb3cuc2Nyb2xsVG9wKCkgPD0gX29iai5pbm5lckhlaWdodCgpICogMyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdzaXRlX19oZWFkZXJfZml4ZWQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3NpdGVfX2hlYWRlcl9oaWRkZW4nICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cuc2Nyb2xsVG9wKCkgPD0gMTAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnc2l0ZV9faGVhZGVyX2ZpeGVkJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZGVuJyApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ0RPTU1vdXNlU2Nyb2xsJzogZnVuY3Rpb24gKCBlICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLm9yaWdpbmFsRXZlbnQuZGV0YWlsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRlbHRhICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9ICggZGVsdGEgPiAwICkgPyAxIDogLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIGRpcmVjdGlvbiApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZGlyZWN0aW9uIDwgMCAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWN0aW9uMiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWN0aW9uMiA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwIClcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ21vdXNld2hlZWwnOiBmdW5jdGlvbiAoIGUgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRlbHRhICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9ICggZGVsdGEgPiAwICkgPyAtMSA6IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIGRpcmVjdGlvbiApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZGlyZWN0aW9uIDwgMCAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWN0aW9uMiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWN0aW9uMiA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwIClcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24oZXZlbnQpe1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdCA9ICQodGhpcykuc2Nyb2xsVG9wKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0ID4gbGFzdFNjcm9sbFRvcCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggMSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gMVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggLTEgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IC0xXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYXN0U2Nyb2xsVG9wID0gc3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBkaXJlY3Rpb24gPCAwICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbjIgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbjIgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwIClcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBfc2hvd01lbnVCdG4ub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggJCggdGhpcyApLmhhc0NsYXNzKCAnb3BlbmVkJyApICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTWVudSggJCggdGhpcyApIClcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5NZW51KCAkKCB0aGlzICkgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jaGVja1Njcm9sbCA9IGZ1bmN0aW9uKCBkaXJlY3Rpb24gKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggZGlyZWN0aW9uID4gMCAmJiAhX29iai5oYXNDbGFzcyggJ3NpdGVfX2hlYWRlcl9oaWRkZW4nICkgJiYgIV9zaG93TWVudUJ0bi5oYXNDbGFzcyggJ29wZW5lZCcgKSAmJiBfYWN0aW9uICYmICFfYWN0aW9uMiApe1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZGVuJyApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiA8IDAgJiYgX29iai5oYXNDbGFzcyggJ3NpdGVfX2hlYWRlcl9oaWRkZW4nICkgJiYgIV9zaG93TWVudUJ0bi5oYXNDbGFzcyggJ29wZW5lZCcgKSAgJiYgX2FjdGlvbiAmJiBfYWN0aW9uMiAmJiBnbG9iYWxTY3JvbGxGbGFnICl7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcygnc2l0ZV9faGVhZGVyX2hpZGRlbicpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Nsb3NlTWVudSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG4gICAgICAgICAgICAgICAgX2h0bWwuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgZWxlbS5yZW1vdmVDbGFzcyggJ29wZW5lZCcgKTtcbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnb3BlbmVkLW1lbnUnICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29wZW5NZW51ID0gZnVuY3Rpb24oIGVsZW0gKSAge1xuXG4gICAgICAgICAgICAgICAgZWxlbS5hZGRDbGFzcyggJ29wZW5lZCcgKTtcbiAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAnb3BlbmVkLW1lbnUnICk7XG5cbiAgICAgICAgICAgICAgICBfaHRtbC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJ1xuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgU2Nyb2xsUGFuZWwgPSBmdW5jdGlvbiAoIG9iaiApIHtcblxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9saW5rcyA9IF9vYmosXG4gICAgICAgICAgICBfaHRtbCA9ICQoJ2h0bWwnKSxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfZG9tID0gICQoICdodG1sLCBib2R5JyksXG4gICAgICAgICAgICBfaGVhZGVyID0gJCgnLnNpdGVfX2hlYWRlcicpLFxuICAgICAgICAgICAgX3BvcHVwID0gJCgnLnBvcHVwX19jb29raWVzLWluZm8nKTtcblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vX2NoYW5nZUFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGwnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vX2NoYW5nZUFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfbGlua3Mub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQoIHRoaXMgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDbGFzcyA9IGN1ckl0ZW0uYXR0cignZGF0YS1ocmVmJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW1Ub3AgPSAkKCAnLicgKyBuZXdDbGFzcyAgKS5vZmZzZXQoKS50b3A7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnNpdGVfX21lbnUtbmF2X2FuY2hvcnMgYScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfZG9tLnN0b3AoIHRydWUsIGZhbHNlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZG9tLmFuaW1hdGUoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IG5leHRJdGVtVG9wXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFNjcm9sbEZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5hZGRDbGFzcyggJ3NpdGVfX2hlYWRlcl9oaWRkZW4nICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU2Nyb2xsRmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFNjcm9sbEZsYWcgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9odG1sLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuZmluZCgnLnNpdGVfX21lbnUtYnRuJykucmVtb3ZlQ2xhc3MoICdvcGVuZWQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLnJlbW92ZUNsYXNzKCAnb3BlbmVkLW1lbnUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFNsaWRlcyA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbih7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tTY3JvbGwgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgdmFyIGN1clNjcm9sbCA9IF93aW5kb3cuc2Nyb2xsVG9wKCksXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd0ggPSBfd2luZG93LmhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICB0b3BQb3MgPSBfb2JqLm9mZnNldCgpLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgdG9wSW5XaW5kb3cgPSB0b3BQb3MtY3VyU2Nyb2xsLFxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlUGVyY2VudCA9IDEtKHRvcEluV2luZG93L3dpbmRvd0gpO1xuXG4gICAgICAgICAgICAgICAgaWYoIHZpc2libGVQZXJjZW50ID4gLjUgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoICFfb2JqLmhhc0NsYXNzKCdzbGlkZXNfYWN0aXZlJykgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoJ3NsaWRlc19hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0uc2xpZGVzID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgRnVsbEhlaWdodCA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfaGVhZGVyID0gJCgnLnNpdGVfX2hlYWRlcicpLFxuICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gMDtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9nbG9iYWxXaWR0aCAhPSBfd2luZG93LndpZHRoKCkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSBfd2luZG93LndpZHRoKCkgKyAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gX3dpbmRvdy5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogaGVpZ2h0IC0gX2hlYWRlci5pbm5lckhlaWdodCgpIC0gJCgnLnNpdGVfX21haW4tdGl0bGUnKS5vdXRlckhlaWdodCh0cnVlKVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIGlmKCBfb2JqLmZpbmQoJy5jb250YWN0LXVzJykubGVuZ3RoICkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IGhlaWdodCAtIF9oZWFkZXIuaW5uZXJIZWlnaHQoKSAtICQoJy5zaXRlX19tYWluLXRpdGxlJykub3V0ZXJIZWlnaHQodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IGhlaWdodCAtIF9oZWFkZXIuaW5uZXJIZWlnaHQoKSAtICQoJy5zaXRlX19tYWluLXRpdGxlJykub3V0ZXJIZWlnaHQodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBTY3JvbGxUb0hhc2ggPSBmdW5jdGlvbiAoIG9iaiApIHtcblxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfZG9tID0gICQoJ2h0bWwsIGJvZHknKTtcblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zY3JvbGxUbygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDAgKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2Nyb2xsVG8gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcblxuICAgICAgICAgICAgICAgIGlmKCBoYXNoICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtID0gJCggJy4nICsgd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKSApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBlbGVtLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKCAwLCBwYXJzZUludCggZWxlbS5vZmZzZXQoKS50b3AgKSApO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4oIGZ1bmN0aW9uKCl7XG5cbiAgICB2YXIgZ2xvYmFsU2Nyb2xsRmxhZyA9IHRydWU7XG5cbiAgICAkKCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLmhlcm8nICksIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBuZXcgSGVybyAoICQoIHRoaXMgKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgIH0gKTtcblxuICAgIHZhciBIZXJvID0gZnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfaGVhZGVyID0gJCgnLnNpdGVfX2hlYWRlcicpLFxuICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gMCxcbiAgICAgICAgICAgIF9zbGlja1NsaWRlciA9IG51bGwsXG4gICAgICAgICAgICBfZG9tID0gICQoICdodG1sLCBib2R5JyksXG4gICAgICAgICAgICBfYnRuRG93biA9IF9vYmouZmluZCgnLmhlcm9fX2Rvd24sIC5idG4nKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9nbG9iYWxXaWR0aCAhPSBfd2luZG93LndpZHRoKCkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSBfd2luZG93LndpZHRoKCkgKyAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYnRuRG93bi5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfZG9tLnN0b3AoIHRydWUsIGZhbHNlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZG9tLmFuaW1hdGUoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6ICQoJy5vdXItY29va2llcycpLm9mZnNldCgpLnRvcFxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuYWRkQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZGVuJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFNjcm9sbEZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfaW5pdFNsaWNrKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRTbGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3NsaWNrU2xpZGVyID0gX29iai5maW5kKCcuc2xpY2stY29udGFpbmVyJykuc2xpY2soIHtcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDUwMDAsXG4gICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2VcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gX3dpbmRvdy5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggKCBoZWlnaHQgLSBfaGVhZGVyLmlubmVySGVpZ2h0KCkgKSA+IHBhcnNlSW50KCBfb2JqLmNzcygnbWluLWhlaWdodCcpICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLnNsaWNrLWxpc3QnKS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIF9oZWFkZXIuaW5uZXJIZWlnaHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLnNsaWNrLWxpc3QnKS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHBhcnNlSW50KCBfb2JqLmNzcygnbWluLWhlaWdodCcpIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggaGVpZ2h0ID4gcGFyc2VJbnQoIF9vYmouY3NzKCdtaW4taGVpZ2h0JykgKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuc2xpY2stbGlzdCcpLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuc2xpY2stbGlzdCcpLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcGFyc2VJbnQoIF9vYmouY3NzKCdtaW4taGVpZ2h0JykgKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpOyIsIlwidXNlIHN0cmljdFwiO1xuKCBmdW5jdGlvbigpe1xuXG4gICAgJCggZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQuZWFjaCggJCggJy5vdXItY29va2llcycgKSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIG5ldyBPdXJDb29raWVzU2xpZGVyICggJCggdGhpcyApICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgfSApO1xuXG4gICAgdmFyIE91ckNvb2tpZXNTbGlkZXIgPSBmdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfaW5pdFNsaWNrKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRTbGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX29iai5maW5kKCcuc2xpY2stY29udGFpbmVyJykuc2xpY2soIHtcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDUwMDBcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG59ICkoKTsiLCJcInVzZSBzdHJpY3RcIjtcbiggZnVuY3Rpb24oKXtcblxuICAgIHZhciBnbG9iYWxTY3JvbGxGbGFnID0gdHJ1ZTtcblxuICAgICQoIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAkLmVhY2goICQoICcucmVhbC1zdHVmZicgKSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIG5ldyBSZWFsU3R1ZmZCdG5TaG93ICggJCggdGhpcyApICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5yZWFsLXN0dWZmX19wcm9kdWN0cycgKSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIG5ldyBSZWFsU3R1ZmZJbmdyZWRpZW50c1Nob3cgKCAkKCB0aGlzICkgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgUmVhbFN0dWZmQnRuU2hvdyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gMCxcbiAgICAgICAgICAgIF9oZWFkZXIgPSAkKCcuc2l0ZV9faGVhZGVyJyksXG4gICAgICAgICAgICBfaW5ncmVkaWVudHNMaXN0ID0gX29iai5maW5kKCcucmVhbC1zdHVmZl9faW5ncmVkaWVudHMtbGlzdCcpLFxuICAgICAgICAgICAgX2RvbSA9ICAkKCAnaHRtbCwgYm9keScpLFxuICAgICAgICAgICAgX3Nob3dNb3JlQnRuID0gX29iai5maW5kKCcuYnRuJyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSBfd2luZG93LndpZHRoKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfZ2xvYmFsV2lkdGggIT0gX3dpbmRvdy53aWR0aCgpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gX3dpbmRvdy53aWR0aCgpICsgMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfc2hvd01vcmVCdG4uaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZUxpc3QoIF9zaG93TW9yZUJ0biwgX3Nob3dNb3JlQnRuLmRhdGEoJ2Nsb3NlJykgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX3Nob3dNb3JlQnRuLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW1UZXh0T3BlbiA9IGN1ckl0ZW0uZGF0YSgnb3BlbicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW1UZXh0Q2xvc2UgPSBjdXJJdGVtLmRhdGEoJ2Nsb3NlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmhhc0NsYXNzKCdvcGVuZWQnKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZUxpc3QoIGN1ckl0ZW0sY3VySXRlbVRleHRDbG9zZSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5MaXN0KCBjdXJJdGVtLGN1ckl0ZW1UZXh0T3BlbiApXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2xvc2VMaXN0ID0gZnVuY3Rpb24oIGVsZW0sIHRleHQgKSB7XG5cbiAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgICAgICAgICBlbGVtLnRleHQodGV4dCk7XG4gICAgICAgICAgICAgICAgX2luZ3JlZGllbnRzTGlzdC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9kb20uc3RvcCggdHJ1ZSwgZmFsc2UgKTtcbiAgICAgICAgICAgICAgICBfZG9tLmFuaW1hdGUoIHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKCcucmVhbC1zdHVmZicpLm9mZnNldCgpLnRvcCAtICQoJy5zaXRlX19oZWFkZXInKS5pbm5lckhlaWdodCgpXG5cbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLmFkZENsYXNzKCAnc2l0ZV9faGVhZGVyX2hpZGRlbicgKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU2Nyb2xsRmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFNjcm9sbEZsYWcgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3Blbkxpc3QgPSBmdW5jdGlvbiggZWxlbSwgdGV4dCApIHtcblxuICAgICAgICAgICAgICAgIGVsZW0uYWRkQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgIGVsZW0udGV4dCh0ZXh0KTtcbiAgICAgICAgICAgICAgICBfaW5ncmVkaWVudHNMaXN0LmNzcygge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IF9pbmdyZWRpZW50c0xpc3QuZmluZCgnPmRpdicpLmlubmVySGVpZ2h0KClcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX2RvbS5zdG9wKCB0cnVlLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgIF9kb20uYW5pbWF0ZSgge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IF9pbmdyZWRpZW50c0xpc3Qub2Zmc2V0KCkudG9wIC0gJCgnLnNpdGVfX2hlYWRlcicpLmlubmVySGVpZ2h0KClcblxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFNjcm9sbEZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuYWRkQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZGVuJyApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU2Nyb2xsRmxhZyA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFJlYWxTdHVmZkluZ3JlZGllbnRzU2hvdyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfaGVhZGVyID0gJCggJy5zaXRlX19oZWFkZXInKSxcbiAgICAgICAgICAgIF9zdGVwMSA9IDE1LFxuICAgICAgICAgICAgX3N0ZXAyID0gMixcbiAgICAgICAgICAgIF9zdGVwMyA9IDUsXG4gICAgICAgICAgICBfc3RlcDQgPSA2LFxuICAgICAgICAgICAgX3N0ZXA1ID0gNyxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSAwLFxuICAgICAgICAgICAgX2RvbSA9ICAkKCAnaHRtbCwgYm9keScpLFxuICAgICAgICAgICAgX2luZ3JlZGllbnRzQ29udGVudCA9IF9vYmouZmluZCgnLnJlYWwtc3R1ZmZfX2Rlc2NyaXB0aW9uLWNvbnRlbnQnKSxcbiAgICAgICAgICAgIF9pbmdyZWRpZW50c0J0blNob3cgPSBfb2JqLmZpbmQoJy5yZWFsLXN0dWZmX19kZXNjcmlwdGlvbi1idG4nKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX2luZ3JlZGllbnRzQnRuU2hvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dENvbnRlbnQgPSBjdXJJdGVtLm5leHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmhhc0NsYXNzKCdvcGVuZWQnKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VDb250ZW50KGN1ckl0ZW0sIHBhcmVudCwgbmV4dENvbnRlbnQpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuQ29udGVudChjdXJJdGVtLCBwYXJlbnQsIG5leHRDb250ZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSBfd2luZG93LndpZHRoKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0UG9zKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX2dsb2JhbFdpZHRoICE9IF93aW5kb3cud2lkdGgoKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSBfd2luZG93LndpZHRoKCkgKyAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZUNvbnRlbnQoIF9pbmdyZWRpZW50c0J0blNob3csIF9vYmosIF9pbmdyZWRpZW50c0NvbnRlbnQgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgICAgICAgICAgXCIucmVhbC1zdHVmZl9fZGVzY3JpcHRpb24tY29udGVudFwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiggZXZlbnQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYm9keVwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VDb250ZW50KCBfaW5ncmVkaWVudHNCdG5TaG93LCBfb2JqLCBfaW5ncmVkaWVudHNDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcucmVhbC1zdHVmZl9fZGVzY3JpcHRpb24nKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXG4gICAgICAgICAgICAgICAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgICAgICAgICAnYm9keScsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBlICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ltZzEgPSBzbGlkZS5maW5kKCcucmVhbC1zdHVmZl9fcHJvZHVjdHMtaW1nJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ltZzIgPSBzbGlkZS5maW5kKCcucmVhbC1zdHVmZl9fZGVzY3JpcHRpb25fMTpub3QoLm9wZW5lZCknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW1nMyA9IHNsaWRlLmZpbmQoJy5yZWFsLXN0dWZmX19kZXNjcmlwdGlvbl8yOm5vdCgub3BlbmVkKScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbWc0ID0gc2xpZGUuZmluZCgnLnJlYWwtc3R1ZmZfX2Rlc2NyaXB0aW9uXzM6bm90KC5vcGVuZWQpJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ltZzUgPSBzbGlkZS5maW5kKCcucmVhbC1zdHVmZl9fZGVzY3JpcHRpb25fNDpub3QoLm9wZW5lZCknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW1nNiA9IHNsaWRlLmZpbmQoJy5yZWFsLXN0dWZmX19kZXNjcmlwdGlvbl81Om5vdCgub3BlbmVkKScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbWc3ID0gc2xpZGUuZmluZCgnLnJlYWwtc3R1ZmZfX2Rlc2NyaXB0aW9uXzY6bm90KC5vcGVuZWQpJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX3dpbmRvdy53aWR0aCgpID4gMTAyNCAmJiAhKCBfaGVhZGVyLmhhc0NsYXNzKCdvcGVuZWQnKSApICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhZ2VYID0gZS5jbGllbnRYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlWSA9IGUuY2xpZW50WSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFsZldpZHRoID0gX29iai53aWR0aCgpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFsZkhlaWdodCA9IF9vYmouaGVpZ2h0KCkgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJjZW50RnJvbUNlbnRlclggPSAoIHBhZ2VYIC0gaGFsZldpZHRoICkgLyBoYWxmV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnRGcm9tQ2VudGVyWSA9ICggcGFnZVkgLSBoYWxmSGVpZ2h0ICkgLyBoYWxmSGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF93aW5kb3cub3V0ZXJXaWR0aCgpID4gMTAyNCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vX21vdmVUb3AoIHBlcmNlbnRGcm9tQ2VudGVyWCwgcGVyY2VudEZyb21DZW50ZXJZLCBfc3RlcDIsIF9pbWcxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlVG9wKHBlcmNlbnRGcm9tQ2VudGVyWCwgcGVyY2VudEZyb21DZW50ZXJZLCBfc3RlcDMsIF9pbWcyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVCb3R0b20ocGVyY2VudEZyb21DZW50ZXJYLCBwZXJjZW50RnJvbUNlbnRlclksIF9zdGVwNCwgX2ltZzMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZVRvcChwZXJjZW50RnJvbUNlbnRlclgsIHBlcmNlbnRGcm9tQ2VudGVyWSwgX3N0ZXA1LCBfaW1nNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlQm90dG9tKHBlcmNlbnRGcm9tQ2VudGVyWCwgcGVyY2VudEZyb21DZW50ZXJZLCBfc3RlcDMsIF9pbWc1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVCb3R0b20ocGVyY2VudEZyb21DZW50ZXJYLCBwZXJjZW50RnJvbUNlbnRlclksIF9zdGVwMSwgX2ltZzYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZUJvdHRvbShwZXJjZW50RnJvbUNlbnRlclgsIHBlcmNlbnRGcm9tQ2VudGVyWSwgX3N0ZXA1LCBfaW1nNyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jbG9zZUNvbnRlbnQgPSBmdW5jdGlvbiggY3VySXRlbSwgcGFyZW50LCBuZXh0Q29udGVudCApIHtcblxuICAgICAgICAgICAgICAgIGN1ckl0ZW0ucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3BlbkNvbnRlbnQgPSBmdW5jdGlvbiggY3VySXRlbSwgcGFyZW50LCBuZXh0Q29udGVudCApIHtcblxuICAgICAgICAgICAgICAgIF9pbmdyZWRpZW50c0J0blNob3cucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgICQoJy5yZWFsLXN0dWZmX19kZXNjcmlwdGlvbicpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcblxuICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnb3BlbmVkJyk7XG5cbiAgICAgICAgICAgICAgICBfZG9tLnN0b3AoIHRydWUsIGZhbHNlICk7XG4gICAgICAgICAgICAgICAgX2RvbS5hbmltYXRlKCB7IHNjcm9sbFRvcDogbmV4dENvbnRlbnQub2Zmc2V0KCkudG9wIC0gNDAgLSAkKCcuc2l0ZV9faGVhZGVyJykuaW5uZXJIZWlnaHQoKSAgfSwgMzAwICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0UG9zID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfaW5ncmVkaWVudHNDb250ZW50LmVhY2goIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5vZmZzZXQoKS5sZWZ0ICsgY3VySXRlbS5pbm5lcldpZHRoKCkgPj0gX3dpbmRvdy53aWR0aCgpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdyaWdodF9wb3MnKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLnJlbW92ZUNsYXNzKCdyaWdodF9wb3MnKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIGN1ckl0ZW0ub2Zmc2V0KCkubGVmdCA8PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdsZWZ0X3BvcycpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0ucmVtb3ZlQ2xhc3MoJ2xlZnRfcG9zJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX21vdmVCb3R0b20gPSBmdW5jdGlvbiggeFBlcmNlbnQsIHlQZXJjZW50LCBzdGVwLCBpbWFnZSApIHtcblxuICAgICAgICAgICAgICAgIGltYWdlLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNsYXRlKCAnICsgLSggeFBlcmNlbnQgKiBzdGVwICkgKyAncHgsJyArIC0oIHlQZXJjZW50ICogc3RlcCApICsgJ3B4ICknLFxuICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZSggJyArIC0oIHhQZXJjZW50ICogc3RlcCApICsgJ3B4LCAnICsgLSggeVBlcmNlbnQgKiBzdGVwICkgKyAncHggICknXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX21vdmVUb3AgPSBmdW5jdGlvbiggeFBlcmNlbnQsIHlQZXJjZW50LCBzdGVwLCBpbWFnZSApIHtcblxuICAgICAgICAgICAgICAgIGltYWdlLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNsYXRlKCAnICsgKCB4UGVyY2VudCAqIHN0ZXAgKSArICdweCAsJyArICggeVBlcmNlbnQgKiBzdGVwICkgKyAncHggICknLFxuICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZSggJyArICggeFBlcmNlbnQgKiBzdGVwICkgKyAncHggLCAnICsgKCB5UGVyY2VudCAqIHN0ZXAgKSArICdweCAgKSdcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgX3NldFBvcygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpOyIsIlwidXNlIHN0cmljdFwiO1xuKCBmdW5jdGlvbigpe1xuXG4gICAgJCggZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQuZWFjaCggJCgnLmNvb2tpZXMtaW5mb19idG4nKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgSW5mb0Nvb2tpZXNQb3B1cCggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgIH0gKTtcblxuICAgIHZhciBJbmZvQ29va2llc1BvcHVwID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93KSxcbiAgICAgICAgICAgIF9wb3B1cCA9ICQoJy5wb3B1cF9fY29va2llcy1pbmZvJyk7XG5cbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfb2JqLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2lySXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gY2lySXRlbS5maW5kKCcuY29va2llcy1pbmZvX190aXRsZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gY2lySXRlbS5maW5kKCcuY29va2llcy1pbmZvX190ZXh0Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcG9wdXAuZmluZCgnLnNpdGVfX21haW4tdGl0bGUnKS5odG1sKCB0aXRsZS5odG1sKCkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcG9wdXAuZmluZCgnLmNvb2tpZXMtaW5mb19fZGVzY3JpcHRpb24nKS5odG1sKCBjb250ZW50Lmh0bWwoKSApXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpOyIsIlwidXNlIHN0cmljdFwiO1xuKCBmdW5jdGlvbigpe1xuXG4gICAgJCggZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQuZWFjaCggJCgnLnByb2R1Y3RzLWNvb2tpZXNfX2l0ZW1zJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IFByb2R1Y3RzQ29va2llc1NsaWRlciggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoICcuc2hvcCcgKSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIG5ldyBTaG9wSGVpZ2h0ICggJCggdGhpcyApICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgfSApO1xuXG4gICAgdmFyIFByb2R1Y3RzQ29va2llc1NsaWRlciA9IGZ1bmN0aW9uICggb2JqICkge1xuXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApLFxuICAgICAgICAgICAgX3NsaWNrSW5pdCA9IGZhbHNlLFxuICAgICAgICAgICAgX3NsaWNrU2xpZGVyO1xuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgNzY4ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICFfc2xpY2tJbml0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbml0U2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NsaWNrSW5pdCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfc2xpY2tJbml0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kZXN0cm95U2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NsaWNrSW5pdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0U2xpY2sgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9zbGlja1NsaWRlciA9IF9vYmouZmluZCgnLnNsaWNrLWNvbnRhaW5lcicpLnNsaWNrKCB7XG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Rlc3Ryb3lTbGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3NsaWNrU2xpZGVyLnNsaWNrKCd1bnNsaWNrJyk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8IDc2OCApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggIV9zbGlja0luaXQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbml0U2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zbGlja0luaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFNob3BIZWlnaHQgPSBmdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgIF9oZWFkZXIgPSAkKCcuc2l0ZV9faGVhZGVyJyksXG4gICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSAwO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX2dsb2JhbFdpZHRoICE9IF93aW5kb3cud2lkdGgoKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKSArIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBfd2luZG93LmhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiBoZWlnaHQgLSBfaGVhZGVyLmlubmVySGVpZ2h0KCkgLSBwYXJzZUludCggX29iai5jc3MoJ3BhZGRpbmctYm90dG9tJykgKSAtIHBhcnNlSW50KCBfb2JqLmNzcygncGFkZGluZy10b3AnKSApIC0gJCgnLnNpdGVfX21haW4tdGl0bGUnKS5vdXRlckhlaWdodCh0cnVlKVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcblxuICAgICQoIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgJCggJy5wb3B1cCcgKS5lYWNoKGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgIG5ldyBQb3B1cCgkKHRoaXMpKTtcblxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgdmFyIFBvcHVwID0gZnVuY3Rpb24oIG9iaiApe1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfcG9wdXBQYWRkaW5nID0gNDAsXG4gICAgICAgICAgICBfYnRuU2hvdyA9ICAkKCAnLnBvcHVwX19vcGVuJyApLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9idG5DbG9zZSA9IF9vYmouZmluZCggJy5wb3B1cF9fY2xvc2UsIC5wb3B1cF9fY2FuY2VsJyApLFxuICAgICAgICAgICAgX3dyYXAgPSBfb2JqLmZpbmQoICcucG9wdXBfX3dyYXAnICksXG4gICAgICAgICAgICBfY29udGVudHMgPSBfb2JqLmZpbmQoICcucG9wdXBfX2NvbnRlbnQnICksXG4gICAgICAgICAgICBfc2Nyb2xsQ29udGVpbmVyID0gJCggJ2h0bWwnICksXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfZ2xvYmFsV2lkdGgsXG4gICAgICAgICAgICBfdGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe30sIDEgKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2NlbnRlcldyYXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGlmICggX3dpbmRvdy5oZWlnaHQoKSAtICggX3BvcHVwUGFkZGluZyAqIDIgKSAtIF93cmFwLmhlaWdodCgpID4gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgX3dyYXAuY3NzKCB7IHRvcDogKCAoIF93aW5kb3cuaGVpZ2h0KCkgLSAoIF9wb3B1cFBhZGRpbmcgKiAyICkgKSAtIF93cmFwLmhlaWdodCgpICkgLyAyIH0gKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfd3JhcC5jc3MoIHsgdG9wOiAwIH0gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2dldFNjcm9sbFdpZHRoID0gZnVuY3Rpb24gKCl7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnKSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsQmFyV2lkdGg7XG5cbiAgICAgICAgICAgICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gJ3BvcHVwX19zY3JvbGxiYXItbWVhc3VyZSc7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCBzY3JvbGxEaXYgKTtcblxuICAgICAgICAgICAgICAgIHNjcm9sbEJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbEJhcldpZHRoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9oaWRlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9zY3JvbGxDb250ZWluZXIuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAncG9wdXBfb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdwb3B1cF9oaWRlJyApO1xuXG4gICAgICAgICAgICAgICAgX3RpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLmNzcyAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnc2Nyb2xsJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAncG9wdXBfaGlkZScgKTtcbiAgICAgICAgICAgICAgICB9LCAzMDAgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jZW50ZXJXcmFwKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfZ2xvYmFsV2lkdGggIT0gX3dpbmRvdy53aWR0aCgpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKSArIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX2J0blNob3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKHRoaXMpLmhhc0NsYXNzKCdjb29raWVzLWluZm9fYnRuJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2hvdyggJCggdGhpcyApLmF0dHIoICdkYXRhLXBvcHVwJyApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93KCAkKCB0aGlzICkuYXR0ciggJ2RhdGEtcG9wdXAnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF93cmFwLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiggZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYnRuQ2xvc2Uub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zaG93ID0gZnVuY3Rpb24oIGNsYXNzTmFtZSApe1xuICAgICAgICAgICAgICAgIF9zZXRQb3B1cENvbnRlbnQoIGNsYXNzTmFtZSApO1xuXG4gICAgICAgICAgICAgICAgX3Njcm9sbENvbnRlaW5lci5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiBfZ2V0U2Nyb2xsV2lkdGgoKVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAncG9wdXBfb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgIF9jZW50ZXJXcmFwKCk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0UG9wdXBDb250ZW50ID0gZnVuY3Rpb24oIGNsYXNzTmFtZSApe1xuICAgICAgICAgICAgICAgIHZhciBjdXJDb250ZW50ID0gX2NvbnRlbnRzLmZpbHRlciggJy5wb3B1cF9fJyArIGNsYXNzTmFtZSApO1xuXG4gICAgICAgICAgICAgICAgX2NvbnRlbnRzLmNzcyggeyBkaXNwbGF5OiAnbm9uZScgfSApO1xuICAgICAgICAgICAgICAgIGN1ckNvbnRlbnQuY3NzKCB7IGRpc3BsYXk6ICdibG9jaycgfSApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG59ICkoKTtcblxuIiwiKCBmdW5jdGlvbigpe1xuXG4gICAgJCggZnVuY3Rpb24oKXtcbiAgICAgICAgJCggJ3NlbGVjdCcgKS5lYWNoKCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgbmV3IFdlYnN0ZXJzU2VsZWN0KCB7XG4gICAgICAgICAgICAgICAgb2JqOiAkKCB0aGlzICksXG4gICAgICAgICAgICAgICAgb3B0aW9uVHlwZTogMSxcbiAgICAgICAgICAgICAgICBzaG93VHlwZTogMlxuICAgICAgICAgICAgfSApO1xuICAgICAgICB9ICk7XG4gICAgfSApO1xuXG4gICAgdmFyIFdlYnN0ZXJzU2VsZWN0ID0gZnVuY3Rpb24oIHBhcmFtcyApe1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gcGFyYW1zLm9iaixcbiAgICAgICAgICAgIF9vcHRpb25UeXBlID0gcGFyYW1zLm9wdGlvblR5cGUgfHwgMCxcbiAgICAgICAgICAgIF9zaG93VHlwZSA9IHBhcmFtcy5zaG93VHlwZSB8fCAwLFxuICAgICAgICAgICAgX3Zpc2libGUgPSBwYXJhbXMudmlzaWJsZSB8fCA1LFxuICAgICAgICAgICAgX2RldmljZSA9IC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApLFxuICAgICAgICAgICAgX3RleHQgPSAkKCAnPHNwYW4gY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RfX2l0ZW1cIj48L3NwYW4+JyApLFxuICAgICAgICAgICAgX3dyYXAgPSAkKCAnPGRpdiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdFwiPjwvZGl2PicgKSxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKSxcbiAgICAgICAgICAgIF9ib2R5ID0gJCggJ2JvZHknICksXG4gICAgICAgICAgICBfb3BlbmVkID0gZmFsc2UsXG4gICAgICAgICAgICBfcG9wdXAsIF9zY3JvbGw7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRXcmFwID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB2YXIgY3VyVGV4dCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9vYmoud3JhcCggX3dyYXAgKTtcbiAgICAgICAgICAgICAgICBfd3JhcCA9IF9vYmoucGFyZW50KCk7XG4gICAgICAgICAgICAgICAgX3dyYXAuYXBwZW5kKCAnPGRpdiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdF9fYXJyb3dcIj48L2Rpdj4nICk7XG4gICAgICAgICAgICAgICAgX29iai5iZWZvcmUoIF90ZXh0ICk7XG4gICAgICAgICAgICAgICAgX29iai5maW5kKCAnb3B0aW9uJyApLmVhY2goIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCggdGhpcyApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmF0dHIoICdzZWxlY3RlZCcgKSA9PSAnc2VsZWN0ZWQnICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUZXh0ID0gY3VySXRlbS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBpZiggY3VyVGV4dCA9PSAnJyApe1xuICAgICAgICAgICAgICAgICAgICBjdXJUZXh0ID0gIF9vYmouZmluZCggJ29wdGlvbicpLmVxKCAwICkudGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGV4dC50ZXh0KCBjdXJUZXh0ICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2hpZGVQb3B1cCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX29wZW5lZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYoICFfc2hvd1R5cGUgKXtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9zaG93VHlwZSA9PSAxICl7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5zdG9wKCB0cnVlLCBmYWxzZSApLnNsaWRlVXAoIDMwMCwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX3Nob3dUeXBlID09IDIgKSB7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5zdG9wKCB0cnVlLCBmYWxzZSApLmZhZGVPdXQoIDMwMCwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF93cmFwLnJlbW92ZUNsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X29wZW5lZCcgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuXG4gICAgICAgICAgICAgICAgX2FkZFdyYXAoKTtcbiAgICAgICAgICAgICAgICBfc2VsZWN0Vmlld1R5cGUoKTtcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9vYmoub24oICdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RleHQudGV4dCggJCggdGhpcyApLmZpbmQoICdvcHRpb246c2VsZWN0ZWQnICkudGV4dCgpICk7XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgaWYoIF9vcHRpb25UeXBlID09IDEgJiYgIV9kZXZpY2UgKXtcbiAgICAgICAgICAgICAgICAgICAgX3dyYXAub24oIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uKCBlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb3BlbmVkICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2hvd1BvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb3BlbmVkICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NlbGVjdFZpZXdUeXBlID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIGlmKCAhX29wdGlvblR5cGUgfHwgX2RldmljZSApe1xuICAgICAgICAgICAgICAgICAgICBfc2V0TW9iaWxlVmlldygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX29wdGlvblR5cGUgPT0gMSApe1xuICAgICAgICAgICAgICAgICAgICBfc2V0Q3VzdG9tMSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0Q3VzdG9tMSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3RfY3VzdG9tJyApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zZXRNb2JpbGVWaWV3ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfd3JhcC5hZGRDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9tb2JpbGUnICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3Nob3dQb3B1cCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdHMgPSAkKCAnc2VsZWN0JyApLFxuICAgICAgICAgICAgICAgICAgICBsaXN0ID0gJCggJzx1bD48L3VsPicpLFxuICAgICAgICAgICAgICAgICAgICBjdXJTY3JvbGwgPSBfd2luZG93LnNjcm9sbFRvcCgpLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBfd3JhcC5vZmZzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgY3VySW5kZXggPSBfb2JqLmZpbmQoICdvcHRpb246c2VsZWN0ZWQnICkuaW5kZXgoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBNYXRoLnJvdW5kKCBNYXRoLnJhbmRvbSgpICogMTAwMCApO1xuXG4gICAgICAgICAgICAgICAgc2VsZWN0cy5lYWNoKCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcyAhPT0gX29ialsgMCBdICYmIHRoaXMub2JqLmNoZWNrT3BlbmVkKCkgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBpZiggX29wZW5lZCApe1xuICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9vcGVuZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgX3BvcHVwID0gJCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RfX3BvcHVwXCIgaWQ9XCJ3ZWJzdGVycy1zZWxlY3RfX3BvcHVwJyArIGlkICsgJ1wiPjwvZGl2PicgKTtcblxuICAgICAgICAgICAgICAgIF9vYmouZmluZCggJ29wdGlvbicgKS5lYWNoKCBmdW5jdGlvbiggaSApe1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQoIHRoaXMgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggaSA9PSBjdXJJbmRleCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5hcHBlbmQoICc8bGkgY2xhc3M9XCJhY3RpdmVcIj4nICsgY3VySXRlbS50ZXh0KCkgKyAnPC9saT4nICk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmFwcGVuZCggJzxsaT4nICsgY3VySXRlbS50ZXh0KCkgKyAnPC9saT4nICk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9wb3B1cC5hcHBlbmQoIGxpc3QgKTtcbiAgICAgICAgICAgICAgICBfd3JhcC5hcHBlbmQoIF9wb3B1cCApO1xuICAgICAgICAgICAgICAgIF93cmFwLmFkZENsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X29wZW5lZCcgKTtcblxuICAgICAgICAgICAgICAgIC8vX3BvcHVwLmNzcygge1xuICAgICAgICAgICAgICAgIC8vICAgIHdpZHRoOiBfd3JhcC5vdXRlcldpZHRoKCksXG4gICAgICAgICAgICAgICAgLy8gICAgbGVmdDogLTEsXG4gICAgICAgICAgICAgICAgLy8gICAgdG9wOiBfd3JhcC5vdXRlckhlaWdodCgpIC0gM1xuICAgICAgICAgICAgICAgIC8vfSApO1xuXG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gX3BvcHVwLm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgaWYoIG1heEhlaWdodCA+IF9wb3B1cC5maW5kKCAnbGknICkuZXEoIDAgKS5vdXRlckhlaWdodCgpICogX3Zpc2libGUgKXtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmhlaWdodCggX3BvcHVwLmZpbmQoICdsaScgKS5lcSggMCApLm91dGVySGVpZ2h0KCkgKiBfdmlzaWJsZSApO1xuICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsID0gX3BvcHVwLnBlcmZlY3RTY3JvbGxiYXIoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiggX3Nob3dUeXBlID09IDEgKXtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnNsaWRlRG93biggMzAwICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfc2hvd1R5cGUgPT0gMiApIHtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmFuaW1hdGUoIHsgb3BhY2l0eTogMSB9LCAzMDApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9wb3B1cC5maW5kKCAnbGknICkub24oIHtcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oIGUgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICQoIHRoaXMgKS5pbmRleCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnZhbCggX29iai5maW5kKCAnb3B0aW9uJyApLmVxKCBpbmRleCApLmF0dHIoICd2YWx1ZScgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX29iai50cmlnZ2VyKCAnY2hhbmdlJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG4gICAgICAgIF9zZWxmLmNoZWNrT3BlbmVkID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiBfb3BlbmVkO1xuICAgICAgICB9O1xuICAgICAgICBfc2VsZi5jbG9zZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgX2hpZGVQb3B1cCgpO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XG5cbiAgICB9O1xuXG59ICkoKTsiLCJcInVzZSBzdHJpY3RcIjtcbiggZnVuY3Rpb24oKXtcblxuICAgICQoIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAkLmVhY2goICQoICcuc3RvcmUtZmluZGVyJyApLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgbmV3IFdyaXRlRGF0YUluUG9wdXAgKCAkKCB0aGlzICkgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgV3JpdGVEYXRhSW5Qb3B1cCA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfaW5wdXQgPSBfb2JqLmZpbmQoJ2lucHV0JyksXG4gICAgICAgICAgICBfc2VsZWN0ID0gX29iai5maW5kKCdzZWxlY3QnKSxcbiAgICAgICAgICAgIF9idG5TZWFyY2ggPSBfb2JqLmZpbmQoJy5zdG9yZS1maW5kZXJzX19zZWFyY2gnKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX2lucHV0Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGtleXVwOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyN3cHNsLXNlYXJjaC1pbnB1dCcpLnZhbCggJCh0aGlzKS52YWwoKSApO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAkKCcjd3BzbC1zZWFyY2gtaW5wdXQnKS5vbigge1xuICAgICAgICAgICAgICAgICAgICBrZXl1cDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCAkKHRoaXMpLnZhbCgpICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9zZWxlY3Qub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkVmFsID0gJCh0aGlzKS5maW5kKCdvcHRpb246c2VsZWN0ZWQnKS52YWwoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3dwc2wtcmFkaXVzLWRyb3Bkb3duJykuZmluZCgnb3B0aW9uOnNlbGVjdGVkJykucmVtb3ZlQXR0cignc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyN3cHNsLXJhZGl1cy1kcm9wZG93bicpLmZpbmQoJ29wdGlvblt2YWx1ZT0nKyBzZWxlY3RlZFZhbCArJ10nKS5hdHRyKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7Il19
